<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Vladi Gleba]]></title>
  <link href="http://vladigleba.github.io/atom.xml" rel="self"/>
  <link href="http://vladigleba.github.io/"/>
  <updated>2014-10-12T15:59:10-07:00</updated>
  <id>http://vladigleba.github.io/</id>
  <author>
    <name><![CDATA[Vladi Gleba]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Provisioning a Rails Server Using Chef, Part 3: Tying It All Together]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2014/09/02/provisioning-a-rails-server-using-chef-part-3-tying-it-all-together/"/>
    <updated>2014-09-02T14:02:00-07:00</updated>
    <id>http://vladigleba.github.io/blog/2014/09/02/provisioning-a-rails-server-using-chef-part-3-tying-it-all-together</id>
    <content type="html"><![CDATA[<p>We installed Chef Solo in <a href="http://vladigleba.github.io/blog/2014/07/28/provisioning-a-rails-server-using-chef-part-1-introduction-to-chef-solo/">part 1</a>, we wrote some recipes in <a href="http://vladigleba.github.io/blog/2014/08/12/provisioning-a-rails-server-using-chef-part-2-writing-the-recipes/">part 2</a>, and now we&rsquo;ll be tying everything together in part 3. When we&rsquo;re done, we&rsquo;ll not only have a fully provisioned server running your Rails app, but we&rsquo;ll also have an automated way of repeating this process whenever such a need arises in the future.</p>

<!-- more -->


<h1>Some Groundwork</h1>

<p>Before we can run the recipes from part 2, we need to specify exactly which recipes we want to run and in what order. Chef has something called a run list exactly for this purpose, and we store it in the JSON file located in the <code>/nodes</code> directory (I usually add it to the top of the file, before all the node-specific attributes, to make it easy to spot):</p>

<figure class='code'><figcaption><span>123.123.123.123.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;run_list&quot;</span><span class="p">:</span> <span class="p">[</span>
</span><span class='line'>    <span class="s2">&quot;recipe[phindee]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[phindee::users]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[phindee::ssh]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[phindee::nodejs]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[phindee::postgres]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[phindee::rbenv]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[phindee::redis]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[phindee::nginx]&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="s2">&quot;recipe[phindee::app]&quot;</span>
</span><span class='line'>  <span class="p">],</span>
</span><span class='line'>
</span><span class='line'>  <span class="err">.</span> <span class="err">.</span> <span class="err">.</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because Chef executes the run list in the exact order it&rsquo;s specified, it&rsquo;s important to list the recipes that other recipes will depend on first. Some of our recipes, for example, use the user that&rsquo;s created in <code>users.rb</code>, so that&rsquo;s why we place that recipe near the top, but recipes that don&rsquo;t depend on any other recipes can be placed anywhere you want. (Note that when referencing the <code>default.rb</code> recipe, it&rsquo;s enough to just specify the name of the cookbook it&rsquo;s located in, but in order to run the other recipes, it&rsquo;s necessary to specify the cookbook, along with the recipe&rsquo;s file name.)</p>

<p>By the way, if you ever find yourself not needing a particular recipe to run, all you need to do is remove that recipe from the run list, and Chef won&rsquo;t run it, but do be careful about removing recipes that other recipes depend on because that will cause issues.</p>

<h1>Show Time</h1>

<p>With our run list defined, we&rsquo;re now ready to start the provisioning process. Because we&rsquo;ll need to use quite a number of commands to get everything provisioned, it&rsquo;s best to automate this by creating a shell script. I created a file called <code>setup_vps.sh</code> inside my app&rsquo;s <code>/config</code> directory for this purpose:</p>

<figure class='code'><figcaption><span>setup_vps.sh</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="c"># check for correct number of arguments</span>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> <span class="nv">$# </span>-ne 3 <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">echo</span> <span class="s2">&quot;Usage: $0 &lt;user&gt; &lt;ip&gt; &lt;port&gt;&quot;</span>
</span><span class='line'>  <span class="nb">exit </span>1
</span><span class='line'><span class="k">fi</span>
</span><span class='line'>
</span><span class='line'><span class="c"># set variables</span>
</span><span class='line'><span class="nv">USER</span><span class="o">=</span><span class="nv">$1</span>
</span><span class='line'><span class="nv">IP</span><span class="o">=</span><span class="nv">$2</span>
</span><span class='line'><span class="nv">PORT</span><span class="o">=</span><span class="nv">$3</span>
</span><span class='line'>
</span><span class='line'><span class="c"># upload key for root</span>
</span><span class='line'>ssh-copy-id -i ~/.ssh/id_rsa.pub root@<span class="nv">$IP</span>
</span><span class='line'>
</span><span class='line'><span class="c"># install chef</span>
</span><span class='line'><span class="nb">cd </span>config/chef <span class="o">&amp;&amp;</span> knife solo prepare root@<span class="nv">$IP</span>
</span><span class='line'>
</span><span class='line'><span class="c"># execute the run list</span>
</span><span class='line'>knife solo cook root@<span class="nv">$IP</span>
</span><span class='line'>
</span><span class='line'><span class="c"># upload key for user</span>
</span><span class='line'>ssh-copy-id -i ~/.ssh/id_rsa.pub -p <span class="nv">$PORT</span> <span class="nv">$USER</span>@<span class="nv">$IP</span>
</span><span class='line'>
</span><span class='line'><span class="c"># upload app</span>
</span><span class='line'><span class="nb">cd</span> ../.. <span class="o">&amp;&amp;</span> cap production setup:all
</span><span class='line'>
</span><span class='line'><span class="c"># restart nginx</span>
</span><span class='line'>ssh -p <span class="nv">$PORT</span> -t <span class="nv">$USER</span>@<span class="nv">$IP</span> <span class="s1">&#39;sudo service nginx restart&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first line uploads your public key to the node (server) you&rsquo;re about to provision. (If you don&rsquo;t do this, Chef Solo will ask you to type your password for every command it runs.) The next line installs Chef on our node using the <code>knife solo prepare</code> command, while the line after that uses <code>knife solo cook</code> to execute our run list. When it finishes, our node will be fully provisioned.</p>

<p>The remaining three lines run the Capistrano recipes to deploy my app (if you&rsquo;re not using Capistrano for deployment, feel free to remove them). The third to last line uploads the public key for the Chef-created user (so Capistrano can log in without a password), the next line runs the Capistrano recipes, and the last line restarts Nginx (so the uploaded Rails app is loaded in).</p>

<p>Once you run <code>chmod +x setup_vps.sh</code> to make the file an executable, you can <code>cd</code> into the directory containing the script and run it with</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>./setup_vps.sh bob 123.123.123.123 12345
</span></code></pre></td></tr></table></div></figure>


<p>where <code>bob</code> is the Chef-created user, <code>123.123.123.123</code> is the IP address of the node you just provisioned, and <code>12345</code> is its port. When the script finishes executing, you&rsquo;ll have a fully provisioned server running your Rails app.</p>

<h1>Capistrano Code</h1>

<p>In the interest of completeness, here&rsquo;s the Capistrano code I use to deploy my app. First up is my <code>setup.rake</code> file containing the <code>all</code> task that I&rsquo;m referencing in <code>setup_vps.sh</code>:</p>

<figure class='code'><figcaption><span>setup.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:setup</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Runs all tasks.&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">all</span><span class="p">:</span> <span class="o">[</span><span class="ss">:deploy</span><span class="p">,</span> <span class="ss">:seed_postgres</span><span class="p">,</span> <span class="ss">:seed_redis</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Seed the main database.&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:seed_postgres</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">within</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">with</span> <span class="n">rails_env</span><span class="p">:</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">execute</span> <span class="ss">:rake</span><span class="p">,</span> <span class="s2">&quot;db:seed&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s1">&#39;Seed the redis database (search suggestions)&#39;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:seed_redis</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">within</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">with</span> <span class="n">rails_env</span><span class="p">:</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">execute</span> <span class="ss">:rake</span><span class="p">,</span> <span class="s2">&quot;search_suggestions:index&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">after</span> <span class="s2">&quot;deploy:published&quot;</span><span class="p">,</span> <span class="s2">&quot;deploy:start&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And here&rsquo;s my <code>deploy.rake</code> file containing the <code>start</code> task that I&rsquo;m calling in <code>setup.rake</code>:</p>

<figure class='code'><figcaption><span>deploy.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Makes sure local git is in sync with remote.&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:check_revision</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">unless</span> <span class="sb">`git rev-parse HEAD`</span> <span class="o">==</span> <span class="sb">`git rev-parse origin/master`</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;WARNING: HEAD is not the same as origin/master&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Run `git push` to sync changes.&quot;</span>
</span><span class='line'>      <span class="nb">exit</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="sx">%w[start stop restart]</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">command</span><span class="o">|</span>
</span><span class='line'>    <span class="n">desc</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">command</span><span class="si">}</span><span class="s2"> Unicorn server.&quot;</span>
</span><span class='line'>    <span class="n">task</span> <span class="n">command</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">execute</span> <span class="s2">&quot;/etc/init.d/unicorn_</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:application</span><span class="p">)</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">command</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span> <span class="ss">:deploy</span><span class="p">,</span> <span class="s2">&quot;deploy:check_revision&quot;</span>
</span><span class='line'>  <span class="n">after</span> <span class="ss">:deploy</span><span class="p">,</span> <span class="s2">&quot;deploy:restart&quot;</span>
</span><span class='line'>  <span class="n">after</span> <span class="ss">:rollback</span><span class="p">,</span> <span class="s2">&quot;deploy:restart&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Below are my <code>deploy.rb</code> and <code>production.rb</code> files:</p>

<figure class='code'><figcaption><span>deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">lock</span> <span class="s1">&#39;3.2.1&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s1">&#39;phindee&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s1">&#39;git@github.com:vladigleba/phindee.git&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s2">&quot;/var/www/</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:application</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_user</span><span class="p">,</span> <span class="s2">&quot;bob&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:rbenv_type</span><span class="p">,</span> <span class="ss">:user</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rbenv_ruby</span><span class="p">,</span> <span class="s1">&#39;2.1.0&#39;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rbenv_prefix</span><span class="p">,</span> <span class="s2">&quot;RBENV_ROOT=</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:rbenv_path</span><span class="p">)</span><span class="si">}</span><span class="s2"> RBENV_VERSION=</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:rbenv_ruby</span><span class="p">)</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:rbenv_path</span><span class="p">)</span><span class="si">}</span><span class="s2">/bin/rbenv exec&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rbenv_map_bins</span><span class="p">,</span> <span class="sx">%w{rake gem bundle ruby rails}</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rbenv_roles</span><span class="p">,</span> <span class="ss">:all</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:linked_files</span><span class="p">,</span> <span class="sx">%w{config/database.yml config/application.yml}</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:linked_dirs</span><span class="p">,</span> <span class="sx">%w{bin log tmp/pids tmp/cache tmp/sockets vendor/bundle public/system}</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:keep_releases</span><span class="p">,</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:stage</span><span class="p">,</span> <span class="ss">:production</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rails_env</span><span class="p">,</span> <span class="ss">:production</span>
</span><span class='line'>
</span><span class='line'><span class="n">server</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:deploy_user</span><span class="p">)</span><span class="si">}</span><span class="s2">@123.123.123.123:12345&quot;</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="sx">%w{web app db}</span><span class="p">,</span> <span class="ss">primary</span><span class="p">:</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>I won&rsquo;t be explaining the Capistrano code because that&rsquo;s already covered in parts <a href="http://vladigleba.github.io/blog/2014/04/04/deploying-rails-apps-part-5-configuring-capistrano/">5</a> and <a href="http://vladigleba.github.io/blog/2014/04/10/deploying-rails-apps-part-6-writing-capistrano-tasks/">6</a> of my <a href="http://vladigleba.github.io/blog/topics/deployment-series/">&ldquo;Deploying Rails Apps&rdquo; series</a>, so be sure to check that out if you&rsquo;re new to Capistrano or just need some clarification. (It&rsquo;s worth noting that Chef actually has a <a href="http://docs.getchef.com/chef/resources.html#deploy"><code>deploy</code></a> resource that&rsquo;s modeled after Capistrano, but I didn&rsquo;t have time to learn how to implement my existing Capistrano recipes with it. If you&rsquo;re interested though, feel free to give it a try.)</p>

<p>I hope this gave you a taste of what Chef can do, although I only scratched the service of what&rsquo;s possible. Chef is a complex tool that can be used to manage entire server infrastructures, and although it might be overkill for managing a single server, it&rsquo;s still a useful tool to learn if you spend a significant amount of time doing server provisioning. It&rsquo;s definitely an improvement over shell scripts because it keeps your code readable and organized. Ultimately though, each tool has its place, and it&rsquo;s up to you to decide what best fits your particular need.</p>

<p>Stay hungry. Stay foolish.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Provisioning a Rails Server Using Chef, Part 2: Writing the Recipes]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2014/08/12/provisioning-a-rails-server-using-chef-part-2-writing-the-recipes/"/>
    <updated>2014-08-12T09:29:00-07:00</updated>
    <id>http://vladigleba.github.io/blog/2014/08/12/provisioning-a-rails-server-using-chef-part-2-writing-the-recipes</id>
    <content type="html"><![CDATA[<p>In <a href="http://vladigleba.github.io/blog/2014/07/28/provisioning-a-rails-server-using-chef-part-1-introduction-to-chef-solo/">part 1</a>, we learned about Chef Solo and used it to create a standard Chef directory structure, along with our own cookbook. Now it&rsquo;s time to start writing the recipes we will run to provision our Rails server and install Node.js, PostgreSQL, rbenv, Ruby, Redis, and Nginx.</p>

<!-- more -->


<h1>Defining Default Values</h1>

<p>The first thing we&rsquo;ll do is define some default values for our recipes. Go ahead and create a new file called <code>default.rb</code> inside the <code>/attributes</code> directory of the cookbook you created in part 1, and add the following code into it:</p>

<figure class='code'><figcaption><span>default.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">default</span><span class="o">[</span><span class="s1">&#39;app&#39;</span><span class="o">]</span>               <span class="o">=</span> <span class="s1">&#39;phindee&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="s1">&#39;nodejs&#39;</span><span class="o">][</span><span class="s1">&#39;dir&#39;</span><span class="o">]</span>     <span class="o">=</span> <span class="s1">&#39;/usr/local&#39;</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="s1">&#39;nodejs&#39;</span><span class="o">][</span><span class="s1">&#39;version&#39;</span><span class="o">]</span> <span class="o">=</span> <span class="s1">&#39;0.10.29&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="s1">&#39;ruby&#39;</span><span class="o">][</span><span class="s1">&#39;version&#39;</span><span class="o">]</span>   <span class="o">=</span> <span class="s1">&#39;2.1.2&#39;</span>
</span><span class='line'><span class="n">default</span><span class="o">[</span><span class="s1">&#39;redis&#39;</span><span class="o">][</span><span class="s1">&#39;version&#39;</span><span class="o">]</span>  <span class="o">=</span> <span class="s1">&#39;2.8.13&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>These are called attributes, and they&rsquo;re just variables that are later used in recipes. We&rsquo;re defining simple things here like the app name, the directory where Node.js will be installed, and the versions of the software we&rsquo;ll be installing. Storing such things in a single file makes it easy to modify them later on.</p>

<p>This file is great for storing attributes that will be shared with more than one server, but attributes that are server-specific, like ports, usernames, and passwords, will be stored in another JSON file outside our cookbook. If you followed part 1, your cookbook is stored in your app&rsquo;s <code>/config/chef/site-cookbooks</code> directory, but this JSON file will reside inside the <code>/config/chef/nodes</code> directory, and it&rsquo;ll be named after the IP address of the server you&rsquo;ll be provisioning (for example, <code>123.123.123.123.json</code>).</p>

<p>Go ahead and create the file now, and add the following code into it (be sure to replace the attributes with your own):</p>

<figure class='code'><figcaption><span>123.123.123.123.json</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;group&quot;</span><span class="p">:</span> <span class="s2">&quot;foobars&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="nt">&quot;port&quot;</span><span class="p">:</span> <span class="mi">12345</span><span class="p">,</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;bob&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;password&quot;</span><span class="p">:</span> <span class="s2">&quot;password-shadow-hash&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>
</span><span class='line'>  <span class="nt">&quot;db&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;root_password&quot;</span><span class="p">:</span> <span class="s2">&quot;secret&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;user&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nt">&quot;name&quot;</span><span class="p">:</span> <span class="s2">&quot;bob&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="nt">&quot;password&quot;</span><span class="p">:</span> <span class="s2">&quot;secret&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Due to the sensitive nature of this file, it&rsquo;s best to add it to your <code>.gitignore</code> file so it doesn&rsquo;t get uploaded to GitHub. Here&rsquo;s the line you&rsquo;ll need to add:</p>

<figure class='code'><figcaption><span>.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>/config/chef/nodes/123.123.123.123.json
</span></code></pre></td></tr></table></div></figure>


<p>One thing I&rsquo;d like to point out is Chef doesn&rsquo;t use plain text passwords when creating new users. Instead, it uses a <a href="http://en.wikipedia.org/wiki/Passwd#Shadow_file">shadow hash</a> of the plain text password, so the <code>user.password</code> attribute must be a shadow hash. If you have the <code>openssl</code> command installed on your local computer, you can create a password shadow hash by running the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>openssl passwd -1 <span class="s2">&quot;theplaintextpassword&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This just uses the <code>passwd</code> command provided by <code>openssl</code> to create an MD5-based hash of the password (specified by the <code>-1</code> flag). You can then copy and paste the string that the command returns into the JSON file above. Once the user is set up on our node, you&rsquo;ll still use the plain text password to log in, just like always. I wasn&rsquo;t able to get shadow hash passwords working with PostgreSQL though, which is why I&rsquo;m just using the plain text password there, but feel free to leave a comment if you know how to make it work.</p>

<p>One last thing I want to mention is that if you have the same attribute defined in both <code>default.rb</code> and the JSON file, the latter will always override the former.</p>

<h1>Writing Recipes</h1>

<p>Now that the attributes are defined, we&rsquo;re ready to start writing the recipes themselves. These recipes do the exact same server setup as the one covered in the <a href="http://vladigleba.github.io/blog/topics/deployment-series/">&ldquo;Deploying Rails Apps&rdquo; series</a>, so I won&rsquo;t be explaining the whys behind the things I do here since that&rsquo;s already covered in the series itself. If you&rsquo;ve never provisioned a server from scratch before, it&rsquo;s best to read that series first before continuing.</p>

<h2>The First One</h2>

<p>Our first recipe will install various packages and set the correct time zone. Create a new file called <code>default.rb</code> inside the <code>/recipes</code> directory of your cookbook, and add the following code into it:</p>

<figure class='code'><figcaption><span>default.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># update package database</span>
</span><span class='line'><span class="n">execute</span> <span class="s2">&quot;apt-get update&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># install packages</span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;telnet&quot;</span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;postfix&quot;</span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;curl&quot;</span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;git-core&quot;</span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;zlib1g-dev&quot;</span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;libssl-dev&quot;</span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;libreadline-dev&quot;</span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;libyaml-dev&quot;</span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;libsqlite3-dev&quot;</span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;sqlite3&quot;</span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;libxml2-dev&quot;</span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;libxslt1-dev&quot;</span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;libpq-dev&quot;</span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;build-essential&quot;</span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;tree&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># set timezone</span>
</span><span class='line'><span class="n">bash</span> <span class="s2">&quot;set timezone&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">code</span> <span class="o">&lt;&lt;-</span><span class="no">EOH</span>
</span><span class='line'><span class="sh">    echo &#39;US/Pacific-New&#39; &gt; /etc/timezone</span>
</span><span class='line'><span class="sh">    dpkg-reconfigure -f noninteractive tzdata</span>
</span><span class='line'><span class="no">  EOH</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="s2">&quot;date | grep -q &#39;PDT\|PST&#39;&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Chef uses a domain-specific language (DSL) for writing recipes, and the code above is what it looks like. A recipe is made up of resources, and a resource is simply an abstraction of some shell code you would run to provision your server that Chef already implemented for you and wrapped it in a resource. Chef provides most of the resources you will need, but you can also write your own.</p>

<p>In the file above, we&rsquo;re using three resources: <a href="http://docs.getchef.com/chef/resources.html#execute"><code>execute</code></a>, <a href="http://docs.getchef.com/chef/resources.html#package"><code>package</code></a>, and <a href="http://docs.getchef.com/chef/resources.html#bash"><code>bash</code></a>. The <code>execute</code> resource executes a command, the <code>package</code> resource manages packages, and the <code>bash</code> resource executes scripts using the Bash interpreter. So in the code above, we&rsquo;re first using <code>execute</code> to run <code>apt-get update</code> to fetch the latest updates for the packages on our node. (A server is known as a node in Chef terminology.) Next, we use <code>package</code> to install the various packages our node will need, and finally, we use <code>bash</code> to execute two lines of code that will set the correct time zone (be sure to modify the <code>echo</code> command so it sets your own time zone).</p>

<p>Each resource has various attributes that you can optionally specify inside a <code>do...end</code> block. For example, with the <code>bash</code> resource, we&rsquo;re using the <code>code</code> attribute to specify the code that will run to set the timezone (see the <a href="http://docs.getchef.com/chef/resources.html#bash">documentation</a> to learn about the other attributes it supports). This resource is similar to the <code>execute</code> resource, which also runs commands, but <code>execute</code> is used to run a single command, while <code>bash</code>&rsquo;s <code>code</code> attribute is used to run more than one.</p>

<p>We could&rsquo;ve specified attributes for the <code>execute</code> and <code>package</code> resources as well, but there is no need in this case. For example, this</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">execute</span> <span class="s2">&quot;update packages&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">command</span> <span class="s2">&quot;apt-get update&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>is equivalent to <code>execute "apt-get update"</code>. The only difference between the two is the longer version gives the resource block a name&mdash;&ldquo;update packages&rdquo; in this case, but it could&rsquo;ve been anything&mdash;while the shorter version just specifies the command to execute. When the <code>command</code> attribute is missing, the resource name is the command that is executed, and that&rsquo;s why the shorter version works just as well.</p>

<p>One last interesting thing about the <code>bash</code> resource is the <code>not_if</code> line. This is called a <a href="http://docs.getchef.com/chef/resources.html#guards">guard attribute</a>, and it can be applied to any resource, not just <code>bash</code>. It&rsquo;s used to prevent a resource from running if certain conditions are met. In this case, I&rsquo;m specifying a command that will output the current date and search for either the word &ldquo;PDT&rdquo; (Pacific Daylight Time) or &ldquo;PST&rdquo; (Pacific Standard Time) to see if the correct time zone is set (be sure to modify this for your own time zone). The guard will be applied and the resource won&rsquo;t run if the command returns <code>0</code>, which is the case with <code>grep</code> when it finds a match.</p>

<h2>Working with Users</h2>

<p>This next recipe will create a new user and group. Add a new file called <code>users.rb</code> to the directory containing the previous recipe, and fill it with the following:</p>

<figure class='code'><figcaption><span>users.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># create group</span>
</span><span class='line'><span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;group&#39;</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># create user and add to group</span>
</span><span class='line'><span class="n">user</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gid</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;group&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">home</span> <span class="s2">&quot;/home/</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">password</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;password&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">shell</span> <span class="s2">&quot;/bin/bash&quot;</span>
</span><span class='line'>  <span class="n">supports</span> <span class="n">manage_home</span><span class="p">:</span> <span class="kp">true</span> <span class="c1"># need for /home creation</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># give group sudo privileges</span>
</span><span class='line'><span class="n">bash</span> <span class="s2">&quot;give group sudo privileges&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">code</span> <span class="o">&lt;&lt;-</span><span class="no">EOH</span>
</span><span class='line'><span class="sh">    sed -i &#39;/%#{node[&#39;group&#39;]}.*/d&#39; /etc/sudoers</span>
</span><span class='line'><span class="sh">    echo &#39;%#{node[&#39;group&#39;]} ALL=(ALL) ALL&#39; &gt;&gt; /etc/sudoers</span>
</span><span class='line'><span class="no">  EOH</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="s2">&quot;grep -xq &#39;%</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;group&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2"> ALL=(ALL) ALL&#39; /etc/sudoers&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here we&rsquo;re first using the <a href="http://docs.getchef.com/chef/resources.html#group"><code>group</code> resource</a> to create a new group whose name will come from the <code>group</code> attribute defined in the JSON file we created earlier. Note the syntax to access that attribute; it stays the same whether you&rsquo;re accessing attributes from the JSON file or the <code>default.rb</code> file.</p>

<p>Next, we use the <a href="http://docs.getchef.com/chef/resources.html#user"><code>user</code> resource</a> to create a new user whose name is also defined in the JSON file. But now it gets interesting because there are a handful of additional attributes we&rsquo;re using:</p>

<ul>
<li><code>gid</code> assigns this user to the group we created right before</li>
<li><code>home</code> specifies the location of the user&rsquo;s home directory</li>
<li><code>password</code> accepts a shadow hash of the users password</li>
<li><code>shell</code> specifies the login shell that the user will log in with (user won&rsquo;t have login access without this attribute)</li>
<li><code>supports</code> sets <code>manage_home</code> to <code>true</code> to tell Chef to create the home directory when the user is created</li>
</ul>


<p>The last <code>bash</code> resource adds a line to the <code>sudoers</code> file that gives the group <code>sudo</code> privileges, but it does this only if the line isn&rsquo;t already there.</p>

<h1>Restricting SSH Access</h1>

<p>The next thing on our list is restricting SSH access to our node. Add the following code into a new file called <code>ssh.rb</code>:</p>

<figure class='code'><figcaption><span>ssh.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># tell chef about ssh service</span>
</span><span class='line'><span class="n">service</span> <span class="s1">&#39;ssh&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">provider</span> <span class="ss">Chef</span><span class="p">:</span><span class="ss">:Provider</span><span class="o">::</span><span class="ss">Service</span><span class="p">:</span><span class="ss">:Upstart</span>
</span><span class='line'>  <span class="n">supports</span> <span class="o">[</span><span class="ss">:status</span><span class="p">,</span> <span class="ss">:restart</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># modify port</span>
</span><span class='line'><span class="n">bash</span> <span class="s2">&quot;modify port&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">code</span> <span class="o">&lt;&lt;-</span><span class="no">EOH</span>
</span><span class='line'><span class="sh">    sed -i &#39;/Port.*/d&#39; /etc/ssh/sshd_config</span>
</span><span class='line'><span class="sh">    echo &#39;Port #{node[&#39;port&#39;]}&#39; &gt;&gt; /etc/ssh/sshd_config</span>
</span><span class='line'><span class="no">  EOH</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="s2">&quot;service[ssh]&quot;</span><span class="p">,</span> <span class="ss">:delayed</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="s2">&quot;grep -xq &#39;Port </span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;port&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&#39; /etc/ssh/sshd_config&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># disable root login</span>
</span><span class='line'><span class="n">bash</span> <span class="s2">&quot;disable root login&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">code</span> <span class="o">&lt;&lt;-</span><span class="no">EOH</span>
</span><span class='line'><span class="sh">    sed -i &#39;/PermitRootLogin.*/d&#39; /etc/ssh/sshd_config</span>
</span><span class='line'><span class="sh">    echo &#39;PermitRootLogin no&#39; &gt;&gt; /etc/ssh/sshd_config</span>
</span><span class='line'><span class="no">  EOH</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="s2">&quot;service[ssh]&quot;</span><span class="p">,</span> <span class="ss">:delayed</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="s2">&quot;grep -xq &#39;PermitRootLogin no&#39; /etc/ssh/sshd_config&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># restrict login only to created user</span>
</span><span class='line'><span class="n">bash</span> <span class="s2">&quot;restrict login only to created user&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">code</span> <span class="o">&lt;&lt;-</span><span class="no">EOH</span>
</span><span class='line'><span class="sh">    sed -i &#39;/AllowUsers.*/d&#39; /etc/ssh/sshd_config</span>
</span><span class='line'><span class="sh">    echo &#39;AllowUsers #{node[&#39;user&#39;][&#39;name&#39;]}&#39; &gt;&gt; /etc/ssh/sshd_config</span>
</span><span class='line'><span class="no">  EOH</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="s2">&quot;service[ssh]&quot;</span><span class="p">,</span> <span class="ss">:delayed</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="s2">&quot;grep -xq &#39;AllowUsers </span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&#39; /etc/ssh/sshd_config&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># disable dns</span>
</span><span class='line'><span class="n">bash</span> <span class="s2">&quot;disable dns&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">code</span> <span class="o">&lt;&lt;-</span><span class="no">EOH</span>
</span><span class='line'><span class="sh">    sed -i &#39;/UseDNS.*/d&#39; /etc/ssh/sshd_config</span>
</span><span class='line'><span class="sh">    echo &#39;UseDNS no&#39; &gt;&gt; /etc/ssh/sshd_config</span>
</span><span class='line'><span class="no">  EOH</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="s2">&quot;service[ssh]&quot;</span><span class="p">,</span> <span class="ss">:delayed</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="s2">&quot;grep -xq &#39;UseDNS no&#39; /etc/ssh/sshd_config&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Chef has a <a href="http://docs.getchef.com/chef/resources.html#service"><code>service</code> resource</a> designed for managing services like SSH. We tell it to manage SSH by specifying &ldquo;ssh&rdquo; as the resource name, and since we don&rsquo;t have a <code>service_name</code> attribute listed, Chef automatically assumes that the resource name is also the name of the service we want to manage.</p>

<p>We then use the <code>provider</code> attribute to tell Chef to use <a href="https://en.wikipedia.org/wiki/Upstart">upstart</a> to manage the service. This is necessary whenever there are two or more ways available for managing a service, which is the case with SSH on the node I&rsquo;m running. My node has an upstart job (located in <code>/etc/init</code>) and a traditional init script (located in <code>/etc/init.d</code>) for managing SSH, and I decided to go with upstart since it&rsquo;s superior, but either will work for our purposes. If there is only one service provider available, Chef will detect it automatically, and there is no need for the <code>provider</code> attribute.</p>

<p>By default, Chef inspects the process table to see if a service is running, but it&rsquo;s also possible to use the <code>service ssh status</code> command (which is more reliable) to do the same thing. That&rsquo;s why we use the <code>supports</code> attribute to tell Chef to use the <code>status</code> command instead. And while we&rsquo;re at it, we also give Chef permission to use the <code>restart</code> command to restart SSH.</p>

<p>Once the service is defined, we use the <code>bash</code> resource to modify the SSH port, disable <code>root</code> login, restrict login access just to our created user, and disable DNS lookup. Each <code>bash</code> block also uses the <a href="http://docs.getchef.com/chef/resources.html#notifications"><code>notifies</code> attribute</a> to tell the SSH <code>service</code> resource we just defined to restart itself <em>if</em> the code inside the <code>code</code> attribute actually runs. But we use the <code>delayed</code> timer to tell Chef to queue up the notification and run in at the very end. The other option is to use the <code>immediate</code> timer to do the restart immediately, but we don&rsquo;t want to restart the service four separate times when we can just wait till the end and do it just once.</p>

<p>And just like in the two previous recipes, we use the <code>not_if</code> guard to make  sure the <code>bash</code> resources don&rsquo;t run if the necessary changes are already made.</p>

<h2>Installing Node.js</h2>

<p>Next order of business is installing Node.js. Add the following code into a new file called <code>nodejs.rb</code>:</p>

<figure class='code'><figcaption><span>nodejs.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># variables for node.js</span>
</span><span class='line'><span class="n">arch</span> <span class="o">=</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;kernel&#39;</span><span class="o">][</span><span class="s1">&#39;machine&#39;</span><span class="o">]</span> <span class="o">=~</span> <span class="sr">/x86_64/</span> <span class="p">?</span> <span class="s2">&quot;x64&quot;</span> <span class="p">:</span> <span class="s2">&quot;x86&quot;</span>
</span><span class='line'><span class="n">package_stub</span> <span class="o">=</span> <span class="s2">&quot;node-v</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;nodejs&#39;</span><span class="o">][</span><span class="s1">&#39;version&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">-linux-</span><span class="si">#{</span><span class="n">arch</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">nodejs_tar</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">package_stub</span><span class="si">}</span><span class="s2">.tar.gz&quot;</span>
</span><span class='line'><span class="n">nodejs_url</span> <span class="o">=</span> <span class="s2">&quot;http://nodejs.org/dist/v</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;nodejs&#39;</span><span class="o">][</span><span class="s1">&#39;version&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/</span><span class="si">#{</span><span class="n">nodejs_tar</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">executable</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;nodejs&#39;</span><span class="o">][</span><span class="s1">&#39;dir&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/bin/node&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># download tar file</span>
</span><span class='line'><span class="n">remote_file</span> <span class="s2">&quot;/usr/local/src/</span><span class="si">#{</span><span class="n">nodejs_tar</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="n">nodejs_url</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:create_if_missing</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># install node.js from binaries</span>
</span><span class='line'><span class="n">execute</span> <span class="s2">&quot;install node.js&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">command</span> <span class="o">&lt;&lt;-</span><span class="no">EOF</span>
</span><span class='line'><span class="sh">    tar xf /usr/local/src/#{nodejs_tar} \</span>
</span><span class='line'><span class="sh">    --strip-components=1 --no-same-owner \</span>
</span><span class='line'><span class="sh">    -C #{node[&#39;nodejs&#39;][&#39;dir&#39;]} \</span>
</span><span class='line'><span class="sh">    #{package_stub}/bin \</span>
</span><span class='line'><span class="sh">    #{package_stub}/lib \</span>
</span><span class='line'><span class="sh">    #{package_stub}/share</span>
</span><span class='line'><span class="no">  EOF</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="p">{</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">executable</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="sb">`</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;nodejs&#39;</span><span class="o">][</span><span class="s1">&#39;dir&#39;</span><span class="o">]</span><span class="si">}</span><span class="sb">/bin/node --version`</span><span class="o">.</span><span class="n">chomp</span> <span class="o">==</span> <span class="s2">&quot;v</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;nodejs&#39;</span><span class="o">][</span><span class="s1">&#39;version&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The very first line makes use of <a href="http://docs.getchef.com/ohai.html">Ohai</a>, a tool Chef uses to detect attributes on a node and make them available for use in recipes. We&rsquo;re extracting the type of architecture our node is running on to make sure we download the correct tar file for installing Node.js.</p>

<p>We download the tar file using a resource called <a href="http://docs.getchef.com/chef/resources.html#remote-file"><code>remote_file</code></a>, and we then use the <code>source</code> attribute to specify the source of the tar file, <code>mode</code> to specify its mode, and <code>action</code> to tell Chef to create the file only if it&rsquo;s not already there.</p>

<p>One interesting thing about the <code>action</code> attribute is it&rsquo;s actually present in each resource we write, whether we explicitly assign one or not. Not every resource has the same actions though. <code>remote_file</code>, for example, has <code>create</code>, <code>create_if_missing</code>, <code>delete</code>, and <code>touch</code> actions, while <code>bash</code> only has <code>run</code> and <code>nothing</code> actions. But every resource is assigned a default action, if we don&rsquo;t assign one ourselves (the resource&rsquo;s documentation will specify which action is assigned by default).</p>

<p>After the file is downloaded, we use <code>execute</code> to do the install. One interesting thing about this resource is the <code>not_if</code> guard, which executes some Ruby code, whereas the previous one only executed shell commands. Guards  can run a shell command specified inside a string, or Ruby code specified inside a block. Ruby code must return either <code>true</code> or <code>false</code>, while shell commands can return any value, but the guard runs only if a zero is returned (see the <a href="http://docs.getchef.com/chef/resources.html#guards">documentation</a>).</p>

<p>So in the code above, we&rsquo;re first executing some Ruby code to determine if a file exists, and then we execute a shell command to output the Node.js version we installed, but this output is processed by Ruby and gets compared with the version we&rsquo;ve specified in our attributes file. As a result, Node.js won&rsquo;t be installed if there is a Node.js executable already present on the node that returns the correct version number. (Note that shell commands will be processed by Ruby only if they&rsquo;re specified using backquotes).</p>

<h2>Installing PostgreSQL</h2>

<p>Our next recipe will install PostgreSQL. Create a new file called <code>postgres.rb</code>, and add the following code into it:</p>

<figure class='code'><figcaption><span>postgres.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">package</span> <span class="s2">&quot;postgresql&quot;</span>
</span><span class='line'><span class="n">package</span> <span class="s2">&quot;postgresql-contrib&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># change postgres password</span>
</span><span class='line'><span class="n">execute</span> <span class="s2">&quot;change postgres password&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">user</span> <span class="s2">&quot;postgres&quot;</span>
</span><span class='line'>  <span class="n">command</span> <span class="s2">&quot;psql -c </span><span class="se">\&quot;</span><span class="s2">alter user postgres with password &#39;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;db&#39;</span><span class="o">][</span><span class="s1">&#39;root_password&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&#39;;</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># create new postgres user</span>
</span><span class='line'><span class="n">execute</span> <span class="s2">&quot;create new postgres user&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">user</span> <span class="s2">&quot;postgres&quot;</span>
</span><span class='line'>  <span class="n">command</span> <span class="s2">&quot;psql -c </span><span class="se">\&quot;</span><span class="s2">create user </span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;db&#39;</span><span class="o">][</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2"> with password &#39;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;db&#39;</span><span class="o">][</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;password&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&#39;;</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="p">{</span> <span class="sb">`sudo -u postgres psql -tAc </span><span class="se">\&quot;</span><span class="sb">SELECT * FROM pg_roles WHERE rolname=&#39;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;db&#39;</span><span class="o">][</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="si">}</span><span class="sb">&#39;</span><span class="se">\&quot;</span><span class="sb"> | wc -l`</span><span class="o">.</span><span class="n">chomp</span> <span class="o">==</span> <span class="s2">&quot;1&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># create new postgres database</span>
</span><span class='line'><span class="n">execute</span> <span class="s2">&quot;create new postgres database&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">user</span> <span class="s2">&quot;postgres&quot;</span>
</span><span class='line'>  <span class="n">command</span> <span class="s2">&quot;psql -c </span><span class="se">\&quot;</span><span class="s2">create database </span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;app&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2"> owner </span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;db&#39;</span><span class="o">][</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">;</span><span class="se">\&quot;</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="p">{</span> <span class="sb">`sudo -u postgres psql -tAc </span><span class="se">\&quot;</span><span class="sb">SELECT * FROM pg_database WHERE datname=&#39;</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;app&#39;</span><span class="o">]</span><span class="si">}</span><span class="sb">&#39;</span><span class="se">\&quot;</span><span class="sb"> | wc -l`</span><span class="o">.</span><span class="n">chomp</span> <span class="o">==</span> <span class="s2">&quot;1&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This recipe is fairly straightforward. We install Postgres using the <code>package</code> resource and use <code>execute</code> to modify the <code>postgres</code> user&rsquo;s password. We also create new user, along with a new database, which is assigned to the newly created user. (Note that we&rsquo;re using the <code>user</code> attribute to execute these commands as the <code>postgres</code> user, which is necessary because otherwise Postgres would run these commands as <code>root</code>, and such a user does not exist in Postgres by default.)</p>

<h2>Installing rbenv and Ruby</h2>

<p>It&rsquo;s now time to install rbenv and Ruby. Add the following code into a new file called <code>rbenv.rb</code>:</p>

<figure class='code'><figcaption><span>rbenv.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># create .bash_profile file</span>
</span><span class='line'><span class="n">cookbook_file</span> <span class="s2">&quot;/home/</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/.bash_profile&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;bash_profile&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'>  <span class="n">owner</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;group&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># install rbenv</span>
</span><span class='line'><span class="n">bash</span> <span class="s1">&#39;install rbenv&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">user</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">cwd</span> <span class="s2">&quot;/home/</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">code</span> <span class="o">&lt;&lt;-</span><span class="no">EOH</span>
</span><span class='line'><span class="sh">    export HOME=/home/#{node[&#39;user&#39;][&#39;name&#39;]}</span>
</span><span class='line'><span class="sh">    curl -L https://raw.github.com/fesplugas/rbenv-installer/master/bin/rbenv-installer | bash</span>
</span><span class='line'><span class="no">  EOH</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="p">{</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="s2">&quot;/home/</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/.rbenv/bin/rbenv&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># install ruby</span>
</span><span class='line'><span class="n">version_path</span> <span class="o">=</span> <span class="s2">&quot;/home/</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/.rbenv/version&quot;</span>
</span><span class='line'><span class="n">bash</span> <span class="s1">&#39;install ruby&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">user</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">cwd</span> <span class="s2">&quot;/home/</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">code</span> <span class="o">&lt;&lt;-</span><span class="no">EOH</span>
</span><span class='line'><span class="sh">    export HOME=/home/#{node[&#39;user&#39;][&#39;name&#39;]}</span>
</span><span class='line'><span class="sh">    export RBENV_ROOT=&quot;${HOME}/.rbenv&quot;</span>
</span><span class='line'><span class="sh">    export PATH=&quot;${RBENV_ROOT}/bin:${PATH}&quot;</span>
</span><span class='line'><span class="sh">    rbenv init -</span>
</span><span class='line'>
</span><span class='line'><span class="sh">    rbenv install #{node[&#39;ruby&#39;][&#39;version&#39;]}</span>
</span><span class='line'><span class="sh">    rbenv global #{node[&#39;ruby&#39;][&#39;version&#39;]}</span>
</span><span class='line'><span class="sh">    echo &#39;gem: -–no-ri -–no-rdoc&#39; &gt; .gemrc</span>
</span><span class='line'><span class="sh">    .rbenv/bin/rbenv exec gem install bundler</span>
</span><span class='line'><span class="sh">    rbenv rehash</span>
</span><span class='line'><span class="no">  EOH</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="p">{</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">version_path</span><span class="p">)</span> <span class="o">&amp;&amp;</span> <span class="sb">`cat </span><span class="si">#{</span><span class="n">version_path</span><span class="si">}</span><span class="sb">`</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">split</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">==</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;ruby&#39;</span><span class="o">][</span><span class="s1">&#39;version&#39;</span><span class="o">]</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re using a new resource here called <a href="http://docs.getchef.com/chef/resources.html#cookbook-file"><code>cookbook_file</code></a>, which takes a file in our recipe and copies it to a specific location on our node. The file were creating is called <code>bash_profile</code>, and it contains some code that allows rbenv to initialize itself properly (store it in your cookbook&rsquo;s <code>/files/default</code> directory):</p>

<figure class='code'><figcaption><span>bash_profile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">export </span><span class="nv">RBENV_ROOT</span><span class="o">=</span><span class="s2">&quot;${HOME}/.rbenv&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="k">if</span> <span class="o">[</span> -d <span class="s2">&quot;${RBENV_ROOT}&quot;</span> <span class="o">]</span>; <span class="k">then</span>
</span><span class='line'><span class="k">  </span><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;${RBENV_ROOT}/bin:${PATH}&quot;</span>
</span><span class='line'>  <span class="nb">eval</span> <span class="s2">&quot;$(rbenv init -)&quot;</span>
</span><span class='line'><span class="k">fi</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you go back to the <code>cookbook_file</code> resource, you&rsquo;ll see that we&rsquo;re copying the file to the user&rsquo;s home directory (since we did not specify a <code>path</code> attribute, the resource&rsquo;s name is also the path to the location where it will be stored), and we&rsquo;re using the <code>mode</code>, <code>owner</code>, and <code>group</code> attributes to set the file&rsquo;s mode, owner, and group, respectively.</p>

<p>Afterwards, we&rsquo;re using <code>bash</code> to install rbenv. Because we&rsquo;re not doing a system-wide install, we run the rbnev installer under the user we created earlier, and we use the <code>cwd</code> attribute to run the install inside the user&rsquo;s home directory. Once that&rsquo;s done, the last <code>bash</code> block then uses rbenv to install Ruby itself.</p>

<h2>Installing Redis</h2>

<p>Next in line is Redis, so go ahead and create a new file called <code>redis.rb</code>:</p>

<figure class='code'><figcaption><span>redis.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">package</span> <span class="s2">&quot;tcl8.5&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># download redis</span>
</span><span class='line'><span class="n">remote_file</span> <span class="s2">&quot;/home/</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/redis-</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;redis&#39;</span><span class="o">][</span><span class="s1">&#39;version&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">.tar.gz&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;http://download.redis.io/releases/redis-</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;redis&#39;</span><span class="o">][</span><span class="s1">&#39;version&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">.tar.gz&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:create_if_missing</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># install redis</span>
</span><span class='line'><span class="n">bash</span> <span class="s1">&#39;install redis&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">cwd</span> <span class="s2">&quot;/home/</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="n">code</span> <span class="o">&lt;&lt;-</span><span class="no">EOH</span>
</span><span class='line'><span class="sh">    tar xzf redis-#{node[&#39;redis&#39;][&#39;version&#39;]}.tar.gz</span>
</span><span class='line'><span class="sh">    cd redis-#{node[&#39;redis&#39;][&#39;version&#39;]}</span>
</span><span class='line'><span class="sh">    make &amp;&amp; make install</span>
</span><span class='line'><span class="no">  EOH</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="p">{</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="s2">&quot;/usr/local/bin/redis-server&quot;</span><span class="p">)</span> <span class="o">&amp;&amp;</span>
</span><span class='line'>           <span class="sb">`redis-server --version`</span><span class="o">.</span><span class="n">chomp</span><span class="o">.</span><span class="n">split</span><span class="o">[</span><span class="mi">2</span><span class="o">]</span> <span class="o">==</span> <span class="s2">&quot;v=</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;redis&#39;</span><span class="o">][</span><span class="s1">&#39;version&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># install redis server</span>
</span><span class='line'><span class="n">execute</span> <span class="s2">&quot;curl -L https://gist.githubusercontent.com/vladigleba/28f4f6b4454947c5223e/raw | sh&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">cwd</span> <span class="s2">&quot;/home/</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/redis-</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;redis&#39;</span><span class="o">][</span><span class="s1">&#39;version&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/utils&quot;</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="s2">&quot;ls /etc/init.d | grep redis&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This recipe doesn&rsquo;t contain any new Chef concepts. It simply downloads Redis using the <code>remote_file</code> resource, installs it using the <code>bash</code> resource, and installs the Redis server with the <code>execute</code> resource.</p>

<h2>Installing Nginx</h2>

<p>The last thing left to install is Nginx, and here&rsquo;s the code that will go in a new <code>nginx.rb</code> file to do just that:</p>

<figure class='code'><figcaption><span>nginx.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">package</span> <span class="s2">&quot;nginx&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># remove default nginx config</span>
</span><span class='line'><span class="n">default_path</span> <span class="o">=</span> <span class="s2">&quot;/etc/nginx/sites-enabled/default&quot;</span>
</span><span class='line'><span class="n">execute</span> <span class="s2">&quot;rm -f </span><span class="si">#{</span><span class="n">default_path</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">only_if</span> <span class="p">{</span> <span class="no">File</span><span class="o">.</span><span class="n">exists?</span><span class="p">(</span><span class="n">default_path</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># start nginx</span>
</span><span class='line'><span class="n">service</span> <span class="s2">&quot;nginx&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">supports</span> <span class="o">[</span><span class="ss">:status</span><span class="p">,</span> <span class="ss">:restart</span><span class="o">]</span>
</span><span class='line'>  <span class="n">action</span> <span class="ss">:start</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># set custom nginx config</span>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;/etc/nginx/sites-enabled/</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;app&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;nginx.conf.erb&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0644</span>
</span><span class='line'>  <span class="n">owner</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;group&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">notifies</span> <span class="ss">:restart</span><span class="p">,</span> <span class="s2">&quot;service[nginx]&quot;</span><span class="p">,</span> <span class="ss">:delayed</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is only one new Chef concept here, and that&rsquo;s the <a href="http://docs.getchef.com/chef/resources.html#template"><code>template</code> resource</a>. It&rsquo;s similar to the <code>cookbook_file</code> resource in that it copies a file from a cookbook to a location on a node, but it also does much more than that; it allows you to modify the contents of the file by embedding Ruby code into it using ERB (Embedded Ruby) templates, just like you would if you wrote Ruby on Rails views in ERB. All the attributes that are accessible in your recipes are also accessible in template files, and when you combine this with the usual ERB features like conditional statements and blocks, you&rsquo;ll be able to customize your files in any way you want.</p>

<p>Templates are stored in your cookbook&rsquo;s <code>/templates</code> directory, so go ahead and create a new file there called <code>nginx.conf.erb</code> with the following code (note that the syntax for accessing attributes doesn&rsquo;t change):</p>

<figure class='code'><figcaption><span>nginx.conf.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">upstream unicorn {</span>
</span><span class='line'><span class="x">  server unix:/tmp/unicorn.</span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;app&#39;</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">.sock fail_timeout=0;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">server {</span>
</span><span class='line'><span class="x">  server_name www.</span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;app&#39;</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">.com;</span>
</span><span class='line'><span class="x">  return 301 $scheme://</span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;app&#39;</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">.com$request_uri;</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">server {</span>
</span><span class='line'><span class="x">  listen 80 default deferred;</span>
</span><span class='line'><span class="x">  server_name </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;app&#39;</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">.com;</span>
</span><span class='line'><span class="x">  root /var/www/</span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;app&#39;</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/current/public;</span>
</span><span class='line'>
</span><span class='line'><span class="x">  location ^~ /assets/ {</span>
</span><span class='line'><span class="x">    gzip_static on;</span>
</span><span class='line'><span class="x">    expires max;</span>
</span><span class='line'><span class="x">    add_header Cache-Control public;</span>
</span><span class='line'><span class="x">  }</span>
</span><span class='line'>
</span><span class='line'><span class="x">  try_files $uri/index.html $uri @unicorn;</span>
</span><span class='line'><span class="x">  location @unicorn {</span>
</span><span class='line'><span class="x">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span>
</span><span class='line'><span class="x">    proxy_set_header Host $http_host;</span>
</span><span class='line'><span class="x">    proxy_redirect off;</span>
</span><span class='line'><span class="x">    proxy_pass http://unicorn;</span>
</span><span class='line'><span class="x">  }</span>
</span><span class='line'>
</span><span class='line'><span class="x">  error_page 500 502 503 504 /500.html;</span>
</span><span class='line'><span class="x">  keepalive_timeout 5;</span>
</span><span class='line'><span class="x">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is the file we&rsquo;re referencing inside the <code>template</code> resource in <code>nginx.rb</code>. You&rsquo;ll notice the attributes we specify there are very similar to those specified in the <code>cookbook_file</code> resources we wrote earlier. But one thing that&rsquo;s different is we&rsquo;re also using the <code>notifies</code> attribute to call <code>restart</code> on the previously defined Nginx service, which allows the new configuration file to be loaded in.</p>

<h2>App Setup</h2>

<p>Our final recipe does some setup for our Rails application. Here&rsquo;s the code you&rsquo;ll need to add to a new file called <code>app.rb</code>:</p>

<figure class='code'><figcaption><span>app.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># create www directory</span>
</span><span class='line'><span class="n">directory</span> <span class="s2">&quot;/var/www&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">user</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;group&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0755</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># create shared directory structure for app</span>
</span><span class='line'><span class="n">path</span> <span class="o">=</span> <span class="s2">&quot;/var/www/</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;app&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">/shared/config&quot;</span>
</span><span class='line'><span class="n">execute</span> <span class="s2">&quot;mkdir -p </span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">user</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;group&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">creates</span> <span class="n">path</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># create database.yml file</span>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">path</span><span class="si">}</span><span class="s2">/database.yml&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;database.yml.erb&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0640</span>
</span><span class='line'>  <span class="n">owner</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;group&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># set unicorn config</span>
</span><span class='line'><span class="n">template</span> <span class="s2">&quot;/etc/init.d/unicorn_</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;app&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">source</span> <span class="s2">&quot;unicorn.sh.erb&quot;</span>
</span><span class='line'>  <span class="n">mode</span> <span class="mo">0755</span>
</span><span class='line'>  <span class="n">owner</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">group</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;group&#39;</span><span class="o">]</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># add init script link</span>
</span><span class='line'><span class="n">execute</span> <span class="s2">&quot;update-rc.d unicorn_</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;app&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2"> defaults&quot;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">not_if</span> <span class="s2">&quot;ls /etc/rc2.d | grep unicorn_</span><span class="si">#{</span><span class="n">node</span><span class="o">[</span><span class="s1">&#39;app&#39;</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The only new resource here is <a href="http://docs.getchef.com/chef/resources.html#directory"><code>directory</code></a>, which we use to create a new <code>/var/www</code> directory for our Rails app. One other new thing is the <code>creates</code> attribute inside the second <code>execute</code> resource, which is used to prevent the resource from creating the <code>/var/www/phindee/shared/config</code> directory if it already exists. If you&rsquo;re wondering why we&rsquo;re using <code>execute</code> and not <code>directory</code>, it&rsquo;s because it&rsquo;s pretty messy to create recursive directories using <code>directory</code>, and this just seems cleaner to me.</p>

<p>And finally, here are the two template files we&rsquo;re referencing inside the <code>template</code> resources above:</p>

<figure class='code'><figcaption><span>database.yml.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">production:</span>
</span><span class='line'><span class="x">  adapter: postgresql</span>
</span><span class='line'><span class="x">  encoding: unicode</span>
</span><span class='line'><span class="x">  database: </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;app&#39;</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  pool: 5</span>
</span><span class='line'><span class="x">  host: localhost</span>
</span><span class='line'><span class="x">  username: </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;db&#39;</span><span class="o">][</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  password: </span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;db&#39;</span><span class="o">][</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;password&#39;</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span>unicorn.sh.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">#!/bin/sh</span>
</span><span class='line'>
</span><span class='line'><span class="x">set -e</span>
</span><span class='line'><span class="x"># Example init script, this can be used with nginx, too,</span>
</span><span class='line'><span class="x"># since nginx and unicorn accept the same signals</span>
</span><span class='line'>
</span><span class='line'><span class="x"># Feel free to change any of the following variables for your app:</span>
</span><span class='line'><span class="x">TIMEOUT=${TIMEOUT-60}</span>
</span><span class='line'><span class="x">APP_ROOT=/var/www/</span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;app&#39;</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x">/current</span>
</span><span class='line'><span class="x">PID=$APP_ROOT/tmp/pids/unicorn.pid</span>
</span><span class='line'><span class="x">CMD=&quot;cd $APP_ROOT; ~/.rbenv/bin/rbenv exec bundle exec unicorn -D -c $APP_ROOT/config/unicorn.rb -E production&quot;</span>
</span><span class='line'><span class="x">AS_USER=</span><span class="cp">&lt;%=</span> <span class="n">node</span><span class="o">[</span><span class="s1">&#39;user&#39;</span><span class="o">][</span><span class="s1">&#39;name&#39;</span><span class="o">]</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">set -u</span>
</span><span class='line'>
</span><span class='line'><span class="x">OLD_PIN=&quot;$PID.oldbin&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="x">sig () {</span>
</span><span class='line'><span class="x">  test -s &quot;$PID&quot; &amp;&amp; kill -$1 `cat $PID`</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">oldsig () {</span>
</span><span class='line'><span class="x">  test -s $OLD_PIN &amp;&amp; kill -$1 `cat $OLD_PIN`</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">run () {</span>
</span><span class='line'><span class="x">  if [ &quot;$(id -un)&quot; = &quot;$AS_USER&quot; ]; then</span>
</span><span class='line'><span class="x">    eval $1</span>
</span><span class='line'><span class="x">  else</span>
</span><span class='line'><span class="x">    su -c &quot;$1&quot; - $AS_USER</span>
</span><span class='line'><span class="x">  fi</span>
</span><span class='line'><span class="x">}</span>
</span><span class='line'>
</span><span class='line'><span class="x">case &quot;$1&quot; in</span>
</span><span class='line'><span class="x">start)</span>
</span><span class='line'><span class="x">  sig 0 &amp;&amp; echo &gt;&amp;2 &quot;Already running&quot; &amp;&amp; exit 0</span>
</span><span class='line'><span class="x">  run &quot;$CMD&quot;</span>
</span><span class='line'><span class="x">  ;;</span>
</span><span class='line'><span class="x">stop)</span>
</span><span class='line'><span class="x">  sig QUIT &amp;&amp; exit 0</span>
</span><span class='line'><span class="x">  echo &gt;&amp;2 &quot;Not running&quot;</span>
</span><span class='line'><span class="x">  ;;</span>
</span><span class='line'><span class="x">force-stop)</span>
</span><span class='line'><span class="x">  sig TERM &amp;&amp; exit 0</span>
</span><span class='line'><span class="x">  echo &gt;&amp;2 &quot;Not running&quot;</span>
</span><span class='line'><span class="x">  ;;</span>
</span><span class='line'><span class="x">restart|reload)</span>
</span><span class='line'><span class="x">  sig HUP &amp;&amp; echo reloaded OK &amp;&amp; exit 0</span>
</span><span class='line'><span class="x">  echo &gt;&amp;2 &quot;Couldn&#39;t reload, starting &#39;$CMD&#39; instead&quot;</span>
</span><span class='line'><span class="x">  run &quot;$CMD&quot;</span>
</span><span class='line'><span class="x">  ;;</span>
</span><span class='line'><span class="x">upgrade)</span>
</span><span class='line'><span class="x">  if sig USR2 &amp;&amp; sleep 2 &amp;&amp; sig 0 &amp;&amp; oldsig QUIT</span>
</span><span class='line'><span class="x">    then</span>
</span><span class='line'><span class="x">    n=$TIMEOUT</span>
</span><span class='line'><span class="x">    while test -s $OLD_PIN &amp;&amp; test $n -ge 0</span>
</span><span class='line'><span class="x">    do</span>
</span><span class='line'><span class="x">      printf &#39;.&#39; &amp;&amp; sleep 1 &amp;&amp; n=$(( $n - 1 ))</span>
</span><span class='line'><span class="x">    done</span>
</span><span class='line'><span class="x">    echo</span>
</span><span class='line'>
</span><span class='line'><span class="x">    if test $n -lt 0 &amp;&amp; test -s $OLD_PIN</span>
</span><span class='line'><span class="x">    then</span>
</span><span class='line'><span class="x">      echo &gt;&amp;2 &quot;$OLD_PIN still exists after $TIMEOUT seconds&quot;</span>
</span><span class='line'><span class="x">      exit 1</span>
</span><span class='line'><span class="x">    fi</span>
</span><span class='line'><span class="x">    exit 0</span>
</span><span class='line'><span class="x">  fi</span>
</span><span class='line'><span class="x">  echo &gt;&amp;2 &quot;Couldn&#39;t upgrade, starting &#39;$CMD&#39; instead&quot;</span>
</span><span class='line'><span class="x">  run &quot;$CMD&quot;</span>
</span><span class='line'><span class="x">  ;;</span>
</span><span class='line'><span class="x">reopen-logs)</span>
</span><span class='line'><span class="x">  sig USR1</span>
</span><span class='line'><span class="x">  ;;</span>
</span><span class='line'><span class="x">*)</span>
</span><span class='line'><span class="x">  echo &gt;&amp;2 &quot;Usage: $0 &lt;start|stop|restart|upgrade|force-stop|reopen-logs&gt;&quot;</span>
</span><span class='line'><span class="x">  exit 1</span>
</span><span class='line'><span class="x">  ;;</span>
</span><span class='line'><span class="x">esac</span>
</span></code></pre></td></tr></table></div></figure>


<p>And with that, our recipes are complete! We&rsquo;re now ready to use them to provision our node, and that&rsquo;s exactly what we&rsquo;ll cover in <a href="http://vladigleba.github.io/blog/2014/08/13/provisioning-a-rails-server-using-chef-part-3-tying-it-all-together/">part 3</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Provisioning a Rails Server Using Chef, Part 1: Introduction to Chef Solo]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2014/07/28/provisioning-a-rails-server-using-chef-part-1-introduction-to-chef-solo/"/>
    <updated>2014-07-28T14:31:00-07:00</updated>
    <id>http://vladigleba.github.io/blog/2014/07/28/provisioning-a-rails-server-using-chef-part-1-introduction-to-chef-solo</id>
    <content type="html"><![CDATA[<p>About a month ago, I was in the middle of upgrading the server running <a href="http://phindee.com/">Phindee</a> using the harmless (or so I thought) <code>apt-get upgrade</code>. All appeared to be going well. But when I visited the app in the browser, staring back at me was the infamous &ldquo;We&rsquo;re sorry, but something went wrong&rdquo; page. I hit the logs, and luckily, it turned out to be a minor problem that was fixable without too much downtime.</p>

<!-- more -->


<p>But what if I wasn&rsquo;t so lucky and the problem wasn&rsquo;t as easy to fix? What if my server was wrecked and I had to rebuild it from scratch? That would be a nightmare because I would need to provision everything manually&mdash;by hand!  There had to be a better way of doing this.</p>

<p>Since my server was running on <a href="http://digitalocean.com/">DigitalOcean</a>, one possible solution was to take a snapshot of it in a fully-provisioned state and use that for future rebuilding. But this would tie me to DigitalOcean, which I love, but I still like having the freedom to switch providers freely if the need arises.</p>

<p>Another solution was to write a script that executed all the commands I ran to provision the server manually, and this would work, but I had also heard about a tool called <a href="https://github.com/opscode/chef">Chef</a> that&rsquo;s specifically designed for these kinds of things, and I wanted to see if it was something I could use. After a bit of research, I decided to give it a try. Fast forward a couple weeks, and I&rsquo;m now able to provision a Rails server from scratch with a single command. It&rsquo;s really cool, and it makes me feel like a badass.</p>

<h1>Why Chef?</h1>

<p>Besides Chef, there is another popular tool you could use to provision your server called <a href="https://github.com/puppetlabs/puppet">Puppet</a>. There are some <a href="https://www.quora.com/What-are-the-key-reasons-to-choose-Puppet-over-Chef-or-vice-versa">good</a> <a href="http://devopsanywhere.blogspot.com/2011/10/puppet-vs-chef-fight.html">articles</a> comparing the two, but the main reason why I went with Chef is because Puppet was designed with system administrators in mind, while Chef was designed with developers in mind, and as a developer, Chef is more natural for me to work with because it feels a lot like programming. Each tool has its strengths and weaknesses though, and you should pick the one that best fits <em>your</em> needs.</p>

<p>You might not even need Puppet or Chef at all. If you just need to provision a single server every now and then, a simple shell script will probably do. I decided to learn Chef because I do server provisioning pretty often, so it&rsquo;ll save me a significant amount of time down the road.</p>

<p>One thing that a tool like Chef offers is idempotence, which means you&rsquo;re able to run something over and over again safely. With Chef (and Puppet), you&rsquo;re not only able to provision your server, but you can also use it to verify that your server is in the state it&rsquo;s supposed to be in and correct it if it&rsquo;s not. So if the initial server permissions or configuration settings change, you can easily bring them back to their original state by rerunning your recipe. You can&rsquo;t really say the same thing about a shell script (unless you do a significant amount of extra work).</p>

<p>Puppet and Chef also allow you to easily access information about your system, such as kernel name, version, and release, in a way that works across platforms. They make it easy to run your recipes against multiple servers too. But perhaps most importantly, they make your recipes readable, and that&rsquo;s almost worth it on its own.</p>

<h1>Chef Solo or Chef Server?</h1>

<p>Chef comes in two flavors: Chef Solo and Chef Server. Chef Solo is a basically a simpler version of Chef Server because it&rsquo;s designed to be used with a small number of servers. With Chef Solo, you write your recipes on your local computer, upload them to your server(s), and Chef Solo is then called to run them. (A recipe, by the way, is a file containing the commands that will run to provision your server.)</p>

<p>With Chef Server, you still write your recipes on your local computer, but instead of uploading them to the server you want provisioned, you upload them to a server that&rsquo;s specifically dedicated to Chef. This server acts as the main repository of <em>all</em> your recipes. The servers you want provisioned will then have a program running on them (referred to as a Chef client) that is in constant communication with your Chef server, and whenever you upload your recipes to Chef server, Chef client will notice this and run them automatically. (Chef Solo is also Chef client; it just doesn&rsquo;t need a Chef server to do its job.)</p>

<p>Since Phindee is running on a single server, I currently have no need for Chef Server; Chef Solo does everything I need it to. Chef is a complex tool, and I found that there is enough new things to learn without the added complexity of Chef Server. If you&rsquo;re new to Chef, this is the route I recommend, even if you intend on using Chef Server, because the learning curve will be much more manageable.</p>

<h1>Working with Chef Solo</h1>

<p>One nice thing about Chef Server is you get to use a command-line tool called Knife that allows you to easily communicate with Chef Server right from your local computer. It gives you commands to easily upload your recipes, for example, among many other things. Unfortunately, it doesn&rsquo;t offer similar commands for Chef Solo, but there is a Knife plugin called <a href="https://github.com/matschaffer/knife-solo">knife-solo</a> that does just this. Since it&rsquo;s a packaged gem, all we need to do is add it to our app&rsquo;s Gemfile on our local computer, and the commands we need will be available automatically:</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;knife-solo&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 0.4.2&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>When you run <code>bundle</code> to install it, the Chef gem will be installed as well. If you then go into your app&rsquo;s root directory and run <code>knife</code>, you&rsquo;ll see a list of the commands available to you through Knife, including those provided by knife-solo, which will start with <code>knife solo ...</code>.</p>

<h2>Diving In</h2>

<p>Having that installed, we&rsquo;re now ready to start working with Chef Solo. The first thing we&rsquo;ll do is create a configuration file for Knife on our local computer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>knife configure -r . --defaults
</span></code></pre></td></tr></table></div></figure>


<p>This will create a new <code>~/.chef</code> directory with a file called <code>knife.rb</code> containing some default configurations. This file is used by Chef Server, so we actually won&rsquo;t need it, but Knife will keep complaining if we don&rsquo;t create it.</p>

<p>Next, go into your app&rsquo;s <code>/config</code> directory and run the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>knife solo init chef
</span><span class='line'><span class="nb">cd </span>chef
</span></code></pre></td></tr></table></div></figure>


<p>This will create a standard Chef directory structure (referred to as a &ldquo;kitchen&rdquo;) inside a directory called <code>/chef</code>. It&rsquo;ll look like this:</p>

<pre><code>chef/
├── cookbooks
├── data_bags
├── environments
├── nodes
├── roles
└── site-cookbooks
</code></pre>

<p>Here is a brief description of each one:</p>

<ul>
<li><code>/cookbooks</code>: holds recipes written by the community</li>
<li><code>/data_bags</code>: stores sensitive configuration for your infrastructure</li>
<li><code>/environments</code>: contains the environments defined for Chef Server</li>
<li><code>/nodes</code>: stores server-specific information</li>
<li><code>/roles</code>: contains the roles defined for Chef Server</li>
<li><code>/site-cookbooks</code>: holds recipes written by you</li>
</ul>


<p>Note that some of these directories are only for Chef Server, but they&rsquo;re created anyway because they&rsquo;re part of the standard Chef directory structure.</p>

<h2>New Chef Terms</h2>

<p>There are some new terms above that I haven&rsquo;t explained yet, so lets briefly go over them.</p>

<p>A cookbook is a collection of one or more recipes that will be run to set up and configure your servers. These servers are known as &ldquo;nodes&rdquo; and each node belongs to an environment. An environment is the stage that a node is in. For example, you can define a &ldquo;testing&rdquo; and a &ldquo;production&rdquo; environment to differentiate between nodes in the testing stage and those in production. We won&rsquo;t need this functionality, and it&rsquo;s actually only available in Chef Server.</p>

<p>A node can also have a role assigned to it that describes what the node does. For example, you can assign nodes running your databases to the database role, while nodes running the actual Rails application are assigned to the application role. This would make sense in a production environment, but in testing, you might have a node running both the database and the application, so you would assign it to both roles.</p>

<p>Data bags are subdirectories containing JSON files that store sensitive configuration for your infrastructure. Because they&rsquo;re used to store confidential information, they can be encrypted. They cannot, however, be assigned to a Chef environment, and should therefore be used to only store truly global configuration details.</p>

<p>We won&rsquo;t be using data bags, environments, or roles with Chef Solo, so these directories will remain empty. Our <code>/cookbooks</code> directory will also remain empty because I won&rsquo;t be using any community-provided cookbooks. They tend to be complex and bloated with code because they support different installation options and they try to cover as many operating systems as possible. I think they&rsquo;re a great way to learn Chef, but when it&rsquo;s time to write a recipe, I prefer to write my own.</p>

<h2>Creating Our Own Cookbook</h2>

<p>All right, with the terms clarified, we&rsquo;re now ready to create our own cookbook. Go ahead and run the following inside the <code>/chef</code> directory we created above (replace &ldquo;phindee&rdquo; with the name of your app):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>knife cookbook create phindee -o site-cookbooks
</span></code></pre></td></tr></table></div></figure>


<p>This creates a cookbook called &ldquo;phindee&rdquo; and uses the <code>-o</code> option to tell Knife to store it in the <code>/site-cookbooks</code> directory. (Remember, this is the directory for storing our own cookbooks, while the <code>/cookbooks</code> directory is for those written by the community. In fact, anything stored in <code>/cookbooks</code> won&rsquo;t actually be version controlled.)</p>

<p>If you then do an <code>ls</code> inside the cookbook you just created, you&rsquo;ll see what a standard cookbook directory structure looks like. There will be a number of directories listed, but here are the ones you should know about:</p>

<ul>
<li><code>/attributes</code>: stores files that define default values for recipes</li>
<li><code>/files</code>: contains files that are copied and placed on the server</li>
<li><code>metadata.rb</code>: stores metadata about your cookbook, like name, version, dependencies, etc.</li>
<li><code>/recipes</code>: stores the recipes that are part of the cookbook</li>
<li><code>/templates</code>: stores ERB (Embedded Ruby) files that are later converted to configuration files</li>
</ul>


<p>The rest of the directories are for advanced Chef setups, and I won&rsquo;t be explaining them here.</p>

<p>With our cookbook created, we&rsquo;re now ready to start writing the recipes that will provision our Rails server, which I&rsquo;ll cover in <a href="http://vladigleba.github.io/blog/2014/08/12/provisioning-a-rails-server-using-chef-part-2-writing-the-recipes/">part 2</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Backup a Rails Database with the Backup and Whenever Gems]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2014/06/30/backup-a-rails-database-with-the-backup-and-whenever-gems/"/>
    <updated>2014-06-30T16:07:00-07:00</updated>
    <id>http://vladigleba.github.io/blog/2014/06/30/backup-a-rails-database-with-the-backup-and-whenever-gems</id>
    <content type="html"><![CDATA[<p><a href="http://phindee.com/">Phindee</a> users recently got the ability to &ldquo;like&rdquo; happy hours. Up until that point, all my happy hour data was safely stored in a version controlled <code>seed.rb</code> file, but now I was dealing with data that was dynamically generated and not being backed up anywhere. And that is not a good thing.</p>

<!-- more -->


<p>So I went over to <a href="https://www.ruby-toolbox.com/categories/backups">ruby-toolbox.com</a> to familiarize myself with the various backup tools available for Ruby projects. The <a href="https://github.com/meskyanichi/backup">Backup gem</a> caught my eye as it was (and is) the most popular one by far. After reading a bit about it, I was impressed by its ease of use and its extensive <a href="http://meskyanichi.github.io/backup/v4/">list of features</a>. I knew I had to try it out.</p>

<p>Having now used it for a few weeks, I&rsquo;d like to explain how I set it up, so you can take advantage of it as well.</p>

<h1>Setting Up Backup</h1>

<p>Setting up Backup is as straightforward as it gets. Log in to the VPS running your database and install Backup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install backup
</span></code></pre></td></tr></table></div></figure>


<p>You can then run <code>backup</code> to familiarize yourself with all the commands it provides. We&rsquo;ll start out by creating a Backup model, which is simply a description of how a backup will work. If you run</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>backup <span class="nb">help </span>generate:model
</span></code></pre></td></tr></table></div></figure>


<p>you&rsquo;ll see all the options available for describing how we want our backup to function. Below is the command and options I used to create my model:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>backup generate:model --trigger<span class="o">=</span>db_backup --databases<span class="o">=</span><span class="s1">&#39;postgresql&#39;</span> --storages<span class="o">=</span><span class="s1">&#39;scp&#39;</span> --compressor<span class="o">=</span><span class="s1">&#39;gzip&#39;</span> --notifiers<span class="o">=</span><span class="s1">&#39;mail&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, I&rsquo;m first using the <code>--trigger</code> option to create a model called <code>db_backup</code>. Then I&rsquo;m using the <code>--databases</code> option to specify that I&rsquo;ll be backing up a PostgreSQL database. (Basides PostgreSQL, Backup also supports MySQL, MongoDB, Redis, and Riak.)</p>

<p>Next, I use <code>--storages</code> to tell Backup how to perform the backup itself. By specifying <code>scp</code>, I&rsquo;m saying that the backup file should be stored on a secondary VPS, and it should be transferred there via <a href="https://en.wikipedia.org/wiki/Secure_copy">SCP</a>. (Ideally, your secondary VPS should be in a location that&rsquo;s different from the VPS running your database.) In addition to SCP, Backup also supports rsync, FTP/SFTP, S3, Dropbox, and <a href="http://meskyanichi.github.io/backup/v4/storages/">a few others</a>.</p>

<p>I then specify that I want my backup to be compressed with gzip (you could also use bzip2, if you&rsquo;d like), and finally, I tell Backup to notify me via email if the backup succeeded or failed. If you dislike email, your other options include Twitter, Prowl, Campfire, Hipchat, and <a href="http://meskyanichi.github.io/backup/v4/notifiers/">others</a>.</p>

<p>Once this command runs, it&rsquo;ll create a <code>~/Backup</code> directory containing two files: <code>config.rb</code> and <code>models/db_backup.rb</code> (named after our trigger). The latter will hold configuration specific to the model we just created, while the former is for common configuration across multiple models. Since we&rsquo;re only creating a single model, we&rsquo;ll only modify the <code>models/db_backup.rb</code> file, which will already contain some code corresponding to the options we just specified.</p>

<p>If you ran the command above, the file should look something like this:</p>

<figure class='code'><figcaption><span>db_backup.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># encoding: utf-8</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># load login info</span>
</span><span class='line'><span class="n">db_config</span>           <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s1">&#39;/var/www/phindee/shared/config/database.yml&#39;</span><span class="p">)</span><span class="o">[</span><span class="s1">&#39;production&#39;</span><span class="o">]</span>
</span><span class='line'><span class="n">app_config</span>          <span class="o">=</span> <span class="no">YAML</span><span class="o">.</span><span class="n">load_file</span><span class="p">(</span><span class="s1">&#39;/var/www/phindee/shared/config/application.yml&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="no">Model</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:db_backup</span><span class="p">,</span> <span class="s1">&#39;backs up ip_addresses table&#39;</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># PostgreSQL [Database]</span>
</span><span class='line'>  <span class="n">database</span> <span class="no">PostgreSQL</span> <span class="k">do</span> <span class="o">|</span><span class="n">db</span><span class="o">|</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">name</span>           <span class="o">=</span> <span class="n">db_config</span><span class="o">[</span><span class="s1">&#39;database&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">username</span>       <span class="o">=</span> <span class="n">db_config</span><span class="o">[</span><span class="s1">&#39;username&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">password</span>       <span class="o">=</span> <span class="n">db_config</span><span class="o">[</span><span class="s1">&#39;password&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">host</span>           <span class="o">=</span> <span class="s2">&quot;localhost&quot;</span>
</span><span class='line'>    <span class="n">db</span><span class="o">.</span><span class="n">only_tables</span>    <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;ip_addresses&quot;</span><span class="o">]</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># SCP (Secure Copy) [Storage]</span>
</span><span class='line'>  <span class="n">store_with</span> <span class="no">SCP</span> <span class="k">do</span> <span class="o">|</span><span class="n">server</span><span class="o">|</span>
</span><span class='line'>    <span class="n">server</span><span class="o">.</span><span class="n">username</span>   <span class="o">=</span> <span class="n">app_config</span><span class="o">[</span><span class="s1">&#39;backup_username&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">server</span><span class="o">.</span><span class="n">password</span>   <span class="o">=</span> <span class="n">app_config</span><span class="o">[</span><span class="s1">&#39;backup_password&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">server</span><span class="o">.</span><span class="n">ip</span>         <span class="o">=</span> <span class="n">app_config</span><span class="o">[</span><span class="s1">&#39;backup_ip&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">server</span><span class="o">.</span><span class="n">port</span>       <span class="o">=</span> <span class="n">app_config</span><span class="o">[</span><span class="s1">&#39;backup_port&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">server</span><span class="o">.</span><span class="n">path</span>       <span class="o">=</span> <span class="s2">&quot;~/backups/&quot;</span>
</span><span class='line'>    <span class="n">server</span><span class="o">.</span><span class="n">keep</span>       <span class="o">=</span> <span class="mi">5</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Gzip [Compressor]</span>
</span><span class='line'>  <span class="n">compress_with</span> <span class="no">Gzip</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Mail [Notifier]</span>
</span><span class='line'>  <span class="n">notify_by</span> <span class="no">Mail</span> <span class="k">do</span> <span class="o">|</span><span class="n">mail</span><span class="o">|</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">on_success</span>         <span class="o">=</span> <span class="kp">false</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">on_warning</span>         <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">on_failure</span>         <span class="o">=</span> <span class="kp">true</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">from</span>               <span class="o">=</span> <span class="n">app_config</span><span class="o">[</span><span class="s1">&#39;email_username&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">to</span>                 <span class="o">=</span> <span class="n">app_config</span><span class="o">[</span><span class="s1">&#39;email_username&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">address</span>            <span class="o">=</span> <span class="n">app_config</span><span class="o">[</span><span class="s1">&#39;email_address&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">port</span>               <span class="o">=</span> <span class="n">app_config</span><span class="o">[</span><span class="s1">&#39;email_port&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">domain</span>             <span class="o">=</span> <span class="n">app_config</span><span class="o">[</span><span class="s1">&#39;email_domain&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">user_name</span>          <span class="o">=</span> <span class="n">app_config</span><span class="o">[</span><span class="s1">&#39;email_username&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">password</span>           <span class="o">=</span> <span class="n">app_config</span><span class="o">[</span><span class="s1">&#39;email_password&#39;</span><span class="o">]</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">authentication</span>     <span class="o">=</span> <span class="ss">:login</span>
</span><span class='line'>    <span class="n">mail</span><span class="o">.</span><span class="n">encryption</span>         <span class="o">=</span> <span class="ss">:ssl</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since I store my database information in the <code>database.yml</code> file and my email and VPS information in <code>application.yml</code>, I added two lines in the beginning to load the necessary login information from these files using the <code>load_file()</code> method from the YAML module. I recommend you do the same because it&rsquo;s best to keep these things in a dedicated file, instead of hard-coding them in every time.</p>

<p>Let&rsquo;s now go over our <code>db_backup</code> model, which consists of four sections. Because we specified PostgreSQL for the <code>--databases</code> option, the first section contains configuration that is specific to PostgreSQL. It collects our database name, username, password, and host, along with an array of tables to back up. This array is optional and should be used only if you don&rsquo;t want your entire database backed up. (I used it because the <code>ip_addresses</code> table is the only table I&rsquo;m interested in backing up since the data for all my other tables is saved in <code>seed.rb</code>.)</p>

<p>The second section describes how to connect to our secondary VPS. After setting the username, password, IP address, and port, I specify the path where the backups will be stored, and I tell Backup to keep only the five most recent ones. The third section simply tells Backup to use gzip for compression, while the last contains settings for setting up email notifications, which tell Backup to only send an email if a warning or a failure occurs.</p>

<p>Once our <code>db_backup.rb</code> file is configured, we can run it with the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>backup perform -t db_backup
</span></code></pre></td></tr></table></div></figure>


<p>If all went well, you should be able to find a gzipped backup file on your secondary VPS.</p>

<h1>Setting Up Whenever</h1>

<p>Okay, this is all great, but wouldn&rsquo;t it be cool if the backup was done automatically without you having to trigger it? Well, this is possible with a tool called <a href="https://en.wikipedia.org/wiki/Cron">cron</a>. If you&rsquo;re not familiar with it, cron is a scheduling utility that allows you to run tasks (which are known as cron jobs) at specified times. You can use it to automate any task that needs to be run at regular intervals. If you&rsquo;ve never used it before, DigitalOcean has a good introductory <a href="https://www.digitalocean.com/community/tutorials/how-to-schedule-routine-tasks-with-cron-and-anacron-on-a-vps">article</a> that&rsquo;s definitely worth a read.</p>

<p>To write our cron jobs, we&rsquo;ll be using a gem called <a href="https://github.com/javan/whenever">Whenever</a>, because it allows us to write them in a simpler, more expressive Ruby syntax, instead of the standard cron syntax.</p>

<p>Go ahead and install Whenever on the server running Backup:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install whenever
</span></code></pre></td></tr></table></div></figure>


<p>When that finishes, create a <code>/config</code> directory for Whenever inside <code>~/Backup</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/Backup
</span><span class='line'>mkdir config
</span></code></pre></td></tr></table></div></figure>


<p>Then run:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wheneverize .
</span></code></pre></td></tr></table></div></figure>


<p>This will create a <code>schedule.rb</code> file in <code>~/Backup/config</code> for writing your cron jobs. Below is the code I added to mine:</p>

<figure class='code'><figcaption><span>schedule.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">every</span> <span class="mi">1</span><span class="o">.</span><span class="n">day</span><span class="p">,</span> <span class="ss">:at</span> <span class="o">=&gt;</span> <span class="s1">&#39;11:30 pm&#39;</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">command</span> <span class="s2">&quot;backup perform -t db_backup&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code pretty much explains itself: everyday at 11pm, cron will run the <code>backup perform -t db_backup</code> command. If you&rsquo;d like to see this converted to cron syntax, run <code>whenever</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$ </span>whenever
</span><span class='line'>30 23 * * * /bin/bash -l -c <span class="s1">&#39;backup perform -t db_backup &gt;&gt; /home/bob/Backup/config/cron.log 2&gt;&amp;1&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is known as your crontab (which stands for cron table), and it lists all the jobs cron is scheduled to run, along with the time and day they&rsquo;ll run.</p>

<p>The first column, for example, defines the minute (0-59) at which the command will run, while the second defines the hour (0-23) in military time. The third column defines the day of the month, the fourth defines the month itself (1-12), and the fifth is used to specify the day of the week (with Sunday being represented by both 0 and 7).</p>

<p>Because running <code>whenever</code> didn&rsquo;t actually write our job to crontab, we&rsquo;ll need to run</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>whenever --update-crontab
</span></code></pre></td></tr></table></div></figure>


<p>to do so. Having done that, cron will now know about our job, and it&rsquo;ll get executed at the specified time and day. When it runs, it&rsquo;ll also log its activity in a <code>~/Backup/config/cron.log</code> file for future reference.</p>

<h1>Hooking Things Up with Capistrano</h1>

<p>In order to make it easier to edit these files in the future, I decided to recreate them on my local computer and store them in my app&rsquo;s <code>/config</code> directory in a folder called <code>/backup</code>, which means they&rsquo;ll now be under version control as well. And since I use Capistrano for deployment, I wrote two tasks to automate the process of uploading these files back to the server. They reside in a file called <code>backup.cap</code> in my app&rsquo;s <code>/lib/capistrano/tasks</code> directory:</p>

<figure class='code'><figcaption><span>backup.cap</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:backup</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Upload backup config files.&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:upload_config</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">execute</span> <span class="s2">&quot;mkdir -p </span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:backup_path</span><span class="p">)</span><span class="si">}</span><span class="s2">/models&quot;</span>
</span><span class='line'>      <span class="n">upload!</span> <span class="no">StringIO</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;config/backup/config.rb&quot;</span><span class="p">)),</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:backup_path</span><span class="p">)</span><span class="si">}</span><span class="s2">/config.rb&quot;</span>
</span><span class='line'>      <span class="n">upload!</span> <span class="no">StringIO</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;config/backup/models/db_backup.rb&quot;</span><span class="p">)),</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:backup_path</span><span class="p">)</span><span class="si">}</span><span class="s2">/models/db_backup.rb&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Upload cron schedule file.&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:upload_cron</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">execute</span> <span class="s2">&quot;mkdir -p </span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:backup_path</span><span class="p">)</span><span class="si">}</span><span class="s2">/config&quot;</span>
</span><span class='line'>      <span class="n">execute</span> <span class="s2">&quot;touch </span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:backup_path</span><span class="p">)</span><span class="si">}</span><span class="s2">/config/cron.log&quot;</span>
</span><span class='line'>      <span class="n">upload!</span> <span class="no">StringIO</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;config/backup/schedule.rb&quot;</span><span class="p">)),</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:backup_path</span><span class="p">)</span><span class="si">}</span><span class="s2">/config/schedule.rb&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">within</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:backup_path</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="c1"># capistrano was unable to find the executable for whenever</span>
</span><span class='line'>        <span class="c1"># without the path to rbenv shims set</span>
</span><span class='line'>        <span class="n">with</span> <span class="ss">path</span><span class="p">:</span> <span class="s2">&quot;/home/</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:deploy_user</span><span class="p">)</span><span class="si">}</span><span class="s2">/.rbenv/shims:$PATH&quot;</span> <span class="k">do</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="n">capture</span> <span class="ss">:whenever</span>
</span><span class='line'>          <span class="nb">puts</span> <span class="n">capture</span> <span class="ss">:whenever</span><span class="p">,</span> <span class="s1">&#39;--update-crontab&#39;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And inside my <code>/config/deploy.rb</code> file, I then have the following definition for the <code>backup_path</code> variable:</p>

<figure class='code'><figcaption><span>deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:backup_path</span><span class="p">,</span> <span class="s2">&quot;/home/</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:deploy_user</span><span class="p">)</span><span class="si">}</span><span class="s2">/Backup&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>(If this is all new to you, feel free to read my posts explaining <a href="http://vladigleba.com/blog/2014/04/04/deploying-rails-apps-part-5-configuring-capistrano/">how to configure Capistrano</a> and <a href="http://vladigleba.com/blog/2014/04/10/deploying-rails-apps-part-6-writing-capistrano-tasks/">how to write Capistrano tasks</a> to quickly get up to speed.)</p>

<p>And with that, our backup functionality is complete. You&rsquo;ll now have a backup of your database stored on a secondary VPS every 24 hours without you having to lift a finger! And it even notifies you if it fails!</p>

<p>Life is good.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Do Autocomplete in Rails Using Redis]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2014/05/30/how-to-do-autocomplete-in-rails-using-redis/"/>
    <updated>2014-05-30T10:40:00-07:00</updated>
    <id>http://vladigleba.github.io/blog/2014/05/30/how-to-do-autocomplete-in-rails-using-redis</id>
    <content type="html"><![CDATA[<p>A few days ago, I added search functionality to <a href="http://phindee.com/">Phindee</a> so users can quickly find information about a particular happy hour. Search that is well-done often comes with autocomplete, and Phindee is no exception.</p>

<!-- more -->


<p>Autocomplete in Phindee does a couple of things for the user: 1) it reduces typing, 2) it lets the user quickly know if a specific happy hour is in the database, 3) it allows her to quickly find a particular happy hour that <em>is</em> in the database, and 4) it lets him know if the happy hour is currently happening because it will have a green circle next to it if that’s the case.</p>

<p>What makes this work behind the scenes is an open-source, in-memory, key-value store called <a href="https://github.com/antirez/redis/">Redis</a>. Because it’s in-memory, Redis is fast, which makes it perfect for autocompletion. I’ve known about Redis for a while now, but never had a need to use it, so I’m glad the opportunity finally presented itself. But now that I’ve had a chance to work with it, I’d like to explain how the autocomplete functionality works behind the scenes, and hopefully, teach you a few things for your own projects.</p>

<p>Before we go on, it’s important that you have a basic understanding of Redis. If you’re never used it before, I recommend going through the <a href="http://try.redis.io/">interactive tutorial</a> on their website; it will help you understand what it’s for, what it can do, and how to use it. Pay special attention to the section on sorted sets because that’s what we’ll be using for autocompletion.</p>

<h1>Installing Redis</h1>

<p>If you’re on a Mac, you can easily install Redis using <a href="https://github.com/Homebrew/homebrew">Homebrew</a> by running the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>brew install redis
</span></code></pre></td></tr></table></div></figure>


<p>When it finishes, it’ll give you the command to start the Redis server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>redis-server /usr/local/etc/redis.conf
</span></code></pre></td></tr></table></div></figure>


<p>You can then access the Redis command-line by running <code>redis-cli</code>, which allows you to play around with various Redis commands to see how they work.</p>

<p>Next, you’ll need to hook Redis up with your Rails app, and you can do this by adding the following line to your ‘Gemfile’:</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;redis&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.0.7&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Then run <code>bundle</code> to install it.</p>

<h1>Defining a Model for Redis to Work With</h1>

<p>First thing we’ll need to do is create an initializer file for setting up our Redis connection. Go ahead and create a file called <code>redis.rb</code> inside your app’s <code>/config/initializers</code> directory. Then add the following line into it:</p>

<figure class='code'><figcaption><span>redis.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$redis</span> <span class="o">=</span> <span class="no">Redis</span><span class="o">.</span><span class="n">new</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates a global variable called <code>$redis</code> to make it easy for us to access Redis through out our app.</p>

<p>Next, we’ll create a new file called <code>search_suggestion.rb</code> inside the <code>/app/models</code> directory. It will contain the code that seeds our Redis database and retrieves a list of suggestions. To start things off, add the following code into it:</p>

<figure class='code'><figcaption><span>search_suggestion.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">SearchSuggestion</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">seed</span>
</span><span class='line'>    <span class="no">Place</span><span class="o">.</span><span class="n">find_each</span> <span class="k">do</span> <span class="o">|</span><span class="n">place</span><span class="o">|</span>
</span><span class='line'>      <span class="nb">name</span> <span class="o">=</span> <span class="n">place</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>      <span class="mi">1</span><span class="o">.</span><span class="n">upto</span><span class="p">(</span><span class="nb">name</span><span class="o">.</span><span class="n">length</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="k">do</span> <span class="o">|</span><span class="n">n</span><span class="o">|</span>
</span><span class='line'>        <span class="n">prefix</span> <span class="o">=</span> <span class="nb">name</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">n</span><span class="o">]</span>
</span><span class='line'>        <span class="vg">$redis</span><span class="o">.</span><span class="n">zadd</span> <span class="s1">&#39;search-suggestions:#{prefix.downcase}&#39;</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="nb">name</span><span class="o">.</span><span class="n">downcase</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates a class called <code>SearchSuggestion</code> with a class method called <code>seed()</code>. Notice that this class doesn’t inherit from <code>ActiveRecord::Base</code>, which is the base class that the models you create with <code>rails g model ...</code> inherit from. We don’t need it because we’ll be using Redis instead of ActiveRecord. (By the way, we’re defining a class method instead of an instance method because the logic in this method relates to the class itself, not a specific instance of it.)</p>

<h2>Code Walk-Through</h2>

<p>All right, now let’s go over the code. Phindee has a model called <code>Place</code> for storing all the places that have a happy hour, and I’m simply looping over each record stored in it. The reason why I’m doing <code>Place.find_each</code> instead of <code>Place.all.each</code> is the <code>find_each()</code> method works in batches of 1000. This means that if I have thousands of records in my database, <code>find_each()</code> will load into memory only 1000 at a time, instead of loading them all at once and possibly overwhelming the server, which is the case with <code>Place.all.each</code>.</p>

<p>For each place, I’m using the <code>upto()</code> method to loop over the place’s name n times, where n is the number of characters in the name minus 1 (you’ll see why we’re doing minus 1 later). For example, let’s say the place name is “via delizia”. Our n value would be 10 because the length of the name is 11, but minus 1 brings it down to 10, so we would iterate over the name 10 times.</p>

<p>On the first iteration, n would be 1 and the <code>prefix</code> variable would be set to the string “v” since we’re extracting the characters from 0 to 1. Then the Redis <a href="http://redis.io/commands/zadd"><code>ZADD</code> command</a> is used to create a Sorted Set called “search-suggestions:v” since the variable <code>prefix</code> is set to “v” on the first iteration. (I’m prefixing the set name with “search-suggestions” to keep things organized, but this is not strictly necessary).</p>

<p>Sorted Sets are very similar to Sets because they both store collections of strings, but a Sorted Set also stores an associated score with each string that is then used for sorting. So if we go back to the code, you’ll see that <code>ZADD</code> initializes the set “search-suggestions:v” with a score of 1 and a value of “via delizia”&mdash;the place’s full name.</p>

<p>On the second iteration, a new set will be created called “search-suggestions:vi” since we’re now extracting the characters from 0 to 2, and this initializes the variable <code>prefix</code> to “vi”.  The set itself is then initialized to a score of 1 and a string of “via delizia”, just like the first time.</p>

<p>The same process is then repeated on the subsequent iterations as well. After the 10th iteration, we’ll have 10 different sets initialized to a score of 1 and a string of “via delizia”, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s1">&#39;search-suggestions:v&#39;</span> <span class="o">=</span>&gt; <span class="o">[</span><span class="s1">&#39;via delizia&#39;</span>, 1<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&#39;search-suggestions:vi&#39;</span> <span class="o">=</span>&gt; <span class="o">[</span><span class="s1">&#39;via delizia&#39;</span>, 1<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&#39;search-suggestions:via&#39;</span> <span class="o">=</span>&gt; <span class="o">[</span><span class="s1">&#39;via delizia&#39;</span>, 1<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&#39;search-suggestions:via &#39;</span> <span class="o">=</span>&gt; <span class="o">[</span><span class="s1">&#39;via delizia&#39;</span>, 1<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&#39;search-suggestions:via d&#39;</span> <span class="o">=</span>&gt; <span class="o">[</span><span class="s1">&#39;via delizia&#39;</span>, 1<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&#39;search-suggestions:via de&#39;</span> <span class="o">=</span>&gt; <span class="o">[</span><span class="s1">&#39;via delizia&#39;</span>, 1<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&#39;search-suggestions:via del&#39;</span> <span class="o">=</span>&gt; <span class="o">[</span><span class="s1">&#39;via delizia&#39;</span>, 1<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&#39;search-suggestions:via deli&#39;</span> <span class="o">=</span>&gt; <span class="o">[</span><span class="s1">&#39;via delizia&#39;</span>, 1<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&#39;search-suggestions:via deliz&#39;</span> <span class="o">=</span>&gt; <span class="o">[</span><span class="s1">&#39;via delizia&#39;</span>, 1<span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="s1">&#39;search-suggestions:via delizi&#39;</span> <span class="o">=</span>&gt; <span class="o">[</span><span class="s1">&#39;via delizia&#39;</span>, 1<span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we don’t create a last set called “search-suggestions:via delizia” because there is no point in returning “via delizia” as a suggested term when a user types “via delizia”. That’s why we added the minus 1 to the length of the name.</p>

<p>By the way, all the scores are identical right now, but they can be incremented later to increase the ranking of popular search terms, although I won&rsquo;t be covering how to do this here.</p>

<p>Let’s now assume the second place name is “vault martini”. This means that on the very first iteration, with the <code>prefix</code> variable set to “v” once again, there will be no new set created since we already have a set called “search-suggestions:v”. <code>ZADD</code> will recognize this and add to the already existing set, instead. This means that the set “search-suggestions:v” will now hold two keys:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="s1">&#39;search-suggestions:v&#39;</span> <span class="o">=</span>&gt; <span class="o">[[</span><span class="s1">&#39;via delizia&#39;</span>, 1<span class="o">]</span>, <span class="o">[</span><span class="s1">&#39;vault martini&#39;</span>, 1<span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>And now you can see how autocompletion will work. Whenever a user types “v” in the search bar, we can return a list of search suggestions simply by returning the values in the “search-suggestions:v” set. There is no need for expensive queries that search through the entire database and look for matches. Instead, we find what we’re looking for right away. That&rsquo;s the beauty of Redis (and other key-value stores).</p>

<h2>Extracting Values from a Sorted Set</h2>

<p>But how do we extract values from a set? Well, Redis has a command called <a href="http://redis.io/commands/zrevrange"><code>ZREVRANGE</code></a> that does just that. It returns a range of elements sorted by score (with the highest scores listed first). Go ahead and add the following to <code>search_suggestion.rb</code>:</p>

<figure class='code'><figcaption><span>search_suggestion.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nc">self</span><span class="o">.</span><span class="nf">terms_for</span><span class="p">(</span><span class="n">prefix</span><span class="p">)</span>
</span><span class='line'>    <span class="vg">$redis</span><span class="o">.</span><span class="n">zrevrange</span> <span class="s1">&#39;search-suggestions:#{prefix.downcase}&#39;</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">9</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>This function accepts a <code>prefix</code> variable and uses <code>ZREVRANGE</code> to return the first 10 elements of a sorted set containing the specified <code>prefix</code> value. We&rsquo;ll use it later to return a list of search suggestions to the user.</p>

<h1>Creating a Rake Task to Seed Redis</h1>

<p>In order to make it easy for us to seed Redis from the command line, we&rsquo;ll create a <a href="https://github.com/jimweirich/rake">Rake</a> task that calls the <code>seed()</code> method we defined earlier. (If you&rsquo;re new to Rake, I highly recommend watching the <a href="http://railscasts.com/episodes/66-custom-rake-tasks">Railscasts episode</a> about it.) Go ahead and create a new file called <code>search_suggestions.rake</code> inside your app&rsquo;s <code>/lib/tasks</code> directory, and add the following into it:</p>

<figure class='code'><figcaption><span>search_suggestions.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:search_suggestions</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s1">&#39;Generate search suggestions&#39;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">index</span><span class="p">:</span> <span class="ss">:environment</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">SearchSuggestion</span><span class="o">.</span><span class="n">seed</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code is simple. We&rsquo;re creating a task called <code>index</code> and making it dependent on a Rake task provided by Rails called <code>environment</code>, which loads the Rails environment and gives us access to our <code>SearchSuggestion</code> class. Then we&rsquo;re just calling the <code>seed()</code> method we defined earlier to seed Redis. (We wrap this up inside a namespace called <code>search_suggestions</code> to keep things neat and organized.)</p>

<p>And now we can <code>cd</code> into our app&rsquo;s root directory and call this task from the command line, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rake search_suggestions:index
</span></code></pre></td></tr></table></div></figure>


<p>You can then go into the Rails console with <code>rails c</code> and run some Redis commands to see if it worked. For example, if I defined a set called &ldquo;search-suggestions:v&rdquo; earlier, I can run the <code>ZREVRANGE</code> command to return the first 10 elements:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$redis</span>.zrange <span class="s1">&#39;search-suggestions:v&#39;</span>, 0, 9, with_scores: <span class="nb">true</span>
</span><span class='line'><span class="o">=</span>&gt; <span class="o">[[</span><span class="s2">&quot;vault martini&quot;</span>, 1.0<span class="o">]</span>, <span class="o">[</span><span class="s2">&quot;via delizia&quot;</span>, 1.0<span class="o">]</span>, <span class="o">[</span><span class="s2">&quot;vino bar&quot;</span>, 1.0<span class="o">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that if you want Redis to return the values along with their scores, you need to pass an argument called <code>with_scores</code> and set it to <code>true</code>; otherwise, Redis omits the scores.</p>

<h1>Setting Up the Front-End</h1>

<p>Now that we have the back-end functionality setup, it’s time to set up the front-end. We’ll use the jQueryUI <a href="http://api.jqueryui.com/autocomplete/">autocomplete widget</a> due to its simplicity and ease of use. We could include it in our app simply by adding the following to our <code>/app/assets/javascripts/application.js</code> file:</p>

<figure class='code'><figcaption><span>application.js</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="c1">//= require jquery-ui</span>
</span></code></pre></td></tr></table></div></figure>


<p>but this will include the entire library with all the widgets. I don’t like code bloat and prefer to include only the code that I actually need, so we&rsquo;ll take another route.</p>

<h2>Keeping Things Slim</h2>

<p>Head over to the jQueryUI <a href="http://jqueryui.com/download/">download page</a> and under “Components”, deselect the “Toggle All” option, which will deselect all the checkboxes. Then scroll down to the “Widgets” section, select “Autocomplete”, and you’ll see a few other necessary dependencies get selected automatically. Then press “Download”.</p>

<p>If you open the folder it downloaded and go into its <code>/js</code> directory, you’ll see a file that starts with “jquery-ui-” and ends with a “.custom.js” extension.  Open it and copy its code. Then head over to your app, create a new file called <code>autocomplete.js</code> inside the <code>/app/assets/javascripts</code> directory, and paste that code into it.</p>

<p>Now go back to the folder you just downloaded, go into its <code>/css</code> directory, find a file with a “.custom.css” extension, open it, and copy its code. Then create another file called <code>autocomplete.css</code> inside your app’s <code>/app/assets/stylesheets</code> directory and paste the code into it.</p>

<p>Now we have the code we need and no more.</p>

<h2>Hooking It up with HTML</h2>

<p>We&rsquo;re ready to connect the autocomplete code we just added to our app&rsquo;s HTML. In Phindee, I have a simple form with a search image and an input field that needs the autocomplete functionality:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='erb'><span class='line'><span class="x">. . .</span>
</span><span class='line'>
</span><span class='line'><span class="x">&lt;form class=&quot;search-form”&gt;</span>
</span><span class='line'><span class="x">  </span><span class="cp">&lt;%=</span> <span class="n">image_tag</span> <span class="n">asset_path</span><span class="p">(</span><span class="s1">&#39;search-icon.svg&#39;</span><span class="p">),</span> <span class="ss">class</span><span class="p">:</span> <span class="s1">&#39;search-icon&#39;</span> <span class="cp">%&gt;</span><span class="x"></span>
</span><span class='line'><span class="x">  &lt;input type=&quot;text&quot; class=“search-field&quot; /&gt;</span>
</span><span class='line'><span class="x">&lt;/form&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="x">. . .</span>
</span></code></pre></td></tr></table></div></figure>


<p>In another file, I have the following CoffeeScript code that hooks up the autocomplete widget to the input field I just mentioned above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">.</span> <span class="p">.</span> <span class="p">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="nx">$</span><span class="p">(</span><span class="s">&#39;.search-field&#39;</span><span class="p">).</span><span class="nx">autocomplete</span>
</span><span class='line'>    <span class="nv">appendTo: </span><span class="s">&#39;.search-form&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">source: </span><span class="s">&#39;/search_suggestions&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="p">.</span> <span class="p">.</span> <span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>I’m simply calling the jQueryUI-provided <code>autocomplete()</code> method on the input field I&rsquo;m interested in. I then use the <code>appendTo</code> option to specify that the autocomplete drop-down should be appended to the form itself. Finally, I’m using <code>source</code> to specify the URL path the autocomplete widget will use to get a list of search suggestions that will be displayed in the drop-down. I chose a path called “/search_suggestions”, but you can choose any path you want.</p>

<h2>How It Works</h2>

<p>If you look at the <a href="http://api.jqueryui.com/autocomplete/#option-source">documentation</a> for <code>source</code>, you’ll see that it can accept the search suggestions as an array of strings, a string pointing to a URL that <em>returns</em> an array of strings, or a function with a response callback that also returns an array of strings. We’re using a string pointing to a URL since this fits our needs perfectly.</p>

<p>This is how it will work. The widget will take whatever is typed in the search field and append it to a variable called “term”, which itself will get appended to the URL path we specified in <code>source</code>. Then it’ll make a GET request to the URL and expect our server to respond with the search suggestions rendered as an array of strings in the JSON format. So for example, if the user types in “v”, the widget will make a GET request to “/search_suggestions?term=v”, and it’ll expect the server to respond with something like <code>["via delizia","vault martini”]</code>.</p>

<p>Our server doesn’t yet know how to respond to a URL like this. Let’s set it up.</p>

<h1>Creating a Controller to Handle Requests</h1>

<p>First, we’ll create a controller that takes the search phrase the user types in, passes it on to the <code>terms_for()</code> method we defined in <code>search_suggestion.rb</code>, and returns the resulting list of suggestions back to the user. We&rsquo;ll call it <code>search_suggestions</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rails g controller search_suggestions
</span></code></pre></td></tr></table></div></figure>


<p>This will create a new file called <code>search_suggestions_controller.rb</code>. Open it and add the following code inside the <code>SearchSuggestionsController</code> class:</p>

<figure class='code'><figcaption><span>search_suggestions_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">index</span>
</span><span class='line'>    <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="no">SearchSuggestion</span><span class="o">.</span><span class="n">terms_for</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:term</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>We extract the value of the <code>term</code> variable using <code>params[:term]</code>, pass it on to the <code>terms_for()</code> method, and tell Rails to render the response in JSON format. Kid stuff.</p>

<p>Then open your app’s <code>/config/routes.rb</code> file and add the following line into it:</p>

<figure class='code'><figcaption><span>routes.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">match</span> <span class="s1">&#39;/search_suggestions&#39;</span><span class="p">,</span> <span class="ss">to</span><span class="p">:</span> <span class="s1">&#39;search_suggestions#index&#39;</span><span class="p">,</span> <span class="ss">via</span><span class="p">:</span> <span class="ss">:get</span>
</span><span class='line'>
</span><span class='line'><span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>This maps our <code>index</code> controller to the path we specified earlier in <code>source</code>, and our server now knows how to respond to a URL like &ldquo;/search_suggestions?term=v&rdquo;.</p>

<p>I think we’re ready for the moment of truth. Restart the rails server, type something in the search field, and if all is well with the world, you should see a drop-down menu with a list of search suggestions. If you don’t, you&rsquo;ll need to do some debugging to figure out what&rsquo;s wrong.</p>

<h1>Making It Work on a VPS</h1>

<p>Installing Redis on a VPS isn’t as easy as running <code>brew install redis</code>, but it’s not too bad. DigitalOcean has a <a href="https://www.digitalocean.com/community/articles/how-to-install-and-use-redis">nice tutorial</a> on the subject. I used it myself to get Redis installed on the server running Phindee, and it worked without a hiccup. I highly recommend it.</p>

<p>Once you have it installed, you’ll need to run the <code>index</code> task we wrote earlier to seed the database with data. If you’re using Capistrano, you can use the following task to run it from your local computer:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">desc</span> <span class="s1">&#39;Seed the redis database (search suggestions)&#39;</span>
</span><span class='line'><span class="n">task</span> <span class="ss">:seed_redis</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">within</span> <span class="s1">&#39;#{current_path}&#39;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">with</span> <span class="n">rails_env</span><span class="p">:</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">execute</span> <span class="ss">:rake</span><span class="p">,</span> <span class="s1">&#39;search_suggestions:index&#39;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you’re new to Capistrano, feel free to read through an <a href="http://vladigleba.github.io/blog/2014/04/10/deploying-rails-apps-part-6-writing-capistrano-tasks/">earlier post</a> I wrote, which explains what it is and how you can use it. Or if you’re new to deployment in general, you’re welcome to go through my <a href="http://vladigleba.github.io/blog/2014/03/05/deploying-rails-apps-part-1-securing-the-server/">6-part series</a>, which covers everything from setting up and securing a server to configuring Nginx, Unicorn, and Capistrano.</p>

<p>All right, that&rsquo;s all I have. Stay hungry. Stay foolish.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying Rails Apps, Part 6: Writing Capistrano Tasks]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2014/04/10/deploying-rails-apps-part-6-writing-capistrano-tasks/"/>
    <updated>2014-04-10T08:42:00-07:00</updated>
    <id>http://vladigleba.github.io/blog/2014/04/10/deploying-rails-apps-part-6-writing-capistrano-tasks</id>
    <content type="html"><![CDATA[<p>It’s been a long time coming, but we finally reached the point where we can deploy our app to our VPS and have it be available on the internet for viewing. We configured Capistrano in the <a href="http://vladigleba.github.io/blog/2014/04/04/deploying-rails-apps-part-5-configuring-capistrano/">previous post</a>, and now we’ll actually use it for the deploy. Just like in the previous posts, I’ll be going over how I have things setup for <a href="http://phindee.com/">Phindee</a> to help illustrate the concepts.</p>

<!-- more -->


<p>You might already know this, but Capistrano does much of its work with the help of tasks. When we previously ran <code>cap install</code>, we actually invoked a task named <code>install</code> that created various files and directories; if you’re interested, you can see its code <a href="https://github.com/capistrano/capistrano/blob/master/lib/capistrano/tasks/install.rake">on GitHub</a>. Similarly, we can write our own tasks to help us automate various things.</p>

<p>When I was deploying Phindee, I created a file called <code>setup.rake</code> inside the app’s local <code>/lib/capistrano/tasks</code> directory. Go ahead and do the same for your app, and add the following code into it:</p>

<figure class='code'><figcaption><span>setup.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:setup</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Upload database.yml file.&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:upload_yml</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">execute</span> <span class="s2">&quot;mkdir -p </span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config&quot;</span>
</span><span class='line'>      <span class="n">upload!</span> <span class="no">StringIO</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="s2">&quot;config/database.yml&quot;</span><span class="p">)),</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">shared_path</span><span class="si">}</span><span class="s2">/config/database.yml&quot;</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Seed the database.&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:seed_db</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">within</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">&quot;</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">with</span> <span class="n">rails_env</span><span class="p">:</span> <span class="ss">:production</span> <span class="k">do</span>
</span><span class='line'>          <span class="n">execute</span> <span class="ss">:rake</span><span class="p">,</span> <span class="s2">&quot;db:seed&quot;</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Symlinks config files for Nginx and Unicorn.&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:symlink_config</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">execute</span> <span class="s2">&quot;rm -f /etc/nginx/sites-enabled/default&quot;</span>
</span><span class='line'>
</span><span class='line'>      <span class="n">execute</span> <span class="s2">&quot;ln -nfs </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/config/nginx.conf /etc/nginx/sites-enabled/</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:application</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="n">execute</span> <span class="s2">&quot;ln -nfs </span><span class="si">#{</span><span class="n">current_path</span><span class="si">}</span><span class="s2">/config/unicorn_init.sh /etc/init.d/unicorn_</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:application</span><span class="p">)</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first thing you’ll notice is we’re organizing all of the tasks here under a namespace called <code>:setup</code>. It’s not strictly necessary, but I just like to keep things organized. If the code seems overwhelming, don’t worry&mdash;I’ll explain everything.</p>

<h1>Uploading Database Info</h1>

<p>We’ll get a feel for how tasks work and what they’re capable of doing by running the first task in this file, which will simply upload our <code>database.yml</code> file to our server. But before we run it, we first need to add <code>database.yml</code> to our <code>.gitignore</code> file to let Git know we don’t want it tracked and uploaded to GitHub from now on. Why? Because we’ll be adding our database password into it, and it’s generally not a good idea to upload passwords to your GitHub repository. Below is how my <code>.gitignore</code> file looks like (it&rsquo;s usually located in your app&rsquo;s root directory, but if it&rsquo;s not there, go ahead and create it):</p>

<figure class='code'><figcaption><span>.gitignore</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'># Ignore bundler config.
</span><span class='line'>/.bundle
</span><span class='line'>
</span><span class='line'># Ignore the default SQLite database.
</span><span class='line'>/db/*.sqlite3
</span><span class='line'>/db/*.sqlite3-journal
</span><span class='line'>
</span><span class='line'># Ignore log, doc, and tmp directories
</span><span class='line'>/log/*.log
</span><span class='line'>/tmp
</span><span class='line'>/doc
</span><span class='line'>
</span><span class='line'># Ignore .DS_Store files on Mac
</span><span class='line'>.DS_Store
</span><span class='line'>
</span><span class='line'># Ignore database.yml file to prevent password leakage
</span><span class='line'>/config/database.yml
</span></code></pre></td></tr></table></div></figure>


<p>You can see that in addition to ignoring the <code>database.yml</code> file, I’m also ignoring lots of other files as well, especially the annoying <code>.DS_Store</code> files that the Mac OS loves to create.</p>

<p>With that out of the way, we can now safely open up <code>database.yml</code> and add our database parameters to the file&rsquo;s production section. We’ll only need to modify the <code>database</code>, <code>username</code>, and <code>password</code> keys, and everything else can be left the way it is. Make sure you set these to the database name, username, and password you created in <a href="http://vladigleba.github.io/blog/2014/03/14/deploying-rails-apps-part-2-setting-up-the-server/">part 2</a>.</p>

<p>Then run the following command inside your app’s local root directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cap production setup:upload_yml
</span></code></pre></td></tr></table></div></figure>


<p>This tells Capistrano to execute the <code>upload_yml</code> task inside the <code>setup</code> namespace using the <code>production.rb</code> file configurations. (If we had the <code>stage.rb</code> file setup, we could’ve ran <code>cap stage setup:upload_yml</code> to execute this task on our staging environment instead.) We can verify that the command uploaded the <code>database.yml</code> file to our server by logging in and outputting the contents of the file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cat /var/www/phindee/shared/config/database.yml
</span></code></pre></td></tr></table></div></figure>


<p>This is obviously a trivial task, but it shows how powerful Capistrano can be. A few keystrokes allowed us to create a specific directory structure on our server and upload a file from our local computer. Neat stuff&mdash;and it will only get better.</p>

<p>All right, let’s now switch gears and learn about the syntax that made all of this possible.</p>

<h1>Understanding SSHKit</h1>

<p>Capistrano 3 uses the Rake DSL (Domain Specific Language), which means if you ever wrote Rake tasks, you&rsquo;ll be in familiar territory when writing Capistrano tasks; the only new thing you&rsquo;ll need to learn about is SSHKit and the various methods it provides. <a href="https://github.com/capistrano/sshkit">SSHKit</a> was actually developed and released with Capistrano 3, and it’s basically a lower-level tool that provides methods for connecting and interacting with remote servers; it does all the heavy lifting for Capistrano, in other words. There are four main methods you need to know about:</p>

<ul>
<li><code>on()</code>: specifies the server to run on</li>
<li><code>within()</code>: specifies the directory path to run in</li>
<li><code>as()</code>: specifies the user to run as</li>
<li><code>with()</code>: specifies the environment variables to run with</li>
</ul>


<p>Typically, you’ll start a task by using an <code>on()</code> method to specify the server on which you want your commands to run. Then you can use any combination of <code>as()</code>, <code>within()</code>, and <code>with()</code> methods, which are repeatable and stackable in any order, to provide additional details. For example, the <code>upload_yml</code> task we ran in <code>setup.rake</code> uses the <code>on()</code> method to specify that the resulting block of code should only be run on the application server. The <code>seed_db</code> task right below it has <em>three</em> parameters that specify how the resulting statement will run; it uses <code>on()</code>, <code>within()</code>, and <code>with()</code> to specify that the statement should only run <em>on</em> the application server, <em>within</em> the path specified, and <em>with</em> certain environment variables set.</p>

<p>Obviously, if SSHKit gives you methods to specify certain parameters that must be met before the actual statements are run, it should also give you methods to help you run those statements. That’s exactly what it does, and below are those methods:</p>

<ul>
<li><code>execute()</code>: the workhorse that runs the commands on your server</li>
<li><code>upload()</code>: uploads a file from your local computer to your remote server</li>
<li><code>capture()</code>: executes a command and returns its output as a string</li>
<li><code>puts()</code>: writes the output returned by <code>capture()</code> to the screen</li>
<li><code>background()</code>: runs a command in the background</li>
<li><code>test()</code>: can be used for control flow since it works like the <code>test</code> command-line utility in Unix and returns false if its expression exits with a non-zero value</li>
</ul>


<p>Armed with this knowledge, we’re now better equipped to understand the three tasks in <code>setup.rake</code>.</p>

<h1>Task Walk-Through</h1>

<p>The <code>upload_yml</code> task, for example, is run on the application server only, and its first statement uses the <code>execute()</code> method to run <code>mkdir -p</code>, which creates the following directory structure inside <code>/var</code>, if it doesn’t already exist:</p>

<pre><code>├── www
  └── phindee
    └── shared
      └── config
</code></pre>

<p>The <code>shared_path</code> variable evaluates to <code>/var/www/phindee/shared</code>, since it takes the path we specified in <code>deploy_to</code> and appends the <code>/shared</code> directory to the end of it (<a href="https://github.com/capistrano/capistrano/blob/aeab6b6a1e5c5e654f35321dcd7438a0659864d0/lib/capistrano/dsl/paths.rb#L60">see the code</a>). We then append the <code>/config</code> directory to the end of that.</p>

<p>The next statement uses <code>upload()</code> to upload our <code>database.yml</code> file to the directory we just created above. <code>File.read()</code> returns the file&rsquo;s contents as a string, which <code>StringIO.new()</code> takes and turns into a file. We then use this file as our source and <code>#{shared_path}/config/database.yml</code> as our destination. By the way, <code>upload()</code> has the bang symbol (!) because that’s how it’s defined in SSHKit, and it&rsquo;s just a convention letting us know that the method will block until it finishes.</p>

<p>The <code>seed_db</code> task does exactly what it says&mdash;seeds the database with data by running <code>rake db:seed</code>. The <code>current_path</code> variable takes the <code>deploy_to</code> path and appends <code>/current</code> to it, which will result in <code>/var/www/phindee/current</code>. This is where the seed statement will run on the application server with the <code>rails_env</code> variable set to <code>:production</code>.</p>

<p>But in order to ensure <code>rake</code> runs with the proper environment variables set, we have to use <code>rake</code> as a symbol and pass <code>db:seed</code> as a string; otherwise, the environment variables won&rsquo;t be set. This format will also be necessary whenever you’re running any other Rails-specific commands that rely on certain environment variables being set (see <a href="https://github.com/capistrano/sshkit#the-command-map">this section</a> of the SSHKit README to learn more).</p>

<p>The final <code>:symlink_config</code> task does a couple ofthings. First, it removes the default configuration file for Nginx (<code>/etc/nginx/sites-enabled/default</code>) and replaces it with a symlink to our own configuration file (<code>nginx.conf</code>). Then it also creates a symlink to our <code>unicorn_init.sh</code> script that helps us manage Unicorn, but this time inside <code>/etc/init.d</code>, which is the place where Ubuntu stores scripts for managing various services (a similar script for managing Nginx was already added there when we ran <code>apt-get</code>). Notice we’re using <code>fetch()</code> in both cases, which simply retrieves the value of a variable initialized by <code>set()</code>, to name our files after our application name.</p>

<p>These three tasks just merely scratch the surface of what’s possible, however. I recommend you take a look at SSHKit’s <a href="https://github.com/capistrano/sshkit/blob/master/EXAMPLES.md">example page</a> to learn more; I found it to be an invaluable tool in helping me better understand how all the different methods work together.</p>

<h1>Finishing Touches</h1>

<p>We’re almost ready for our deploy. There’s just one more file we need to add to <code>/lib/capistrano/tasks</code> called <code>deploy.rake</code>. Below is the code I have in mine:</p>

<figure class='code'><figcaption><span>deploy.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Makes sure local git is in sync with remote.&quot;</span>
</span><span class='line'>  <span class="n">task</span> <span class="ss">:check_revision</span> <span class="k">do</span>
</span><span class='line'>    <span class="k">unless</span> <span class="sb">`git rev-parse HEAD`</span> <span class="o">==</span> <span class="sb">`git rev-parse origin/master`</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;WARNING: HEAD is not the same as origin/master&quot;</span>
</span><span class='line'>      <span class="nb">puts</span> <span class="s2">&quot;Run `git push` to sync changes.&quot;</span>
</span><span class='line'>      <span class="nb">exit</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="sx">%w[start stop restart]</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">command</span><span class="o">|</span>
</span><span class='line'>    <span class="n">desc</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">command</span><span class="si">}</span><span class="s2"> Unicorn server.&quot;</span>
</span><span class='line'>    <span class="n">task</span> <span class="n">command</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">on</span> <span class="n">roles</span><span class="p">(</span><span class="ss">:app</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">execute</span> <span class="s2">&quot;/etc/init.d/unicorn_</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:application</span><span class="p">)</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">command</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>check_revision</code> task checks to make sure we pushed all our local changes to the remote master branch; if it finds that our local code is out of sync with the remote, the <code>exit</code> statement will cause Capistrano to quit. We&rsquo;ll want to run this task <em>before</em> Capistrano runs its own <code>deploy</code> task to make sure we don’t forget to push our local changes up to GitHub when trying to deploy.</p>

<p>The second block of code actually creates <em>three</em> separate tasks that will allow us to start, stop, and restart Unicorn from our local computer. We&rsquo;ll run the <code>restart</code> task, for example, after Capistrano finishes its deploy so Unicorn picks up the new code. (Note that I created a namespace called <code>deploy</code> to contain these tasks since that&rsquo;s what they&rsquo;re related to.)</p>

<p>But how do we tell Capistrano to run these tasks as part of its deploy? Well, Capistrano provides two callback functions called <code>before()</code> and <code>after()</code> to help us out, and the code below illustrates how it&rsquo;s done (add it to the end of your <code>deploy.rake</code> file):</p>

<figure class='code'><figcaption><span>deploy.rake</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:deploy</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">before</span> <span class="ss">:deploy</span><span class="p">,</span> <span class="s2">&quot;deploy:check_revision&quot;</span>
</span><span class='line'>  <span class="n">after</span> <span class="ss">:deploy</span><span class="p">,</span> <span class="s2">&quot;deploy:restart&quot;</span>
</span><span class='line'>  <span class="n">after</span> <span class="ss">:rollback</span><span class="p">,</span> <span class="s2">&quot;deploy:restart&quot;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&rsquo;re first using <code>before()</code> to tell Capistrano to run our <code>check_revision</code> task before it runs its own <code>deploy</code> task. Then we use <code>after()</code> to make sure Capistrano restarts Unicorn after a <code>deploy</code>. Finally, we do the same thing after a <code>rollback</code> task, which is a task that simply allows you to rollback to the previous deploy if you don&rsquo;t like the current one, for whatever reason, and it&rsquo;s invoked by running <code>cap production deploy:rollback</code>. Of course, we could use these callbacks with <em>any</em> task to run <em>any other</em> task, and this is powerful because it allows us to reuse and extend our code in different ways.</p>

<p>I&rsquo;d like to point out that we&rsquo;re using the callbacks inside a namespace to make sure Capistrano knows which tasks the callbacks are referencing. This way Capistrano will know to run the <code>deploy</code> task, for example, that&rsquo;s defined in its own <code>deploy</code> namespace, and not some other task with an identical name defined somewhere else.</p>

<p>What we now have is our own custom recipe (a Capistrano term meaning a series of tasks) for deployment. You can similarly write multiple other recipes to help you automate any other tedious work you find yourself doing over and over again.</p>

<p>All right, having all the necessary tasks defined, we can go ahead and push our code up to GitHub so Capistrano can deploy the latest changes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>git add .
</span><span class='line'>git commit -m <span class="s2">&quot;message&quot;</span>
</span><span class='line'>git push origin master
</span></code></pre></td></tr></table></div></figure>


<p>We’re now ready to deploy.</p>

<h1>Show Time</h1>

<p>This is a moment that was a long time coming. Let’s see what happens:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cap production deploy
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s likely that you encountered some type of error before the task was able to finish. This is normal&mdash;something always goes wrong the first time you deploy (if everything went smoothly, on the other hand, you deserve a place in the Capistrano hall of fame). Capistrano configurations are specific to your setup/environment, and what worked for me may not necessarily work for you. The best advice I can give is to google the specific problem you’re having, and it’s likely you&rsquo;ll find someone who struggled with the same thing and already provided a possible solution for you.</p>

<h2>Breaking It Down</h2>

<p>A lot of things happened when we ran <code>cap production deploy</code>. If you do an <code>ls</code> on your <code>deploy_to</code> directory, for example, you’ll find four new directories there:</p>

<ul>
<li><code>/releases</code>: whenever you deploy, a new directory will be created here containing all the code for that deploy</li>
<li><code>/current</code>: a symlink pointing to the latest directory in <code>/releases</code></li>
<li><code>/shared</code>: holds files and directories that persist throughout deploys</li>
<li><code>/repo</code>: contains a clone of your <code>.git</code> repo</li>
</ul>


<p>With regards to the directories in <code>/shared</code>, the main ones you need to know about are:</p>

<ul>
<li><code>/config</code>: contains our <code>database.yml</code> file</li>
<li><code>/log</code>: contains the <code>production.log</code> and <code>unicorn.log</code> files (see <code>/var/log/nginx/error.log</code> for the Nginx log file)</li>
<li><code>/public/assets</code>: contains all your assets</li>
<li><code>/tmp/pids</code>: will contain a <code>unicorn.pid</code> file that stores the process ID of Unicorn’s master process (when it&rsquo;s running)</li>
</ul>


<p>When you run <code>cap production deploy</code>, you’re actually calling a Capistrano task called <code>deploy</code>, which then sequentially invokes other tasks. The main ones are listed below:</p>

<ol>
<li><code>starting</code>: creates the directory structure and checks that the GitHub repository is reachable</li>
<li><code>updating</code>: copies the GitHub repository to a new <code>/releases</code> directory, adds symlinks pointing to <code>/shared</code>, runs Bundler, runs migrations, and compiles assets</li>
<li><code>publishing</code>: symlinks the <code>/current</code> directory to the new <code>/releases</code> directory</li>
<li><code>finishing</code>: removes old <code>/releases</code> directories</li>
</ol>


<p>If you run <code>cap -T</code>, you’ll see all these tasks listed, along with some other tasks that Capistrano runs during a deploy (see the <a href="http://capistranorb.com/documentation/getting-started/flow/">documentation</a> to learn when they&rsquo;re run). The tasks we defined ourselves will also be listed there, along with their descriptions.</p>

<p>Now that our code is deployed, we can run the two other tasks in <code>deploy.rb</code>. If you have a seed file for seeding your database, you can run <code>cap production setup:seed_db</code> to invoke it; otherwise, you&rsquo;ll need to run <code>cap production setup:symlink_config</code> to symlink your config files.</p>

<h1>Wrapping Up</h1>

<p>One last thing we have left to do is add our symlinked Unicorn script (the one in <code>/etc/init.d</code>) to Ubunut’s startup scripts to make sure Unicorn will automatically start up whenever we restart our VPS. We can do this easily using the <code>update-rc.d</code> utility; we just need to give it a name of a file in <code>/etc/init.d</code>, and it&rsquo;ll automatically add it to the correct startup folders. Below is the command that does this (be sure to change <code>unicorn_phindee</code> to the name of your own script):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo update-rc.d unicorn_phindee defaults
</span></code></pre></td></tr></table></div></figure>


<p>This was already done automatically, by the way, for Nginx and PostgreSQL when we installed them with <code>apt-get</code> in part 2, which means that whenever we restart our VPS, these services will be restarted automatically as well.</p>

<p>Once that’s done, I’ll log in to my VPS and restart Nginx (so it picks up the <code>nginx.conf</code> file we symlinked). Then I’ll start Unicorn by calling <code>start</code> on the <code>unicorn_phindee</code> script (be sure to use your own file name):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo service nginx restart
</span><span class='line'>/etc/init.d/unicorn_phindee start
</span></code></pre></td></tr></table></div></figure>


<p>If you now open up your favorite browser (I hope it&rsquo;s not Internet Explorer) and type your server’s IP address into the address bar, you might see your app; if you you don&rsquo;t, don&rsquo;t worry. Deployment is hard and takes a while to sink in. If things aren’t working, your best bet is to start with the logs and google any errors you find there.</p>

<p>But the most important thing is to not get discouraged. When I set up my production server from scratch for the very first time, it took me a <em>full week</em> (I’m not kidding) to get it working. It was frustrating, discouraging, and is the reason why I decided to write this series, because I didn’t want other people going through the same thing. It doesn&rsquo;t have be that way though, and I hope it won&rsquo;t be.</p>

<p>(If you enjoyed this series, you might also like the <a href="http://vladigleba.github.io/blog/topics/chef-series/">&ldquo;Provisioning a Rails Server Using Chef&rdquo; series</a>, which explains how you can use Chef to automate your entire server setup.)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying Rails Apps, Part 5: Configuring Capistrano]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2014/04/04/deploying-rails-apps-part-5-configuring-capistrano/"/>
    <updated>2014-04-04T07:36:00-07:00</updated>
    <id>http://vladigleba.github.io/blog/2014/04/04/deploying-rails-apps-part-5-configuring-capistrano</id>
    <content type="html"><![CDATA[<p>In the previous four posts, I covered how I went about setting up my server for Phindee and how I configured Unicorn and Nginx. Here in part 5, I will now talk about how I configured Capistrano to actually deploy Phindee.</p>

<!-- more -->


<p>If you’re not familiar with it, <a href="http://capistranorb.com/">Capistrano</a> is the de-facto deployment tool for Rails apps; it makes deployment easier by automating a lot of the work for you, and it can be easily customized to suit your particular needs. If you’ve never used it before, I hope this post will give you a taste of what it can do.</p>

<p>By the way, I’ll be using version 3, which came out last summer; it’s a complete rewrite that ended up reducing Capistrano’s footprint to just 700 lines of code! If you’re coming from version 2, I recommend reading <a href="https://semaphoreapp.com/blog/2013/11/26/capistrano-3-upgrade-guide.html">this post</a> to learn about the differences.</p>

<p>One of the ways the core team was able to keep it so lean was by breaking framework-specific tasks into separate gems, which means that in addition to installing the Capistrano gem itself, we’ll need to install Rails-specific gems as well. Here is what you should add to your <code>Gemfile</code>:</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span><span class='line'>
</span><span class='line'><span class="n">group</span> <span class="ss">:development</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 3.2.1&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano-rails&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.1.1&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano-bundler&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 1.1.2&#39;</span>
</span><span class='line'>  <span class="n">gem</span> <span class="s1">&#39;capistrano-rbenv&#39;</span><span class="p">,</span> <span class="s1">&#39;~&gt; 2.0.2&#39;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since we’ll only be using Capistrano in development, we put all the gems in the <code>:development</code> group. Note that we added Rails-specific tasks through the <code>capistrano-rails</code> gem, Bundler-specific tasks through the <code>capistrano-bundler</code> gem, and rbenv-specific tasks through the <code>capistrano-rbenv</code> gem.</p>

<p>We can install them by running <code>bundle</code> in the root directory of our Rails app. After Bundler finishes the install, we’ll tell Capistrano to create the necessary files it needs to do its job by running the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>cap install
</span></code></pre></td></tr></table></div></figure>


<p>One of the files this created is called <code>Capfile</code>, which will be located in the root directory of your Rails app. It&rsquo;ll contain various <code>require</code> statements to load the necessary code that Capistrano will need to do its job. We’ll open it up and uncomment the following lines to load the gems we just installed:</p>

<figure class='code'><figcaption><span>Capfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rails&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/bundler&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;capistrano/rbenv&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You’ll also see the following line at the end of the file:</p>

<figure class='code'><figcaption><span>Capfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Dir</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s1">&#39;lib/capistrano/tasks/*.rake&#39;</span><span class="p">)</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">r</span><span class="o">|</span> <span class="n">import</span> <span class="n">r</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This will load any custom tasks from <code>lib/capistrano/tasks</code>, which we will later define.</p>

<h1>Roll up Your Sleeves</h1>

<p>One cool thing about Capistrano is it’s designed to work with different deployment scenarios. You could, for example, have both a production server running your “live” application and a staging server meant for testing newly developed features before they’re pushed to the production server. In other words, you’d have two deployment stages: production and staging. When we ran <code>cap install</code>, Capistrano actually already created the necessary files for this; they’re located inside the <code>/config/deploy</code> directory and are named <code>production.rb</code> and <code>staging.rb</code>, respectively. We’ll use them to define stage-specific configurations, while configurations that are meant to be shared across all stages will be set in <code>config/deploy.rb</code>, and that’s where we’ll start first.</p>

<h2>General Configuration</h2>

<p>Below is how my <code>deploy.rb</code> file looks like for Phindee:</p>

<figure class='code'><figcaption><span>deploy.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">lock</span> <span class="s2">&quot;3.2.1&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:application</span><span class="p">,</span> <span class="s2">&quot;phindee&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:repo_url</span><span class="p">,</span> <span class="s2">&quot;git@github.com:vladigleba/phindee.git&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_to</span><span class="p">,</span> <span class="s2">&quot;/var/www/</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:application</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:deploy_user</span><span class="p">,</span> <span class="s2">&quot;bob&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:rbenv_type</span><span class="p">,</span> <span class="ss">:user</span> <span class="c1"># or :system, depends on your rbenv setup</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rbenv_ruby</span><span class="p">,</span> <span class="s2">&quot;2.1.0&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rbenv_prefix</span><span class="p">,</span> <span class="s2">&quot;RBENV_ROOT=</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:rbenv_path</span><span class="p">)</span><span class="si">}</span><span class="s2"> RBENV_VERSION=</span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:rbenv_ruby</span><span class="p">)</span><span class="si">}</span><span class="s2"> </span><span class="si">#{</span><span class="n">fetch</span><span class="p">(</span><span class="ss">:rbenv_path</span><span class="p">)</span><span class="si">}</span><span class="s2">/bin/rbenv exec&quot;</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rbenv_map_bins</span><span class="p">,</span> <span class="sx">%w{rake gem bundle ruby rails}</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rbenv_roles</span><span class="p">,</span> <span class="ss">:all</span> <span class="c1"># default value</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:linked_files</span><span class="p">,</span> <span class="sx">%w{config/database.yml}</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:linked_dirs</span><span class="p">,</span> <span class="sx">%w{bin log tmp/pids tmp/cache tmp/sockets vendor/bundle public/system}</span>
</span><span class='line'>
</span><span class='line'><span class="n">set</span> <span class="ss">:keep_releases</span><span class="p">,</span> <span class="mi">5</span>
</span></code></pre></td></tr></table></div></figure>


<p>The very first line locks the configurations in this file to Capistrano 3.1, and if you have any other version installed, the file won’t run. (This is designed to help prevent configurations from braking between version updates.)</p>

<p>Next, we’re using the <code>set()</code> function to initialize the <code>:application</code> variable to “phindee.” (We’ll retrieve this variable’s value later using the corresponding <code>fetch()</code> function.) We’re also setting the <code>:repo_url</code> variable to the URL of the GitHub repository containing your code so Capistrano  knows where to look when we deploy. By the way, if your code is on a branch other than “master,” you’ll need to specify its name by adding <code>set :branch, “branch-name”</code>; otherwise, this is not needed because Capistrano sets it to “master” by default.</p>

<p>The next line sets the <code>:deploy_to</code> variable to the path where you want Capistrano storing the code it downloads from GitHub. This should be the same path you previously set in <code>unicorn.rb</code>, but without the <code>/current</code> directory appended to it. This is because <code>/current</code> represents the directory with the latest deploy code, while Capistrano is interested in the general app directory.</p>

<p><code>:deploy_user</code> is then set to the user Capistrano will be deploying as, and this should match the user you created when you setup your server in <a href="http://vladigleba.github.io/blog/2014/03/05/deploying-rails-apps-part-1-securing-the-server/">part 1</a>.</p>

<p>The next few lines set variables needed by rbenv, and I actually copied and pasted these lines from the <code>capistrano-rbenv</code> <a href="https://github.com/capistrano/rbenv">README file</a>. The key variable here is <code>:rbenv_ruby</code>, which sets the Ruby version that rbenv installed on your machine, and you can run <code>ls ~/.rbenv/versions</code> in the command line to find which version that is. If this is not set correctly, the deploy will fail.</p>

<p>The other variable worth mentioning here is <code>:rbenv_type</code>. We could set it to <code>:system</code> if rbenv was installed system-wide on our machine, but since we installed rbenv on a per-user basis inside <code>~/.rbenv</code>, we&rsquo;re setting it to <code>:user</code>. System-wide installs can lead to problems with permissions, and it’s generally cleaner to just do a per-user install. The other three variables don’t need to be modified, and you can leave them the way they are.</p>

<p>Moving on, we’re setting the <code>:linked_files</code> variable to an array of strings initialized to <code>config/database.yml</code>. This tells Capistrano to store our app’s <code>config/database.yml</code> file inside a directory called <code>/shared</code>, which is meant for any files we want to persist between deploys. Since the contents of <code>database.yml</code> won’t change between deploys, it’s a good idea to store it there.</p>

<p>Similarly, <code>:linked_dirs</code> contains <em>directories</em> that are meant to persist between deploys, and they too will be stored inside <code>/shared</code>. These include directories containing things like log files, Unicorn sockets, and <code>.pid</code> files that will all stay the same between deploys.</p>

<p>And finally, <code>:keep_releases</code> tells Capistrano to only keep the last 5 deploys and discard everything else. This can be useful whenever you need to rollback to a previous release, but you also don&rsquo;t want releases piling up, so it&rsquo;s best not to set this number too high.</p>

<h2>Stage-Specific Configuration</h2>

<p>Now that <code>deploy.rb</code> is configured, we’ll move on to defining stage-specific configurations. Since I currently don’t have a separate environment for staging, I’ll only be going over the <code>config/deploy/production.rb</code> file, and you can just leave <code>staging.rb</code> the way it is by default. Below is how my <code>production.rb</code> file looks like:</p>

<figure class='code'><figcaption><span>production.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">set</span> <span class="ss">:stage</span><span class="p">,</span> <span class="ss">:production</span>
</span><span class='line'><span class="n">set</span> <span class="ss">:rails_env</span><span class="p">,</span> <span class="ss">:production</span>
</span><span class='line'>
</span><span class='line'><span class="n">server</span> <span class="s1">&#39;xxx.xxx.xxx.xxx&#39;</span><span class="p">,</span> <span class="ss">user</span><span class="p">:</span> <span class="s1">&#39;bob&#39;</span><span class="p">,</span> <span class="ss">port</span><span class="p">:</span> <span class="mi">12345</span><span class="p">,</span> <span class="ss">roles</span><span class="p">:</span> <span class="sx">%w{web app db}</span><span class="p">,</span> <span class="ss">primary</span><span class="p">:</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>As you can see, there isn’t much going on here. We’re first setting the <code>:stage</code> variable to <code>:production</code> to let Capistrano know that this file is meant for production. We’re also setting the <code>:rails_env</code> variable to the same thing to make sure Rails runs in the production environment. But the key line is the last line, which tells Capistrano how to access our VPS server. Make sure you replace the Xs with the IP address of the server you setup in part 1, along with the user and port number it&rsquo;s set up with.</p>

<p>We’re then using the <code>:roles</code> variable to let Capistrano know that our database server (PostgreSQL) represented by <code>db</code>, web server (Nginx) represented by <code>web</code>, and application server (Unicorn) represented by <code>app</code> all run on the same machine. Apps with lots of traffic, on the other hand, might have multiple separate physical servers for each of these. Setting <code>:primary</code> to <code>true</code> then tells Capistrano that this is our primary database server, and Capistrano will run migrations only on the one we designate as <code>:primary</code>. Even if we’re running all our servers on the same physical machine, setting <code>:primary</code> is still necessary.</p>

<h1>Enabling Agent Forwarding</h1>

<p>Now that Capistrano knows how to access our VPS, we need to make sure it can also access our code on GitHub. We’ll be using agent forwarding to allow us to reuse the local key we generated in part 1 to authenticate with GitHub. In order for this to work, we’ll need to add the key to GitHub, and you can do so by following step 3 on <a href="https://help.github.com/articles/generating-ssh-keys#step-3-add-your-ssh-key-to-github">this GitHub page</a>.</p>

<p>To enable agent forwarding in Capistrano 2, you had explicitly set it in <code>deploy.rb</code>, but in Capistrano 3, it’s already taken care of and enabled by default. The only thing we have left to do is log in to our VPS and run the following command to add github.com to the list of known hosts; this ensures Capistrano won’t have any problems with it being unknown when it tries downloading your code from GitHub to your server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh git@github.com
</span></code></pre></td></tr></table></div></figure>


<p>You’ll get a warning asking if you’re sure you want to continue connecting. Verify that the key fingerprint matches the one you just added to GitHub, and enter “yes”. If you get an “access denied” message, see <a href="https://help.github.com/articles/error-permission-denied-publickey">this page</a> for potential solutions. If you’re experiencing some other agent forwarding problems, <a href="https://help.github.com/articles/using-ssh-agent-forwarding#troubleshooting">this page</a> might help you out.</p>

<h1>Setting Permissions</h1>

<p>If you look at <code>deploy.rb</code>, you’ll notice I set the <code>:deploy_to</code> variable to “/var/www/phindee,” but on my VPS, the <code>/var</code> directory doesn’t yet contain the <code>/www</code> directory. That’s not a problem since Capistrano will create it for me through the user <code>bob</code>, as specified in <code>deploy.rb</code>, but it needs write permissions to do so.</p>

<p>If you read <a href="http://vladigleba.github.io/blog/2014/03/05/deploying-rails-apps-part-1-securing-the-server/">part 1</a>, you’ll remember we created a group called <code>deployers</code> to contain users with deployment privileges and added the user <code>bob</code> into it. This means we can give the necessary permissions <code>bob</code> will need by simply giving them to <code>deployers</code>, and since <code>bob</code> is a member of the group, he will automatically inherit them.</p>

<p>I’m already logged in to my VPS as <code>bob</code>, and I can change the <code>/var</code> directory’s group to <code>deployers</code> with the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chgrp deployers /var
</span></code></pre></td></tr></table></div></figure>


<p>We can then give this group write permissions so its members can create directories within <code>/var</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chmod g+w /var
</span></code></pre></td></tr></table></div></figure>


<p>There are two other places where we need to repeat this process. The first is the <code>/etc/nginx/sites-enabled</code> directory, which Nginx uses to store its configuration files, and this is where our <code>config/nginx.conf</code> file that we created in <a href="http://vladigleba.github.io/blog/2014/03/27/deploying-rails-apps-part-4-configuring-nginx/">part 4</a> will go. But we actually won’t be storing the file itself there; we’ll create a symlink to it, instead. This will make our deploys easier to manage because we won’t need to add our <code>nginx.conf</code> file to the <code>/etc/nginx/sites-enabled</code> directory <em>every</em> time we deploy. We can simply symlink it since Capistrano will always store our latest deploy code in the same place (<code>/var/www/phindee/current</code>).</p>

<p>Same thing is needed for the <code>config/unicorn_init.sh</code> file from <a href="http://vladigleba.github.io/blog/2014/03/21/deploying-rails-apps-part-3-configuring-unicorn/">part 3</a>. We’ll need to create a symlink inside <code>/etc/init.d</code>, since that’s the directory Linux uses to store all the shell scripts used to manage the various services installed on the system. When we installed Nginx in <a href="http://vladigleba.github.io/blog/2014/03/14/deploying-rails-apps-part-2-setting-up-the-server/">part 2</a>, for example, a shell script was automatically installed there to help us manage Nginx, and it will be invoked whenever we run a command like <code>sudo service nginx restart</code>. There is nothing like this for Unicorn yet, which is why we need to create a symlink to our <code>unicorn_init.sh</code> script to give us similar functionality.</p>

<p>In order for Capistrano to create symlinks, it needs write permissions in the relevant directories. We can give them with the following commands:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo chgrp deployers /etc/nginx/sites-enabled
</span><span class='line'>sudo chmod g+w /etc/nginx/sites-enabled
</span><span class='line'>
</span><span class='line'>sudo chgrp deployers /etc/init.d
</span><span class='line'>sudo chmod g+w /etc/init.d
</span></code></pre></td></tr></table></div></figure>


<p>And now Capistrano should have the necessary permissions to do its work.</p>

<p>Having Capistrano configured, we’re ready to move on and start writing custom tasks to help us deploy our code, and that’s exactly what we’ll do in the <a href="http://vladigleba.github.io/blog/2014/04/10/deploying-rails-apps-part-6-writing-capistrano-tasks/">next and last post</a> of this series. If you want to be notified when it’s out, feel free to <a href="http://www.feedblitz.com/f/?Sub=927939&amp;cids=1">subscribe</a>, and you&rsquo;ll get it delivered to your inbox as soon as it’s released.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying Rails Apps, Part 4: Configuring Nginx]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2014/03/27/deploying-rails-apps-part-4-configuring-nginx/"/>
    <updated>2014-03-27T12:50:00-07:00</updated>
    <id>http://vladigleba.github.io/blog/2014/03/27/deploying-rails-apps-part-4-configuring-nginx</id>
    <content type="html"><![CDATA[<p>I talked about how I configured Unicorn for <a href="http://phindee.com/">Phindee</a> in <a href="http://vladigleba.github.io/blog/2014/03/21/deploying-rails-apps-part-3-configuring-unicorn/">part 3</a>, and now I&rsquo;ll cover how I configured Nginx. While Unicorn will handle requests for pages dynamically generated by Rails, Nginx will handle requests for static assets, like stylesheets, scripts, images, and fonts. If you’re wondering why I chose Nginx over Apache, see <a href="http://vladigleba.github.io/blog/2014/03/14/deploying-rails-apps-part-2-setting-up-the-server/">part 2</a> for the explanation.</p>

<!-- more -->


<p>All right, since there is quite a bit to cover, we’ll jump right in. We’ll start by creating a file called <code>nginx.conf</code> inside our app’s <code>/config</code> directory on our local computer. Here’s how mine looks like:</p>

<figure class='code'><figcaption><span>nginx.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='nginx'><span class='line'><span class="k">upstream</span> <span class="s">unicorn</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">server</span> <span class="s">unix:/tmp/unicorn.phindee.sock</span> <span class="s">fail_timeout=0</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">server</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">server_name</span> <span class="s">www.phindee.com</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">return</span> <span class="mi">301</span> <span class="nv">$scheme://phindee.com$request_uri</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">server</span> <span class="p">{</span>
</span><span class='line'>  <span class="kn">listen</span> <span class="mi">80</span> <span class="s">default</span> <span class="s">deferred</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">server_name</span> <span class="s">phindee.com</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">root</span> <span class="s">/var/www/phindee/current/public</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'> <span class="kn">location</span> <span class="s">^~</span> <span class="s">/assets/</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">gzip_static</span> <span class="no">on</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">expires</span> <span class="s">max</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">add_header</span> <span class="s">Cache-Control</span> <span class="s">public</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">try_files</span> <span class="nv">$uri/index.html</span> <span class="nv">$uri</span> <span class="s">@unicorn</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">location</span> <span class="s">@unicorn</span> <span class="p">{</span>
</span><span class='line'>    <span class="kn">proxy_set_header</span> <span class="s">X-Forwarded-For</span> <span class="nv">$proxy_add_x_forwarded_for</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">proxy_set_header</span> <span class="s">Host</span> <span class="nv">$http_host</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">proxy_redirect</span> <span class="no">off</span><span class="p">;</span>
</span><span class='line'>    <span class="kn">proxy_pass</span> <span class="s">http://unicorn</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kn">error_page</span> <span class="mi">500</span> <span class="mi">502</span> <span class="mi">503</span> <span class="mi">504</span> <span class="s">/500.html</span><span class="p">;</span>
</span><span class='line'>  <span class="kn">keepalive_timeout</span> <span class="mi">10</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nginx has a master process managing all the workers, just like Unicorn, which are responsible for processing requests from clients. Unlike Unicorn, Nginx also has a cache loader process that checks and/or populates the cache with metadata, as well a cache manager process that’s responsible for cache expiration. Together, they keep Nginx internals running quickly and efficiently.</p>

<h1>A Bit on Workers</h1>

<p>If you log in to your VPS and <code>cd</code> into <code>/etc/nginx</code>, you&rsquo;ll find a file called <code>nginx.conf</code>. This is the main Nginx configuration file that Nginx will parse when it runs, and it&rsquo;s the place where you can modify the number of workers available to process requests. You can do this by modifying the <code>worker_processes</code> directive defined at the top of the file. It&rsquo;s set to four workers by default, but I changed mine to one because that&rsquo;s more than enough for a low-traffic app. It&rsquo;s also possible to modify the number of connections a worker can accept by modifying the <code>worker_connections</code> directive inside the <code>events</code> block; I changed mine to 1024 connections.</p>

<p>This means that given our current configuration, our server will be able to accept a total of 1024 simultaneous connections. If you want to increase this, it’s generally best to increase the <code>worker_connections</code> value before increasing the number of workers. (Remember, each worker is a single-threaded process, so whenever you increase the number of workers, you’re also increasing the total amount of memory that will be used.) But having one worker process that’s capable of handling 1024 connections is more than enough for a low-traffic app.</p>

<p>By the way, if you&rsquo;re wondering how our own <code>nginx.conf</code> file we created above will get executed, <code>/etc/nginx/nginx.conf</code> already has an <code>include</code> directive inside the <code>http</code> block that will automatically include any files in the <code>/etc/nginx/sites-enabled</code> directory, and that&rsquo;s the place where we will put our own <code>nginx.conf</code> file when it&rsquo;s time to deploy.</p>

<h1>Hooking up with Unicorn and Handling Redirects</h1>

<p>Since Nginx is not capable of handling requests for pages that are dynamically generated by Rails, we need to tell it to somehow pass such requests off to Unicorn. We’ll take the first step to accomplishing this by defining an <code>upstream</code> block called <code>unicorn</code>, inside which we point the server to the same Unix socket that we used in our <code>unicorn.rb</code> file from <a href="http://vladigleba.github.io/blog/2014/03/21/deploying-rails-apps-part-3-configuring-unicorn/">part 3</a>. This is just the first step, however, and more work needs to be done to get this working, as you’ll see later. By the way, in case you’re wondering, setting <code>fail_timeout</code> to 0 is necessary for Nginx to correctly handle Unicorn timing out due to its worker being killed when it takes longer than 30 seconds to respond, as specified in <code>unicorn.rb</code>.</p>

<p>The <code>server</code> block right below the <code>upstream</code> block is there to redirect a request for &ldquo;www.phindee.com&rdquo; to &ldquo;phindee.com&rdquo;. The <code>server_name</code> directive specifies the URL we’re redirecting from, while the <code>return</code> directive specifies where to redirect to. (Notice we’re returning a 301 status code to specify a permanent redirection.) The <code>$scheme</code> variable stores the HTTP scheme (i.e. http, https), while <code>$request_uri</code> stores the unmodified URI of a client request, which includes the arguments, but not the host name (e.g. &ldquo;/foo/bar.php?arg=baz&rdquo;).</p>

<h1>Where the Meat Is</h1>

<p>The next <code>server</code> block contains the main configuration. The <code>listen</code> directive inside it tells Nginx to listen on port 80, and the <code>server_name</code> directive right below specifies the domain name that Nginx will try to match, which is &ldquo;phindee.com&rdquo; in my case.</p>

<p>Specifying <code>default</code> in the <code>listen</code> directive, by the way, tells Nginx to use this server block by default if it can’t find a matching domain name, which means I could technically leave out the <code>server_name</code> directive completely, and everything would still work because of <code>default</code>, but I like to leave it in for readability. And finally, I added the <code>deferred</code> option since I’m running this on Linux, which tells Nginx to use the <code>TCP_DEFER_ACCEPT</code> option to <a href="http://www.techrepublic.com/article/take-advantage-of-tcp-ip-options-to-optimize-data-transmission/">speed up performance</a> by reducing the amount of preliminary work that happens between a client and the server.</p>

<p>Moving along, the <code>root</code> directive specifies the directory in which Nginx will look to handle requests for static files. This is basically the directory we specified inside <code>unicorn.rb</code>, except it has an additional <code>/public</code> directory appended to the end of it. It corresponds to your app’s <code>/public</code> directory on your local computer and is the place where your static files are and will reside. Currently, it only contains various error pages, a favicon, and a <code>robots.txt</code> file for search engines. When we later deploy with Capistrano, it’ll contain all our assets as well, including stylesheets, scripts, images, and fonts.</p>

<h1>Handling Asset Requests</h1>

<p>Just like the <code>server_name</code> directive handles requests for domain names, the <code>location</code> directive handles requests for specific files and folders. The caret and tilde (^~) tells Nginx to do a regular expression match on <code>/assets/</code> and to stop searching as soon as it finds a match (see the <a href="https://library.linode.com/web-servers/nginx/configuration/basic#sph_location-file-and-folder-configuration">Linode Guide</a> to learn more).</p>

<p>By setting the <code>gzip_static</code> directive to <code>on</code>, we’re then telling Nginx to look for an already pre-compressed <code>.gz</code> file <em>before</em> proceeding to compress it. This prevents Nginx from compressing the same file each time it is requested.</p>

<p>The <code>expires</code> directive then makes the response cacheable and marks it with an expiry date set to <code>max</code>, which is equivalent to December 31st, 2037. This tells browsers and any caching servers to not request these assets again until the specified date. Of course, if we make changes to our stylesheets, for example, Rails will change the filename and browsers will still receive the latest version, which will then also be cached.</p>

<p>Using the <code>expires</code> directive, however, is an outdated method of specifying caching, and it’s recommended to use <code>Cache-Control</code> header instead. The next line in the code does just that through the <code>add_header</code> directive. (The reason we include  <code>expires</code> is to make things backward-compatible.) It’s possible, by the way, to set <code>Cache-Control</code> to either <code>public</code> or <code>private</code>, and I’m setting it to <code>public</code> because we’re caching assets that are meant to be used by everybody, whereas <code>private</code> would mean they’re unique to individual users (see <a href="http://stackoverflow.com/questions/3492319/private-vs-public-in-cache-control">Stack Overflow</a> to learn more).</p>

<h1>Trying to Find a Match</h1>

<p>The next line is the <code>try_files</code> directive, which is there for requests that didn’t match with any <code>location</code> blocks. In our case, it tries to match non-asset requests. The <code>$uri</code> variable inside it contains the current request URI, minus the arguments, protocol, and host name, so if we typed in &ldquo;phindee.com/foobar&rdquo; into the address bar, the <code>$uri</code> would be &ldquo;/foobar&rdquo;, and given our <code>try_files</code> directive, Nginx would try to first match a <code>var/www/phindee/current/public/foobar/index.html</code> file. If it found no such file, it would then try to match the <code>/foobar</code> directory itself, and if that didn’t work, it would then pass the request off to Unicorn through a named location, which is defined next through the <code>location</code> directive and called <code>@unicorn</code>.</p>

<p>Inside the named location, the <code>proxy_pass</code> directive does all the heavy lifting. We set it to <code>http://unicorn</code> so that it points to the <code>upstream</code> block called <code>unicorn</code>, which we already defined, and the request is then handled by the Unicorn socket defined there. The two <code>proxy_set_header</code> directives then append additional headers needed for Unicorn, while <code>proxy_redirect</code> set to <code>off</code> prevents Nginx from doing any redirect handling. (There is a sample <code>nginx.conf</code> <a href="https://github.com/defunkt/unicorn/blob/master/examples/nginx.conf">file on GitHub</a> with comments explaining why this is necessary.)</p>

<h1>Last Few Lines</h1>

<p>All right, we’re down to the last two lines. <code>error_page</code> makes sure that our app’s <code>500.html</code> page is shown for any 500-related errors, while <code>keepalive_timeout</code> tells Nginx to retain keep-alive connections (also known as persistent connections) for up to 10 seconds and close them if they exceed that time. The main concern when choosing the amount of time is mobile devices on slow networks, but I think 10 seconds should be enough.</p>

<p>Keep-alive connections, by the way, send multiple HTTP requests in a single connection, as opposed to opening a new connection for each request; in HTTP 1.1, all connections are persistent by default, which means stylesheets, scripts, images, and fonts, for example, would all be sent using a single connection.</p>

<p>These are, of course, not all the options you can specify. If you’d like to learn about the additional ones, feel free to read through the comments in the sample <code>nginx.conf</code> <a href="https://github.com/defunkt/unicorn/blob/master/examples/nginx.conf">file</a> I mentioned earlier.</p>

<p>And that wraps up part 4. I will introduce Capistrano in the <a href="http://vladigleba.github.io/blog/2014/04/04/deploying-rails-apps-part-5-configuring-capistrano/">next post</a> and will explain how I configured it for Phindee. If you want to be notified when it’s out, feel free to <a href="http://www.feedblitz.com/f/?Sub=927939&amp;cids=1">subscribe</a>, and you&rsquo;ll get it delivered to your inbox as soon as it’s released.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying Rails Apps, Part 3: Configuring Unicorn]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2014/03/21/deploying-rails-apps-part-3-configuring-unicorn/"/>
    <updated>2014-03-21T10:08:00-07:00</updated>
    <id>http://vladigleba.github.io/blog/2014/03/21/deploying-rails-apps-part-3-configuring-unicorn</id>
    <content type="html"><![CDATA[<p>Having covered how to install the technology stack powering Phindee in <a href="http://vladigleba.github.io/blog/2014/03/14/deploying-rails-apps-part-2-setting-up-the-server/">part 2</a>, I will now shift gears and talk about how I configured Unicorn. I already explained why I chose to install Nginx, but I haven’t yet explained why I chose Unicorn, so here we go.</p>

<!-- more -->


<p><a href="http://unicorn.bogomips.org/">Unicorn</a> is an HTTP server for Ruby. It&rsquo;s designed to be used in a production environment, unlike WEBrick, which is designed for running your app on your local computer. Because it&rsquo;s fast, efficient, and offers tons of cool features, like load balancing and rolling restarts, Unicorn has become a popular production server for Rails apps.</p>

<h1>Comparing Unicorn with Passenger</h1>

<p>When I deployed Phindee for the first time, however, I actually used the open source version of <a href="https://www.phusionpassenger.com/">Phusion Passenger</a>, due to the fact that it was (and is) easier to setup than Unicorn. My main concern, at the time, was to have a functioning app deployed as soon as possible, with as little effort as possible, and Passenger helped me do just that.</p>

<p>Eventually, I reached a point where I was ready for something that I could configure myself, and Unicorn seemed like a good next step. But if you’re a beginner, Passenger will be the easiest to start with since it’s designed to integrate into Nginx directly and, therefore, requires less work to setup and maintain. You will have to pay for the Enterprise version, however, if you want advanced features like error-resistant, zero-downtime deploys, which come for free with Unicorn.</p>

<h2>Do One Thing, Do It Well</h2>

<p>The reason why I like Unicorn is due to its philosophy of doing a few things well. An example of this is load balancing, which Unicorn hands off to the operating system entirely. When Unicorn starts, its master process spawns (forks) a configured number of processes called workers. These workers then handle the incoming requests to your app and only accept a request when they’re ready.</p>

<p>But it’s the operating system that handles the forking, as well as the distribution of requests between processes that are ready to accept, not Unicorn. What Unicorn does is the actual monitoring of workers themselves through the master process. If a worker, for example, takes too much time to complete a task, the master process will kill it and spawn a new one.</p>

<h2>Deploys Done Right</h2>

<p>What this design can achieve is error-resistant, zero-downtime deploys. Error-resistant deploys ensure that if something goes wrong during a deploy, your app will remain online and serve incoming requests using the old code. This is possible because Unicorn doesn’t kill off old workers until new workers have successfully forked, which means your old workers will stay alive if something goes wrong with the new ones.</p>

<p>Zero-downtime deploys work in a similar manner. We can send a signal to the master process telling it to start a new master, and this new master will then begin reloading our new code. Once it’s fully loaded, the new master will fork its workers. The first worker forked will notice there is still an old master running, and it’ll send a signal telling it to start gracefully shutting down its workers. When all workers finish serving their current requests, the old master then dies, and our app is fully reloaded with new code.</p>

<p>Passenger supports rolling restarts like this as well, but they only come with the paid Passenger Enterprise version. One advantage the Enterprise version provides, however, is it restarts the processes one-by-one, which requires less memory. Rolling restarts with Unicorn, on the other hand, are done all at once and temporarily require twice the memory usage. It is possible, of course, to script one-by-one rolling restarts in Unicorn, but Passenger does this automatically for you.</p>

<h1>How about Puma?</h1>

<p>Another alternative to Unicorn and Passenger is Puma. Whereas Unicorn and Passenger achieve concurrency through the use of forks, Puma achieves it by running multiple threads in a single process. Of course, this means that your code must be thread-safe, but since Rails 4 is thread-safe by default, this shouldn’t be an issue.</p>

<p>Because threading requires less memory than forking, Puma will be more memory efficient than a similar Unicorn setup. Puma, however, does not do rolling restarts, nor does watch for and restart failed processes, like Unicorn, which means you’ll need a service like <a href="http://mmonit.com/monit/">Monit</a> that monitors and restarts them for you. As with any technology, pick whatever best meets your needs.</p>

<h1>Installing and Configuring Unicorn</h1>

<p>With that out of the way, we’re now ready to start working with Unicorn. We’ll begin by adding the following line to our app’s <code>Gemfile</code> on our local computer:</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s1">&#39;unicorn&#39;</span><span class="p">,</span> <span class="err">&#39;</span><span class="o">~&gt;</span> <span class="mi">4</span><span class="o">.</span><span class="mi">8</span><span class="o">.</span><span class="mi">0</span><span class="err">’</span>
</span></code></pre></td></tr></table></div></figure>


<p>Make sure you change the version number to whatever’s the most recent one at the time of your install. The <code>~&gt;</code> notation means that any future minor updates (e.g., from 4.0.0 to 4.0.1) will be installed, but major ones (e.g., from 4.0 to 4.1) won’t be. Major updates can sometimes introduce unexpected behavior in your app, so it’s best to limit the updates to minor releases only.</p>

<p>We&rsquo;ll then install Unicorn by running <code>bundle</code> in the root path of our app, and Bundler, which we installed in <a href="http://vladigleba.github.io/blog/2014/03/14/deploying-rails-apps-part-2-setting-up-the-server/">part 2</a>, will take care of the install for us.</p>

<p>Having Unicorn installed, we can begin configuring it. We’ll start by creating a file called <code>unicorn.rb</code> on our local computer inside the <code>/config</code> directory of our Rails application. This is how my file for Phindee looks:</p>

<figure class='code'><figcaption><span>unicorn.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">root</span> <span class="o">=</span> <span class="s2">&quot;/var/www/phindee/current&quot;</span>
</span><span class='line'><span class="n">working_directory</span> <span class="n">root</span>
</span><span class='line'><span class="n">pid</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">root</span><span class="si">}</span><span class="s2">/tmp/pids/unicorn.pid&quot;</span>
</span><span class='line'><span class="n">stderr_path</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">root</span><span class="si">}</span><span class="s2">/log/unicorn.log&quot;</span>
</span><span class='line'><span class="n">stdout_path</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">root</span><span class="si">}</span><span class="s2">/log/unicorn.log&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="n">listen</span> <span class="s2">&quot;/tmp/unicorn.phindee.sock&quot;</span>
</span><span class='line'><span class="n">worker_processes</span> <span class="mi">2</span>
</span><span class='line'><span class="n">timeout</span> <span class="mi">30</span>
</span></code></pre></td></tr></table></div></figure>


<p>The first variable <code>root</code> represents the path to the root directory of our app, which I&rsquo;ve set to <code>/var/www/phindee/current</code>. Generally, web apps are stored inside <code>/var/www</code> on Unix since the <code>/var</code> directory is designated for files that increase in size over time, which is the case with most web apps, and a <code>/www</code> directory is typically created inside <code>/var</code> to store files meant for the web. I then have a <code>/phindee</code> directory specified inside <code>/www</code> to store all things related to Phindee, as well as a <code>current</code> directory, which Capistrano will later create and use to store the latest deployment code. You don&rsquo;t have to actually create these directories now, as Capistrano we&rsquo;ll create them itself when it runs.</p>

<p>Below is what the rest of the configurations mean:</p>

<ul>
<li><p><code>working_directory</code> specifies exactly what is says&mdash;the app’s working directory&mdash; and it’s set to the variable <code>root</code>, which we just defined.</p></li>
<li><p><code>pid</code> specifies the path to a <code>.pid</code> file that will store the process ID of Unicorn’s master process, which can be later used to stop the process itself. These files are typically stored inside the <code>/tmp</code> directory since they exist only while Unicorn is running, so you can leave this line the way it is.</p></li>
<li><p><code>stderr_path</code> and <code>stdout_path</code> specify the path to <code>stderr</code> and <code>stdout</code>. If you’re not familiar with what they mean, when a Unix program starts up, it has three streams opened for it: one for input called “standard input” (abbreviated <code>stdin</code>), one for output called “standard output” (abbreviated <code>stdout</code>), and one for printing error messages called “standard error” (abbreviated <code>stderr</code>). Given our configuration, this means that any error messages written by our Rails app to the <code>stderr</code> stream will get written to the <code>.log</code> file specified in the <code>stderr_path</code>. It’s common to point <code>stdout_path</code> to the same location as <code>stderr_path</code> and store them both inside the <code>/log</code> directory.</p></li>
<li><p><code>listen</code> specifies the path to a socket that will listen for a client wanting to make a connection request. If you’re unfamiliar with this, a socket is basically a software object consisting of a port number that’s attached to an IP address. It allows clients and servers to communicate with one another by writing to and reading from their sockets. Since they’re running only when Unicorn is running, they’re usually stored inside the <code>/tmp</code> directory as well.</p></li>
<li><p><code>worker_processes</code> specifies the number of workers that the master process will fork for client request handling. The more workers you set, the more memory you’ll need, and since I don’t have a large amount of memory on my VPS, I decided to set mine to two. This should be enough for a low-traffic app, but once your traffic rises, the number of workers, as well as the amount of memory available to your server, will need to rise with it.</p></li>
<li><p><code>timeout</code> specifies the maximum number of seconds a worker can take to respond to a request before the master kills it and forks a new one. 30 seconds is a good value to put here since whenever a worker takes longer than this to respond, it’s usually safe to assume there is something wrong with the worker itself.</p></li>
</ul>


<p>You can get a complete list of all the other possible configuration options by taking a look Unicorn’s <a href="http://unicorn.bogomips.org/Unicorn/Configurator.html">Configurator Module</a>.</p>

<h1>Managing Unicorn Processes</h1>

<p>Having Unicorn configured, we’ll now need to setup a way for us to manage the Unicorn processes themselves.</p>

<p>Unicorn uses signals to communicate with its processes, and you can find a full explanation of all the available signals <a href="http://unicorn.bogomips.org/SIGNALS.html">here</a>. But sending these signals manually would be a pain. I recommend using a <a href="https://github.com/railscasts/335-deploying-to-a-vps/blob/master/blog-nginx/config/unicorn_init.sh">script on GitHub</a> to automate this process for you. Go ahead and create your own <code>unicorn_init.sh</code> file inside your app’s <code>/config</code> directory and copy/paste the script’s code into it.</p>

<p>All the variables you can change are defined at the beginning of the script. You&rsquo;ll need to set the <code>APP_ROOT</code> variable to the same path that the <code>root</code> variable in <code>unicorn.rb</code> is set to, and you&rsquo;ll want to set the <code>AS_USER</code> variable to the user you set up your server with in <a href="http://vladigleba.github.io/blog/2014/03/05/deploying-rails-apps-part-1-securing-the-server/">part 1</a>. Lastly, you&rsquo;ll want to modify the <code>CMD</code> variable by adding <code>~/.rbenv/bin/rbenv exec</code> right after <code>cd $APP_ROOT;</code>, but right before <code>bundle exec unicorn ...</code>, which is necessary so that the correct environment variables are set when we run the command remotely through Capistrano.</p>

<p>If you’re inside the root directory of your Rails app, you can then make the script executable with the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>chmod +x config/unicorn_init.sh
</span></code></pre></td></tr></table></div></figure>


<p>I’d like to point out that the way <code>unicorn.rb</code> and <code>unicorn_init.sh</code> is currently setup, Unicorn won’t be doing rolling restarts. If you look at <code>unicorn_init.sh</code>, for example, you’ll notice that it sends a <code>HUP</code> signal when you run the script’s <code>restart</code> command. This signal doesn’t spawn a new master process, the way a rolling restart would do; it simply reloads the <code>unicorn.rb</code> file and gracefully restarts all the workers using the same master process.</p>

<p>You’d need to use the <code>USR2</code> signal for a rolling restart (which is actually what happens when you run the script’s <code>upgrade</code> command). But even then, there are still additional steps you’ll need to take to make everything runs smoothly, like making sure your database connections carry over, as well as ensuring any changes to the database are compatible with the older code.</p>

<p>I won’t be explaining how to do this here because I haven’t yet set it up myself, but if you’re curious, there is a good <a href="http://www.justinappears.com/blog/2-no-downtime-deploys-with-unicorn/">blog post</a> explaining all the nuances you need to be aware of. Phindee is currently a small, low-traffic app and its code is reloaded within seconds, so I’m not worried about users waiting for their requests and don’t see a need for rolling restarts at the moment, but I’m hoping the need presents itself soon.</p>

<p>Having configured Unicorn, we&rsquo;ll move on to configuring Nginx in <a href="http://vladigleba.github.io/blog/2014/03/27/deploying-rails-apps-part-4-configuring-nginx/">part 4</a>. If you want to be notified when it’s out, feel free to <a href="http://www.feedblitz.com/f/?Sub=927939&amp;cids=1">subscribe</a>, and the post will be delivered to your inbox as soon as it’s released!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying Rails Apps, Part 2: Setting up the Server]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2014/03/14/deploying-rails-apps-part-2-setting-up-the-server/"/>
    <updated>2014-03-14T09:45:00-07:00</updated>
    <id>http://vladigleba.github.io/blog/2014/03/14/deploying-rails-apps-part-2-setting-up-the-server</id>
    <content type="html"><![CDATA[<p>In <a href="http://vladigleba.github.io/blog/2014/03/05/deploying-rails-apps-part-1-securing-the-server/">part 1</a>, I talked about choosing a VPS provider, creating a new Ubuntu instance, and configuring it to be more secure. Now, in part 2, I&rsquo;ll talk about installing the technology stack behind <a href="http://phindee.com/">Phindee</a>: Node.js, Nginx, PostgreSQL, rbenv, Ruby, and Bundler.</p>

<!-- more -->


<h1>But First!</h1>

<p>Before we proceed any further, make sure you’re logged in as the user you created in part 1; if you’re already logged in as <code>root</code>, you can switch to the correct user with the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>su - username
</span></code></pre></td></tr></table></div></figure>


<p>Once logged in, we’ll run the following command to fetch the latest updates for the packages on our system:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get update
</span></code></pre></td></tr></table></div></figure>


<p>We’ll follow this up with the command to install the necessary package updates:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get upgrade
</span></code></pre></td></tr></table></div></figure>


<p>If the command found any updates to install, it will ask if you want to continue with the install; you can enter “y” to do so. Once it finishes, we’ll be ready begin.</p>

<h1>Setting Timezones and Installing Mail</h1>

<p>We’ll start by setting the correct timezone:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo dpkg-reconfigure tzdata
</span></code></pre></td></tr></table></div></figure>


<p>You’ll be asked to choose your country and timezone, after which your server’s local time will be displayed; if it displays the correct time, you’re good to go.</p>

<p>We’ll install <code>postfix</code> and <code>telnet</code> next to enable our Rails app to send email:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get -y install telnet postfix
</span></code></pre></td></tr></table></div></figure>


<p>Feel free to just press “enter” through all the prompts and keep all the defaults.</p>

<p>Next, we’ll install some useful packages we’ll later need, among them <code>python-software-properties</code>, which will allow us to easily add new repositories to the <code>apt</code> package handling system:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get -y install curl git-core python-software-properties
</span></code></pre></td></tr></table></div></figure>


<p>Having the ability to add new repositories this way allows us to install the most recent updates since the default <code>apt-get</code> repositories typically don’t receive the latest updates immediately.</p>

<h1>Installing Node.js</h1>

<p>We’ll actually put this ability to use right now by adding a new repository for <a href="http://nodejs.org/">Node.js</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo add-apt-repository ppa:chris-lea/node.js
</span></code></pre></td></tr></table></div></figure>


<p>We’ll then update the created repository with the latest Node.js code available:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get -y update
</span></code></pre></td></tr></table></div></figure>


<p>and install it, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get -y install nodejs
</span></code></pre></td></tr></table></div></figure>


<p>We could’ve avoided adding a new repo and just used the traditional <code>apt-get</code> method to do the install, but this would’ve installed an older version of Node.js. Because Node.js is under active development and things are added quite frequently, it’s important to run the latest possible version. This might not matter as much for software that doesn’t have an aggressive update schedule, but this is the route we’ll take for Node.js.</p>

<p>By the way, if you’re wondering why we’re installing Node.js, the reason is it provides a good way to execute JavaScript, and we’ll need this for the Rails <a href="http://guides.rubyonrails.org/asset_pipeline.html">asset pipeline</a>.</p>

<h1>Installing Nginx</h1>

<p>Next, we’ll install a web server called <a href="http://wiki.nginx.org/Main">Nginx</a>, which will handle all our static requests, such as stylesheets, scripts, images, and fonts. Its low memory usage and ability to serve static content quickly and efficiently make it a popular alternative to Apache and an excellent choice for sites running on a Virtual Private Server (VPS). What makes Nginx efficient is the fact that it’s an event-based server, while Apache, on the other hand, is process-based. An event-based server doesn&rsquo;t spawn new processes or threads for each request the way a process-based one does, and this means lower memory usage and faster responses.</p>

<p>We’ll install it by adding another repository:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo add-apt-repository ppa:nginx/stable
</span><span class='line'>sudo apt-get -y update
</span><span class='line'>sudo apt-get -y install nginx
</span></code></pre></td></tr></table></div></figure>


<p>Once it’s installed, we can start it up with:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo service nginx start
</span></code></pre></td></tr></table></div></figure>


<p>If you now visit your server’s IP address, you should see a simple page proclaiming “Welcome to nginx!”</p>

<h1>Installing PostgreSQL</h1>

<p>Most modern apps need to store some sort of data, and there are a plethora of open source databases available, like <a href="https://www.mysql.com/">MySQL</a>, <a href="https://sqlite.org/">SQLite</a>, and <a href="http://www.postgresql.org/">PostgreSQL</a>. I never tried MySQL, but when I first started out, I used SQLite, the default database for Rails apps, because I liked its simplicity and saw no need for something more sophisticated. As my needs have evolved, however, so has my database, and I recently decided to switch to PostgreSQL because of its support for a fast key-value store called HStore and its ability to do full-text search, both of which I&rsquo;ll need for Phindee.</p>

<p>We’ll install it with <code>apt-get</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install postgresql postgresql-contrib libpq-dev
</span></code></pre></td></tr></table></div></figure>


<p>We can then start Postgres as the default <code>postgres</code> user with the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo -u postgres psql
</span></code></pre></td></tr></table></div></figure>


<p>Had we not specified the default user, it would’ve tried to use the user we’re logged in with on our VPS, and Postgres would’ve complained that the role doesn’t exist since there is no such user created in Postgres. This makes it necessary to login as the default <code>postgres</code> user.</p>

<p>Once logged in, we’ll setup a password for <code>postgres</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="err">\</span><span class="n">password</span>
</span></code></pre></td></tr></table></div></figure>


<p>We’ll also create a new user called <code>admin</code>, followed by a database called <code>phindee</code>, which will be owned by <code>admin</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="k">create</span> <span class="n">user</span> <span class="n">admin</span> <span class="k">with</span> <span class="n">password</span> <span class="s1">&#39;secret&#39;</span><span class="p">;</span>
</span><span class='line'><span class="k">create</span> <span class="k">database</span> <span class="n">phindee</span> <span class="n">owner</span> <span class="n">admin</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Having the basics setup, we can now quit Postgres:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='mysql'><span class='line'><span class="err">\</span><span class="n">quit</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Installing rbenv</h1>

<p><a href="https://github.com/sstephenson/rbenv">rbenv</a> is a tool that helps you manage the Ruby versions installed on your system, thereby allowing you to easily switch between them. Whenever you want to play with a new version of Rails&mdash;without messing up your current setup&mdash;rbenv will come in handy.</p>

<p>You may be familiar with another Ruby version manager called <a href="https://rvm.io/">RVM</a>. I used it myself for a while, before switching over to rbenv. It’s not that one is “better” than the other; it’s about which one is better suited for <em>your</em> needs. I made the switch because rbenv is more lightweight than RVM, its design feels cleaner, and it has a cool name.</p>

<p>rbenv will suite you well if you’re starting out; otherwise, install whatever best meets your needs. By the way, it’s worth mentioning that since rbenv is incompatible with RVM, you won’t be able to run them side by side.</p>

<p>All right, we can install rbenv like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo curl -L https://raw.github.com/fesplugas/rbenv-installer/master/bin/rbenv-installer | bash
</span></code></pre></td></tr></table></div></figure>


<p>This will run a script that will do most of the install for us. In the end, you’ll receive a message telling you to add rbenv to the load path, and you can do so by opening up <code>bash_profile</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo nano ~/.bash_profile
</span></code></pre></td></tr></table></div></figure>


<p>and copying/pasting the code that was outputted by the message. We’ll then need to reload the file for the changes to take effect:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>. ~/.bash_profile
</span></code></pre></td></tr></table></div></figure>


<p>We’re almost ready to install Ruby, but before we do, we first need to install the C compiler and the Make utility, which is needed for the Ruby install. We can do so by installing a package called <code>build-essential</code>, along with some additional packages we’ll need later on:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo apt-get install zlib1g-dev build-essential libssl-dev libreadline-dev libyaml-dev libsqlite3-dev sqlite3 libxml2-dev libxslt1-dev
</span></code></pre></td></tr></table></div></figure>


<p>With the packages installed, we’re now ready to install Ruby itself.</p>

<h1>Installing Ruby</h1>

<p>To see a list of all the Ruby versions available, we can run the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rbenv install --list
</span></code></pre></td></tr></table></div></figure>


<p>I chose to install version 2.1.0, as that was the latest one at the time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rbenv install 2.1.0
</span></code></pre></td></tr></table></div></figure>


<p>This will take a few minutes to run&mdash;and that’s probably an understatement&mdash;but once it finishes, we’ll make the version it just installed the default Ruby version on our server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rbenv global 2.1.0
</span></code></pre></td></tr></table></div></figure>


<p>If everything finished successfully, typing <code>ruby -v</code> should output the Ruby version we now have installed.</p>

<h1>Installing Bundler</h1>

<p>If you’ve never used it before, <a href="http://bundler.io/">Bundler</a> is a tool that helps you easily manage and install gems (Ruby programs and libraries). It allows you to specify the gems your app relies on, along with their versions, and Bundler will then install them all for you, in addition to automatically installing and managing any dependencies (other gems) they rely on.</p>

<p>It’s usually a good idea to include version numbers for your gems because new versions can sometimes introduce changes that cause the old features you rely on to behave differently, which can result in errors the next time you try to run your app. By using Bundler to specify not only the gems you need, but also the versions of those gems, you can save yourself from needless headaches (and unnecessary cups of coffee).</p>

<p>We will install bundler with the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>gem install bundler --no-ri --no-rdoc
</span></code></pre></td></tr></table></div></figure>


<p>Every time we install a gem that provides us with commands we can execute, we’ll need to run <code>rbenv rehash</code>, which will give us access to the corresponding executable (<a href="http://stackoverflow.com/questions/9394338/how-do-rvm-and-rbenv-actually-work">see this page</a> to learn why this is so). Since Bundler is one of these gems, we’ll do the rehash next:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>rbenv rehash
</span></code></pre></td></tr></table></div></figure>


<p>If things installed successfully, <code>bundle -v</code> should return the Bundler version that was just installed.</p>

<p>As an aside, notice that we’re specifying the <code>—no-ri</code> and <code>—no-rdoc</code> flags to avoid installing the gem’s documentation, which often takes longer than the gem installation itself and is typically unnecessary, especially on a production server. But typing out these flags for each and every gem you install will give you <a href="http://www.webmd.com/pain-management/carpal-tunnel/carpal-tunnel-syndrome-topic-overview">carpel tunnel</a> sooner than you&rsquo;d like, so its best to create a <code>.gemrc</code> file in your home directory:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nano ~/.gemrc
</span></code></pre></td></tr></table></div></figure>


<p>and add the following line into it:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>gem: --no-rdoc --no-ri
</span></code></pre></td></tr></table></div></figure>


<p>The flags will then be included automatically the next time you install new gems.</p>

<p>And with that, our server setup is now complete! Having installed Node.js, Nginx, PostgreSQL, and rbenv, we’re now ready to start configuring Nginx and Unicorn, which I’ll cover in the <a href="http://vladigleba.github.io/blog/2014/03/21/deploying-rails-apps-part-3-configuring-unicorn/">next post</a>. If you want to be notified when it’s out, feel free to <a href="http://www.feedblitz.com/f/?Sub=927939&amp;cids=1">subscribe</a>, and you’ll have the complete post delivered to your inbox as soon as it’s released!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Deploying Rails Apps, Part 1: Securing the Server]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2014/03/05/deploying-rails-apps-part-1-securing-the-server/"/>
    <updated>2014-03-05T11:18:00-08:00</updated>
    <id>http://vladigleba.github.io/blog/2014/03/05/deploying-rails-apps-part-1-securing-the-server</id>
    <content type="html"><![CDATA[<p>Setting up a Rails server from scratch can be a daunting task. I remember my first attempt; it was a multi-day process full of frustration, things not working, me not understanding why, and a whole lot of googling. In an effort to make this experience less painful for those new to Rails, I’d like to share the process I went through to deploy <a href="http://phindee.com/">Phindee</a> to a VPS (Virtual Private Server).</p>

<!-- more -->


<h1>Choosing a VPS</h1>

<p>Phindee is currently running on DigitalOcean servers, but there are other options available as well, like Linode, which was my previous VPS provider. If you’re new to deployment, I recommend <a href="http://digitalocean.com/">DigitalOcean</a> because it’ll be ideally suited to your needs, due their more flexible billing policy and cheaper plans, but any VPS provider will do.</p>

<p>Once you decide on a VPS, you’ll then signup for a plan. If you’re just starting out, the cheapest plan available will be enough; otherwise, choose a plan that fits your needs. Once you have an account, you’ll be able to create your server, and typically, you’ll have a list of operating systems to choose from. DigitalOcean offers a wide variety of Linux distributions; I chose the latest 32-bit version of Ubuntu for Phindee, and I recommend you do the same if you&rsquo;re new to deployment.</p>

<p>The reason why I chose the 32-bit version was because it uses less memory than the 64-bit one. This is something you should consider if you chose one of the cheaper plans with a lower amount of memory, but if memory is not an issue, go with the 64-bit since you’ll have better performance (<a href="http://howtoubuntu.org/how-to-decide-if-you-should-use-32bit-or-64bit-ubuntu">see this page</a> to learn more).</p>

<h1>Logging In</h1>

<p>Once you create your instance, you’ll be given your server’s IP address and password. If you’re on Linux or a Mac, open up Terminal and login. (If you&rsquo;re on Windows, you&rsquo;ll need to download Putty.) To login using Terminal, use the following command, replacing the Xs with your own IP address:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh root@xxx.xxx.xxx.xxx
</span></code></pre></td></tr></table></div></figure>


<p>This command uses SSH to connect to your server as the user <code>root</code>. If you’re unfamiliar with SSH, it stands for Secure Shell, and it’s basically a network protocol that allows two computers to securely communicate with one another. There are many other protocols out there, such as HTTP, which allows browsers to communicate with web servers.</p>

<p>The first time you attempt to login, you’ll be asked if you’re sure you want to continue connecting; type &ldquo;yes&rdquo;. Then enter the password for the <code>root</code> user, and you’ll be logged in.</p>

<h1>Groups and Privileges</h1>

<p>Now that you’re in, the first thing we’ll do is change the password for <code>root</code> using the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>passwd
</span></code></pre></td></tr></table></div></figure>


<p>This will prompt you to enter a new password twice. Next, we’ll create a new group called <code>deployers</code>, which will allow us to easily manage the users with deployment privileges:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>groupadd deployers
</span></code></pre></td></tr></table></div></figure>


<p>Now we’ll create a new user called <code>bob</code>, and assign him to the <code>deployers</code> group we just created above:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>adduser bob —ingroup deployers
</span></code></pre></td></tr></table></div></figure>


<p>This command will prompt you to enter a password for this user, in addition to some other information afterwards, but after you enter the password twice, feel free to just press “Enter” for the other fields, as they’re not strictly necessary. By the way, don’t use the same password for both <code>root</code> and the user you just created above or <a href="http://www.cartoonstock.com/lowres/computers-computer-self_destruct-explode-username-password-ksm0529l.jpg">bad things will happen</a>.</p>

<p>Next thing we’ll do is open the <code>sudoers</code> file containing a list of users and groups who have root privileges:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nano /etc/sudoers
</span></code></pre></td></tr></table></div></figure>


<p>and we’ll add the following line into it (we use &ldquo;%&rdquo; to indicate that this is a group name):</p>

<figure class='code'><figcaption><span>sudoers</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>%deployers      ALL=(ALL) ALL
</span></code></pre></td></tr></table></div></figure>


<p>You can then exit the nano text editor by typing &ldquo;Control-X&rdquo; and typing &ldquo;Y&rdquo; when asked if you want to save. In case you’re wondering, the line we just added above will give the users in the <code>deployers</code> group the ability to run commands as <code>root</code>. If this is new to you, let me explain.</p>

<p>Running commands while logged in as <code>root</code> is considered bad practice because, as the superuser, <code>root</code> can run any and all commands, and since there is no undo functionality in Unix, one accidental bad command and your system can be seriously disrupted. That’s why we created a separate user called <code>bob</code>, which will have deployment privileges and nothing else.</p>

<p>But why did we create a <code>deployers</code> group and added <code>bob</code> into it? Well, first of all, we could’ve avoided creating a group altogether and just added <code>bob</code> to the <code>sudoers</code> file and given <em>him</em> <code>root</code> privileges instead. But let’s say I’m working on a project with a friend and she wants to be able to deploy as well. I would have to then add her to the <code>sudoers</code> file too (to give her <code>root</code> privileges), and the file would keep growing every time a new user with deployment privileges needed to be added. This would be a nightmare to maintain.</p>

<p>A better way to go about this is to create a group called <code>deployers</code>, give the group <code>root</code> privileges, and then add users to this group. This way, whenever I’d need to add new users with deployment privileges, I would just need to add them to the <code>deployers</code> group. This keeps the <code>sudoers</code> file clean and organized, while allowing me to easily manage the members of the group as well. I could, for example, easily revoke some rights for all members of the <code>deployers</code> group at the same time, instead of doing it one user at a time, or I could simply remove a user from the <code>deployers</code> group if I discover, for example, that he still creates &ldquo;1234&rdquo; passwords for his accounts.</p>

<p>Okay, but why is it necessary for users and groups to have <code>root</code> privileges? Well, these privileges allow a user, say <code>bob</code>, to run commands he otherwise would not be able to run due to not having the necessary permissions, which arises from the fact that the user is not <code>root</code> and therefore has limited privileges. But given <code>root</code> privileges, or being part of a group with <code>root</code> privileges, enables <code>bob</code> to run these commands simply by preceding the command with <code>sudo</code>. He’ll then be prompted to enter his password, and the command will run.</p>

<p>That’s the reasoning behind giving the <code>deployers</code> group <code>root</code> privileges and adding <code>bob</code> into it. Later on, <code>bob</code> will need these privileges during the deployment process.</p>

<h1>Configuring SSH Access</h1>

<p>Now we’re ready for the next step in securing our server, and we’ll start by opening the <code>ssh_config</code> file:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>nano /etc/ssh/sshd_config
</span></code></pre></td></tr></table></div></figure>


<p>This file contains a number of rules that define who can login to the server and in what way. The first thing we’ll do is change the port number with which users will login; the default port that servers listen on is 22, but it’s wise to change it to another value so that any potential hackers have some extra work to do in figuring out the correct one; you can choose any port number from 1025 to 65536. Once you have your number, look for a line that looks like the following:</p>

<figure class='code'><figcaption><span>sshd_config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Port 22
</span></code></pre></td></tr></table></div></figure>


<p>and change its port number to the one you picked. Make sure you make a note of the new port number because you’ll need it for future login.</p>

<p>Next, look for another line in the file that looks like this:</p>

<figure class='code'><figcaption><span>sshd_config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>PermitRootLogin yes
</span></code></pre></td></tr></table></div></figure>


<p>and change the “yes” to a “no”; this prevents <code>root</code> user login, which means that any potential hackers will need to know the name of one of the users on the server to actually login.</p>

<p>We can even go a step further and define exactly which existing users are able to login. Since I only want <code>bob</code> to have login access, I’ll add the following line to the end of the file:</p>

<figure class='code'><figcaption><span>sshd_config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>AllowUsers bob
</span></code></pre></td></tr></table></div></figure>


<p>You could even specify a space-separated list of users here, if you have more than one user in need of login access.</p>

<p>All right, there is one final line that we’ll add to the end of our file:</p>

<figure class='code'><figcaption><span>sshd_config</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>UseDNS no
</span></code></pre></td></tr></table></div></figure>


<p>This line disables hostname lookup, which can lead to a delay of up to 30 seconds when logging in with <code>ssh</code>. Disabling it will save you time and do no harm.</p>

<p>To put these changes into effect, we’ll restart SSH, like so:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>sudo service ssh restart
</span></code></pre></td></tr></table></div></figure>


<p>Now we’re ready to test the configurations we just made to make sure they work. I’ll open a new shell in Terminal, without closing my current one, and try to login as the user <code>bob</code> on the port I specified in <code>sshd_config</code>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh -p 23523 bob@xxx.xxx.xxx.xxx
</span></code></pre></td></tr></table></div></figure>


<p>Make sure you change the above command to match the user and port number you specified in your own <code>sshd_config</code> file, or it obviously won’t work. The above command will then prompt you to enter that user’s password. If you login successfully, congratulations! Your configuration is correct! You can close your previous shell and just continue using the current one; otherwise, you’ll need to go back and double check your <code>sshd_config</code> file configurations.</p>

<h1>Enabling SSH Authentication</h1>

<p>The final thing we’ll do to secure our server is enable SSH authentication, which will allow us to use SSH keys to authenticate with the server, instead of the traditional password authentication. This is a more secure approach because password authentication involves sending your password over the network, and this makes it vulnerable to being intercepted and cracked. It’s also more convenient since you won’t need to enter it every time you want to login. But before we move on, I’d like to briefly explain how SSH keys work and what makes them more secure.</p>

<p>All SSH keys come in pairs: one private and the other public. The private key is stored locally and needs to be carefully guarded, while the public key is stored on the remote server to which you will be logging in. Anytime you want to connect to the server, it will use the public key to create a challenge, which it will then send over to you, and only you, the holder of the private key, will be able to correctly understand and solve the challenge. Your response is then sent back to the server, and if it’s correct, it’ll grant you access.</p>

<p>You can see if you already have an SSH key by running:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ls ~/.ssh
</span></code></pre></td></tr></table></div></figure>


<p>If you see any files with the <code>.pub</code> extension, then you already have a key generated; otherwise, you can generate one with the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-keygen -C <span class="s2">&quot;your.email@example.com&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that we&rsquo;re using the <code>-C</code> flag to create a label for our key for easy identification, and it&rsquo;s typical to set it to your email address. When the command runs, it’ll prompt you to enter a path and passphrase, but the default path is fine, and since we won’t be setting up a passphrase, you can just press “enter” for both. This will store both the private and public keys in the <code>~/.ssh/</code> directory, and they will be named according to the type of encryption used, the default being RSA authentication. Your private key will be stored in a file called <code>id_rsa</code>, while <code>id_rsa.pub</code> will hold your public key.</p>

<p>We&rsquo;ll then need to add the newly generated keys to <code>ssh-agent</code>, which is a program that caches your private key and provides it to the SSH client program on your behalf. You can do so with the following command:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-add ~/.ssh/id_rsa
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;ll then ask you for a passphrase, but since we didn&rsquo;t set one up, you&rsquo;ll just need to press &ldquo;enter.&rdquo;</p>

<p>Having our keys generated, we’re now ready to copy our public key over to the remote server using the <code>ssh-copy-id</code> command. (If you’re on a Mac, and you don’t have <code>ssh-copy-id</code> installed, you can install it using Homebrew with <code>brew install ssh-copy-id</code>.) Below is the full <code>ssh-copy-id</code> command that will copy our key over to the server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>ssh-copy-id -i ~/.ssh/id_rsa.pub -p 23523 bob@xxx.xxx.xxx.xxx
</span></code></pre></td></tr></table></div></figure>


<p>This will create a new file called <code>authorized_keys</code> on your remote server inside the <code>~/.ssh</code> directory and store your public key in it. If you now try to <code>ssh</code> into your server, you should be authenticated and logged in without entering your password.</p>

<p>Going through this process might seem a bit tedious and time consuming at first, but after you’ve done it a couple times, it will get easier and hopefully become second nature. Security is important, and the time you spend learning and implementing it is time well spent.</p>

<h1>Summary</h1>

<p>To summarize, we made our server more secure by:</p>

<ol>
<li>limiting <code>root</code> privileges to just members of the <code>deployers</code> group</li>
<li>setting a custom port with which to connect</li>
<li>disabling <code>root</code> login</li>
<li>specifying exactly which user is able to login</li>
<li>enabling SSH authentication</li>
</ol>


<p>Of course, this doesn’t mean our server is “unhackable” by any means, but it is significantly more secure than it was before. You can now sleep more peacefully knowing that any future hackers have at least some of their work cut out for them.</p>

<p>In <a href="http://vladigleba.github.io/blog/2014/03/14/deploying-rails-apps-part-2-setting-up-the-server/">part 2</a>, we’ll start setting up the server by installing the technology stack behind Phindee. If you’d like to be notified when its out, feel free to <a href="http://www.feedblitz.com/f/?sub=927939">subscribe</a>, and you&rsquo;ll get the complete post delivered right to your inbox as soon as it&rsquo;s released.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm Leaving Linode for DigitalOcean]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2014/02/27/im-leaving-linode-for-digitalocean/"/>
    <updated>2014-02-27T08:16:00-08:00</updated>
    <id>http://vladigleba.github.io/blog/2014/02/27/im-leaving-linode-for-digitalocean</id>
    <content type="html"><![CDATA[<p>A few weeks ago, I ran into a <a href="http://blog.schneidmaster.com/digital-ocean-vs-linode/">blog post</a> (and the resulting <a href="https://news.ycombinator.com/item?id=7021664">Hacker News discussion</a>) comparing two popular VPS providers: <a href="https://www.linode.com/">Linode</a> and <a href="https://www.digitalocean.com/">DigitalOcean</a>. Up until that point, I was a happy Linode customer for over two years. I had heard about DigitalOcean previously, but never considered trying it since I was happy with Linode. This post, however, intrigued me enough to try DigitalOcean out.</p>

<!-- more -->


<p>Fast forward to today and <a href="http://www.phindee.com/">Phindee</a> is now running on DigitalOcean servers!</p>

<h1>What’s so Cool about DigitalOcean?</h1>

<p>I was drawn to DigitalOcean due to one killer feature, and I would&rsquo;ve moved because of this one feature alone: their billing policy. Let me explain.</p>

<h2>Flexible Billing</h2>

<p>When you create a new instance with Linode, you’re immediately charged for the entire month; if you then decide to destroy that instance a few days later, Linode will return a large portion of that month’s payment as Linode credit. With DigitalOcean, however, you’re only charged for what you use&mdash;no more, no less&mdash;so if you spin up an instance and decide to delete it the next day, you’ll be charged only for those few hours you used up.</p>

<p>I’ve lost track of the number of instances I’ve temporarily spun up since switching over to DigitalOcean three weeks ago, but I can count the number of times I did this with Linode on one of my two hands. The benefits of this flexibility are obvious: higher incentive to experiment with new technologies, test prototypes, and tinker with new ideas.</p>

<p>But that’s not all.</p>

<h2>Lower Starter Plan</h2>

<p>Besides flexible billing, I also like DigitalOcean’s plans, which I find to be perfect for apps with small amounts of traffic. Linode’s plans start at $20 a month and paying that much to host apps that receive less than 500 visits a month seemed a little ridiculous to me.</p>

<p>DigitalOcean’s plans start at $5 a month, which gives you 512MB of memory, a 20GB SSD disk, and 1TB of transfer. Linode’s basic $20 a month plan gives you 1024MB of RAM, a 48GB disk, and 2TB of transfer, which is similar to DigitalOcean’s $10 plan. In effect, DigitalOcean offers the same thing at half the price, and this carries over to the more expensive plans as well.</p>

<p>In effect, Linode’s starter plan seemed a bit overkill for my low traffic apps, while DigitalOcean suited them perfectly, so my choice was easy.</p>

<h1>Credit Where It&rsquo;s Due</h1>

<p>This post, however, would not be complete if I didn’t give credit where it’s due.</p>

<p>During my two years with Linode, I experienced absolutely no down-time; I think this speaks volumes to the quality of their products. I also want to mention their excellent <a href="https://library.linode.com/">library of guides</a>, which I found to be an invaluable resource whenever I needed help configuring my server.</p>

<p>But perhaps the thing their known for the most is their excellent customer service. Although I never had a need to contact support, I’ve only heard good things from other people, and some developers choose Linode solely due to their outstanding customer service.</p>

<p>Now in the interests of fairness, I should mention that Linode’s security record <a href="https://blog.linode.com/2013/04/16/security-incident-update/">is not spotless</a>, and they have been criticized for the way they handled some of their breaches, but I find this to be the exception rather than the norm. As long as this is a rare occurrence, Linode’s other pros outweigh this con.</p>

<p>Make no mistake, I’m leaving as a happy customer who was merely tempted and eventually won over by DigitalOcean’s flexible billing and a lower starter plan. I will have no hesitation coming back if the need arises.</p>

<h1>A Word About Future Posts</h1>

<p>Now that I’ve successfully moved Phindee over to DigitalOcean, I will use the next six posts to show you how I went about deploying Phindee from scratch. This is how I&rsquo;ll break it down:</p>

<ul>
<li><a href="http://vladigleba.github.io/blog/2014/03/05/deploying-rails-apps-part-1-securing-the-server/">Deploying Rails Apps, Part 1: Securing the Server</a></li>
<li><a href="http://vladigleba.github.io/blog/2014/03/14/deploying-rails-apps-part-2-setting-up-the-server/">Deploying Rails Apps, Part 2: Setting up the Server</a></li>
<li><a href="http://vladigleba.github.io/blog/2014/03/21/deploying-rails-apps-part-3-configuring-unicorn/">Deploying Rails Apps, Part 3: Configuring Unicorn</a></li>
<li><a href="http://vladigleba.github.io/blog/2014/03/27/deploying-rails-apps-part-4-configuring-nginx/">Deploying Rails Apps, Part 4: Configuring Nginx</a></li>
<li><a href="http://vladigleba.github.io/blog/2014/04/04/deploying-rails-apps-part-5-configuring-capistrano/">Deploying Rails Apps, Part 5: Configuring Capistrano</a></li>
<li><a href="http://vladigleba.github.io/blog/2014/04/10/deploying-rails-apps-part-6-writing-capistrano-tasks/">Deploying Rails Apps, Part 6: Writing Capistrano Tasks</a></li>
</ul>


<p>If you&rsquo;d like to be notified when these posts are out, feel free to <a href="http://www.feedblitz.com/f/?sub=927939">subscribe</a>, and you&rsquo;ll get the complete post delivered right to your inbox as soon as it&rsquo;s released.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Ruby on Rails Apps]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2014/01/17/testing-ruby-on-rails-apps/"/>
    <updated>2014-01-17T12:35:00-08:00</updated>
    <id>http://vladigleba.github.io/blog/2014/01/17/testing-ruby-on-rails-apps</id>
    <content type="html"><![CDATA[<p>I started learning Ruby on Rails over a year ago, and as most beginners, I chose the popular <cite><a href="http://ruby.railstutorial.org/ruby-on-rails-tutorial-book">Ruby on Rails Tutorial</a></cite> as my initial guide. Because there was so much new material to absorb, I decided to skip the sections about testing (and I’m glad I did or my head would’ve exploded). When I finished the book, I decided to build a Rails app called <a href="http://phindee.com/">Phindee</a> in order to solidify what I had just learned. I never went back to learn about testing, however. Now over a year later, I did just that and was finally able to write a solid test suite for the app.</p>

<!-- more -->


<p>To be honest, I was a bit reluctant to pickup testing at first. I knew it was important to test code (and I did that by sprinkling <code>print</code> statements all over my code), but it was never a part of my workflow. When I got into the zone, the last thing I wanted to do is slow down and write tests. Over the past couple of days, however, I finally saw the light. And it was glorious.</p>

<p>Let me share it with you.</p>

<h1>Test-Driven Development</h1>

<p>Test-driven development (TDD) is an approach to software development in which we first write a test for a desired functionality, then run the test to make sure it fails, and only then do we implement the said functionality. Once implemented, we run the test once more to make sure our implementation behaves the way our test says it should.</p>

<p>We write and run a failing test first for two reasons:</p>

<ol>
<li>it helps guide our implementation due to the fact that we’ve already identified what the result should look like, and</li>
<li>it makes sure that the test is actually covering the functionality we think it is, because it’s easy to write a test that doesn’t really check what we think its checking</li>
</ol>


<p>The benefits of TDD are many, but the way I see it, it boils down to three main ones: peace of mind, saved time, and better code.</p>

<h2>Peace of Mind</h2>

<p>How many times have you found yourself wanting to refactor an ugly mess of code, but due to the fear of breaking things, you ended up ditching the effort all together? This happens to me all the time, and I hate it. It doesn’t need be this way though. Since adding test cases to Phindee, I’ve refactored more than half of my helper functions without any worry of breaking things.</p>

<p>But it gets better. Testing not only allows you to refactor with confidence, you also get to deploy with confidence, and this comes as part of the package, without any additional effort.</p>

<p>This kind of peace of mind is possible because a test suite catches bugs in your code like no other. You don’t even need to write a large number of tests to reap the rewards; a few well-written test cases can go a long way.</p>

<h2>Saved Time</h2>

<p>Let me ask you this: Would you rather run a command that looks for bugs in your code on demand, and tells you exactly where to look if it finds them, or would you rather have your users discover the bugs in production, thereby sending you on a frantic bug-hunting spree? It’s a no brainer, yet all too often we find ourselves discovering bugs in production when they could’ve easily been discovered in development.</p>

<p>The beauty with having a test suite is you write your tests once, and running them on demand is as simple as typing a short command. The amount of time this saves is enormous. Of course, I’m not saying that writing test cases means you’re production environment will be bug free because software is never bug free; but it <em>will</em> help you track down <em>most</em> bugs <em>before</em> they reach production and do so in a fraction of the time it would’ve taken otherwise.</p>

<h2>Better Code</h2>

<p>Now that Phindee is backed up by a solid test suite, my code has drastically improved in quality because I was finally able to refactor it. It’s simpler, and there is now less of it.</p>

<p>Furthermore, having to write test cases for individual methods has also forced me to write simpler, decoupled methods. You see, it’s hard to write test cases for methods that do more than one thing and happen to be entangled with one another. And this is the reason why test cases lead to cleaner, simpler code. As a result, tracking down bugs is even easier, which means more saved time.</p>

<h1>How It’s Done</h1>

<p>Now that we’ve covered the benefits, I’d like to show you how easy it is to do the testing. Note that I will be using the testing library called Test Unit that ships by default with Rails, instead of the RSpec framework used by the <cite>Ruby on Rails Tutorial</cite>. (I’ll discuss why a bit later.)</p>

<p>Rails provides directories for five different categories of tests by default: helper tests, unit tests (directory is called <code>models</code>), functional tests (directory is called <code>controllers</code>), mailer tests, and integration tests. But before I go into them, I first need to introduce fixtures.</p>

<h2>Fixtures</h2>

<p>Fixtures are defined in YAML files, and their role is to initialize our models with sample data for the sole purpose of testing. They allow us to then easily use this data in our test cases without corrupting our development database. As an example, below is a fixture file for a model in Phindee called <code>Place</code>:</p>

<figure class='code'><figcaption><span>places.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">thai</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Thai Chili Jam</span>
</span><span class='line'>  <span class="l-Scalar-Plain">website</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">thaichilijam.com</span>
</span><span class='line'>
</span><span class='line'><span class="l-Scalar-Plain">grill</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">name</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Portland Sports Bar and Grill</span>
</span><span class='line'>  <span class="l-Scalar-Plain">website</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">portlandsportsbarandgrill.com</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here I created two instances of the <code>Place</code> model (<code>thai</code> and <code>grill</code>) and initialized their <code>name</code> and <code>website</code> attributes. The data is now ready to be used in our test cases. Because YAML is beyond the scope of this post, I won’t go into any more detail, but I encourage you to <a href="http://yaml.org/YAML_for_ruby.html">learn more</a>.</p>

<p>Now that we know about fixtures, we’re ready to learn about the different types of tests we can write for a Rails app. To better explain each type, I will show examples from Phindee.</p>

<h2>Helper Tests</h2>

<p>Helper tests are just what they sound like&mdash;they’re tests for your helper methods. When you create a controller using the <code>rails generate controller NAME</code> command, Rails automatically creates a <code>NAME_helper_test.rb</code> file inside <code>test/helpers</code> to write the tests in. Below is what one of my helper tests for Phindee looks like:</p>

<figure class='code'><figcaption><span>happy_hours_helper_test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">test</span> <span class="s1">&#39;should return days given integers&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="n">humanize_days</span><span class="p">(</span><span class="s1">&#39;2&#39;</span><span class="p">),</span> <span class="s1">&#39;monday&#39;</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="n">humanize_days</span><span class="p">(</span><span class="s1">&#39;1-5&#39;</span><span class="p">),</span> <span class="s1">&#39;sunday-thursday&#39;</span>
</span><span class='line'>    <span class="n">assert_equal</span> <span class="n">humanize_days</span><span class="p">(</span><span class="s1">&#39;3,4,7&#39;</span><span class="p">),</span> <span class="s1">&#39;monday, wednesday, saturday&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>assert_equal</code> method makes sure that <code>humanize_days(‘2’)</code> returns a string with a value of <code>’monday’</code>; if it doesn’t, it will raise an error. Because the <code>humanize_days</code> method understands three different string formats, I test each one once. If one of the three calls fails, it will tell me exactly which one failed, thereby making debugging easier. All it takes is three lines of code, and my method is fully tested.</p>

<p>In practice, we would typically first write these tests, run them to make sure they’re failing, and only then would we start their implementation.</p>

<h2>Unit Tests</h2>

<p>Unit tests are there to test your models. The <code>rails generate model NAME</code> command creates a file for these tests called <code>NAME_test.rb</code> inside the <code>test/models</code> directory. Below are two tests from Phindee for an attribute called <code>location_id</code>:</p>

<figure class='code'><figcaption><span>happy_hour_test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">setup</span>
</span><span class='line'>    <span class="vi">@place</span> <span class="o">=</span> <span class="n">places</span><span class="p">(</span><span class="ss">:thai</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">test</span> <span class="s1">&#39;should be invalid if name is missing&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@place</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="kp">nil</span>
</span><span class='line'>    <span class="n">assert</span> <span class="o">!</span><span class="vi">@place</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">test</span> <span class="s1">&#39;should be invalid if name exceeds max length&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="vi">@place</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s1">&#39;a&#39;</span> <span class="o">*</span> <span class="mi">51</span>
</span><span class='line'>    <span class="n">assert</span> <span class="o">!</span><span class="vi">@place</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">test</span> <span class="s1">&#39;should be invalid if name is not unique&#39;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">identical</span> <span class="o">=</span> <span class="vi">@place</span><span class="o">.</span><span class="n">dup</span>
</span><span class='line'>    <span class="n">assert</span> <span class="o">!</span><span class="n">identical</span><span class="o">.</span><span class="n">valid?</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>setup</code> method is not an actual test case; it’s just a method that gets called before each test case is executed. It simply initializes an instance variable called <code>@place</code> with the fixture we defined earlier called <code>thai</code>. This makes the <code>@place</code> instance variable available inside each subsequent test case.</p>

<p>The first test case sets the <code>name</code> attribute to <code>nil</code> and calls the <code>assert</code> method to check that the <code>valid?</code> method returned <code>false</code>. In other words, it&rsquo;s checking for the line below:</p>

<figure class='code'><figcaption><span>place.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>The second test makes sure that a <code>name</code> attribute that exceeds the maximum length of 50 characters is not valid. This means it will look for a <code>length</code> helper with a <code>maximum</code> value set to 50, like so:</p>

<figure class='code'><figcaption><span>place.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">50</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And finally, the third test makes sure that duplicates are not valid, which means it&rsquo;ll look for a <code>uniqueness</code> helper set to <code>true</code>:</p>

<figure class='code'><figcaption><span>place.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">validates</span> <span class="ss">:name</span><span class="p">,</span> <span class="ss">presence</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="ss">length</span><span class="p">:</span> <span class="p">{</span> <span class="ss">maximum</span><span class="p">:</span> <span class="mi">50</span> <span class="p">},</span> <span class="ss">uniqueness</span><span class="p">:</span> <span class="kp">true</span>
</span></code></pre></td></tr></table></div></figure>


<p>You may be wondering what’s the point of all this? Well, if you ever accidentally delete a uniqueness declaration, for example, the test suite will let you know, and you will be able to fix it before you push your code to production and wreak havoc in your database.</p>

<h2>Functional Tests</h2>

<p>Functional tests are there to test your controllers, although you can also use them to test your views and verify that important HTML elements are present. Running <code>rails generate controller NAME</code> creates a file for these tests called <code>NAME_controller_test.rb</code> inside <code>test/controllers</code>. Let’s look at an example:</p>

<figure class='code'><figcaption><span>happy_hour_controller_test.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'>  <span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="nb">test</span> <span class="s2">&quot;should get happening_now&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">get</span> <span class="ss">:happening_now</span>          <span class="c1"># simulates a get request on happening_now action</span>
</span><span class='line'>    <span class="n">assert_response</span> <span class="ss">:success</span>    <span class="c1"># makes sure response returns with status code 200</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># variables</span>
</span><span class='line'>    <span class="n">assert_not_nil</span> <span class="n">assigns</span><span class="p">(</span><span class="ss">:happening_now</span><span class="p">)</span>
</span><span class='line'>    <span class="n">assert_not_nil</span> <span class="n">assigns</span><span class="p">(</span><span class="ss">:geojson</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># header</span>
</span><span class='line'>    <span class="n">assert_select</span> <span class="s1">&#39;.intro h1&#39;</span><span class="p">,</span> <span class="s1">&#39;phindee&#39;</span>
</span><span class='line'>    <span class="n">assert_select</span> <span class="s1">&#39;.intro p&#39;</span><span class="p">,</span> <span class="sr">/.+/</span>  <span class="c1"># regex makes sure element is not empty</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># definition list</span>
</span><span class='line'>    <span class="n">assert_select</span> <span class="s1">&#39;article dl img&#39;</span><span class="p">,</span> <span class="ss">count</span><span class="p">:</span> <span class="mi">2</span>  <span class="c1"># must be two img elements</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># list items</span>
</span><span class='line'>    <span class="n">assert_select</span> <span class="s1">&#39;article li p&#39;</span><span class="p">,</span> <span class="sr">/</span><span class="si">#{</span><span class="n">humanize_hours</span><span class="p">(</span><span class="n">assigns</span><span class="p">(</span><span class="ss">:happening_now</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">start_time</span><span class="p">)</span><span class="si">}</span><span class="sr">/</span>
</span><span class='line'>    <span class="n">assert_select</span> <span class="s1">&#39;article li h2&#39;</span><span class="p">,</span> <span class="n">assigns</span><span class="p">(</span><span class="ss">:happening_now</span><span class="p">)</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">location</span><span class="o">.</span><span class="n">place</span><span class="o">.</span><span class="n">name</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="o">.</span> <span class="o">.</span> <span class="o">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>assert_not_nil</code> method makes sure the variable that the <code>assigns</code> method retrieves is actually initialized. Note that <code>:happening_now</code> and <code>:geojson</code> are instance variables inside the controller, but here they&rsquo;re symbols.</p>

<p>All the other remaining assertions use the <code>assert_select</code> method to select an HTML element using the familiar CSS syntax and make sure it’s value is what we expect it to be. As you can see, the method is quite powerful; it can check for a specific string, evaluate a regular expression, and check for a certain number of elements using the <code>count</code> method, among <a href="http://api.rubyonrails.org/classes/ActionDispatch/Assertions/SelectorAssertions.html">other things</a>.</p>

<p>I’m only scratching the surface here of what’s possible with functional tests, and I encourage you to check out the official <a href="http://guides.rubyonrails.org/testing.html">Rails guide on testing</a> to learn more.</p>

<h2>Mailer Tests</h2>

<p>As you might guess, mailer tests are there to test mailer classes. A <code>NAME_mailer_test.rb</code> file is created inside <code>test/mailers</code> anytime you run <code>rails generate mailer NAME</code>. You can test your mailers in two different ways:</p>

<ol>
<li>test the mailer in isolation to make sure its output is what you expect (using unit tests)</li>
<li>test the controllers and models that use the mailers to make sure the right email is sent at the right time (using functional tests)</li>
</ol>


<p>When testing your mailers with unit tests, you’ll use fixtures to provide sample data demonstrating how the output should look. I don’t have any examples of mailer tests to show because I have not yet needed to implement email functionality for Phindee, but the <a href="http://guides.rubyonrails.org/testing.html">Rails guide</a> should give you a good feel for what they look like.</p>

<h2>Integration Tests</h2>

<p>Last but not least, we have integration tests, which are used to test controllers interacting with one another; they’re the “big picture” tests that make sure important workflows within your application are as bug free as possible. I haven’t written any integration tests for Phindee either because the app is simple enough that I only need one controller currently, but that will change in the near future, and I will update this section accordingly; in the meantime, feel free to see the <a href="http://guides.rubyonrails.org/testing.html">Rails guide</a> for examples.</p>

<p>One final thing I’d like to mention is the <code>test/test_helper.rb</code> file, which holds the default configuration for our tests. This file is included in all the tests, which means any methods added here are automatically available in all our tests. Pretty neat.</p>

<h1>Why Not RSpec?</h1>

<p>I chose not to use RSpec because I wanted learn about the way testing is done in Rails by default and see how it compares with RSpec. So far, it seems like both approaches are equally capable of doing everything necessary to sufficiently test your code; they just take a different approach with regards to the way you <em>write</em> the tests. RSpec&rsquo;s syntax seems more verbose and reads like English, while Test Unit’s syntax is more terse.</p>

<p>Currently, I’m leaning towards Test Unit because its terse syntax means less typing, and since it comes baked in with Rails, there is no need to inflate the code base with additional gems. (Rails 4 actually incorporated a library called MiniTest into Test Unit, which now offers support for RSpec-like syntax.)</p>

<p>But all this is irrelevant because what truly matters is that you practice test-driven development. Hopefully, I’ve shown you how easy it is to do it and convinced you that the benefits of doing so more than make up for the effort of writing them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DataMapper: An Alternative to Active Record]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2013/12/19/datamapper-an-alternative-to-active-record/"/>
    <updated>2013-12-19T11:27:00-08:00</updated>
    <id>http://vladigleba.github.io/blog/2013/12/19/datamapper-an-alternative-to-active-record</id>
    <content type="html"><![CDATA[<p>I recently finished working on a Ruby script that needed to store a small amount of data in a database. Having previously worked with <a href="http://guides.rubyonrails.org/active_record_querying.html">Active Record</a>, I loved the idea of an Object Relational Mapper written in Ruby; it makes manipulating data easy and keeps your code organized. Active Record, however, was definitely an overkill for such a small project. I needed something simple, lightweight, and easy to set up.</p>

<!-- more -->


<p>Naturally, I went to Google for advice. A few searches in and I realized that one ORM was showing up in my search results consistently&mdash;DataMapper. Since I had never used it before, I went over to the DataMapper website to <a href="http://datamapper.org/why.html">learn more</a>. It made some impressive promises, but nothing sold me more than the fact that I didn’t have to deal with migrations. While they are useful for large projects with multiple developers, they just seemed like a chore for my small Ruby script.</p>

<p>Now having spent a few days working with it, I’d like to share how it compares with Active Record.</p>

<h1>Setup</h1>

<p>We setup DataMapper with the following line:</p>

<figure class='code'><figcaption><span>script.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="ss">DataMapper</span><span class="p">:</span><span class="ss">:setup</span><span class="p">(</span><span class="ss">:default</span><span class="p">,</span> <span class="s2">&quot;sqlite3://</span><span class="si">#{</span><span class="no">Dir</span><span class="o">.</span><span class="n">pwd</span><span class="si">}</span><span class="s2">/ba.db&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This specifies an SQLite database connection and sets the path to the database file. Of course, you can setup other database connections, like MySQL or PostgreSQL, but I chose SQLite because it was more than enough for my little script. And that one line above is actually all the setup we need!</p>

<h1>Migration-Free</h1>

<p>As I already mentioned, DataMapper doesn’t require you to write migrations, though <a href="https://github.com/datamapper/dm-migrations">you can if you want</a>. Instead, you can generate a schema simply by calling either <code>auto_migrate!</code> or <code>auto_upgrade!</code>. The former destructively drops and recreates your tables, while the latter upgrades your tables without destroying already existing data.</p>

<p>The schema is created based on model definitions, which look like so:</p>

<figure class='code'><figcaption><span>script.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">include</span> <span class="ss">DataMapper</span><span class="p">:</span><span class="ss">:Resource</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:id</span><span class="p">,</span> <span class="no">Serial</span>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:email</span><span class="p">,</span> <span class="nb">String</span><span class="p">,</span> <span class="ss">unique</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="nb">format</span><span class="p">:</span> <span class="ss">:email_address</span>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:created_at</span><span class="p">,</span> <span class="no">DateTime</span>
</span><span class='line'>  <span class="n">property</span> <span class="ss">:updated_at</span><span class="p">,</span> <span class="no">DateTime</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">validates_presence_of</span> <span class="ss">:email</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates a User model definition with four attributes: <code>:id</code>, <code>:email</code>, <code>:created_at</code>, and <code>:updated_at</code>. (Unlike Active Record, DataMapper doesn&rsquo;t create the <code>:created_at</code> and <code>:updated_at</code> attributes by default.) The attribute name and type are defined using the <code>property</code> keyword.</p>

<p>The code above then adds <a href="http://datamapper.org/docs/validations.html">validations</a> using either the auto-validation methods, which we specify in the same line as our property declaration, or the manual validation methods, which we specify right below our property declarations. Only the four most common validations are implemented as auto-validation methods: <code>required</code>, <code>unique</code>, <code>length</code>, and <code>format</code>; all the other ones are implemented as manual validation methods.</p>

<p>Once we have our models defined, all we have left to do is finalize them:</p>

<figure class='code'><figcaption><span>script.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">DataMapper</span><span class="o">.</span><span class="n">finalize</span><span class="o">.</span><span class="n">auto_upgrade!</span>
</span></code></pre></td></tr></table></div></figure>


<p>The <code>finalize</code> method runs the validations and initializes the properties, while the <code>auto_upgrade!</code> method will create new tables, if necessary, and add columns to existing tables, but it won’t change any existing columns. If you want to destructively drop and recreate your tables, use the <code>auto_migrate!</code> method instead.</p>

<p>Believe it or not, that’s all there is to it! After we run <code>auto_upgrade!</code>, our database is ready to go.</p>

<h1>Performant by Default</h1>

<p>One last thing I’d like to mention is that DataMapper is built to be performant by default. It does this, for example, by issuing the minimum possible number of queries by default, unlike Active Record, which requires the use of the <code>includes</code> method to do so. DataMapper also lazy-loads your queries, which means it waits until the very last second to actually issue the query. (Active Record has been doing this since Rails 3.)</p>

<p>Of course, DataMapper comes with other standard features you’d expect from an ORM, like callbacks, associations, chaining, and single table inheritance. It supports most major SQL databases, but it can also map object models to YAML, JSON, XML, and CSV. Feel free to read over the <a href="http://datamapper.org/docs/">documentation</a> to get a sense of all of its capabilities.</p>

<h1>The Verdict</h1>

<p>DataMapper is a great persistent storage solution for Ruby scripts. It&rsquo;s simple, lightweight, and takes just a couple of lines to have everything setup and ready to go. DataMapper does what it does well and gets out of the way, which means you can go back to writing actual code. Of course, if I was developing a real Rails application, I’d probably use Active Record, as it’s more robust and battle-tested, but DataMapper was a perfect fit for my Ruby script.</p>

<p>It’s worth noting that I’m using DataMapper version 1.2.0 above, the latest stable release, which is no longer actively developed because focus has shifted to version 2, which is now called <a href="http://rom-rb.org/">Ruby Object Mapper</a> (ROM). The first version of ROM was released just <a href="https://twitter.com/rom_rb/statuses/370985979554721792">a few months ago</a>, and I don&rsquo;t know if it’s battle-tested enough for actual use in projects.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using @font-face with Ruby on Rails]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2013/11/29/using-at-font-face-with-ruby-on-rails/"/>
    <updated>2013-11-29T11:35:00-08:00</updated>
    <id>http://vladigleba.github.io/blog/2013/11/29/using-at-font-face-with-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>When I was working on <a href="http://phindee.com/">Phindee</a>, I struggled with adding custom fonts; the asset pipeline had just been released, and it changed how one worked with assets. Perhaps there are others out there struggling with the same thing, which is why I’d like to share what I did and hopefully save some time for a few.</p>

<!-- more -->


<p>I&rsquo;ll be using <a href="http://www.fontsquirrel.com/">Font Squirrel</a> to generate the necessary font files, but there are other alternatives out there like <a href="https://www.google.com/fonts/">Google Fonts</a> and <a href="http://typekit.com/">Typekit</a>, which are easier to set up because they host the fonts for you on their own servers. The down side is if their servers go down so do your fonts. With Font Squirrel this is not the case because the fonts live directly on your own servers. This makes the setup a bit more involved, but hey, it&rsquo;s a learning opportunity, and the pay off is well worth it.</p>

<p>All right, let&rsquo;s get to work.</p>

<h1>Setup</h1>

<p>First thing we’ll do is add a new directory called “fonts” to the <code>app/assets</code> directory; this is where we’ll place all our font files. I usually use Font Squirrel to generate these files, as they have hundreds of open source fonts to choose from; if you find a font you like, you can get access to the font files by downloading the font’s Webfont Kit, which includes all four major font formats (TTF, EOT, WOFF, and SVG). This means your fonts will be cross-browser compatible, as each major browser now supports at least one of the four formats.</p>

<p>Once we have our font files downloaded, we’ll add them to <code>app/assets/fonts</code>.</p>

<h1>Declaring Your Fonts</h1>

<p>All right, we’re now ready to declare our fonts. In order to keep our code organized, we’ll add a new <code>fonts.css.scss</code> file to <code>app/assets/stylesheets</code>, and we’ll make our <code>@font-face</code> declarations right inside it. (Note that I use the SASS pre-compiler; hence, the additional <code>.scss</code> extension.)</p>

<p>Since I downloaded my fonts from Font Squirrel, I already have my font declarations pre-written for me. All I need to do is open the Webfont Kit I downloaded earlier, find the <code>stylesheet.css</code> file, and copy and paste the code into the <code>font.css.scss</code> file I just created above. If you didn’t use Font Squirrel, you’ll need to write the declarations yourself. You can follow the examples at <a href="https://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax">fontspring.com</a> for guidance.</p>

<p>I downloaded Font Squirrel’s &ldquo;Action Man&rdquo; font as an example, and below is the <code>@font-face</code> declaration that came with it.</p>

<figure class='code'><figcaption><span>fonts.css.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="k">@font-face</span> <span class="p">{</span>
</span><span class='line'>    <span class="na">font-family</span><span class="o">:</span> <span class="s1">&#39;</span><span class="s2">action_manregular&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="na">src</span><span class="o">:</span> <span class="nf">asset-url</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">Action_Man-webfont.eot&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="na">src</span><span class="o">:</span> <span class="nf">asset-url</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">Action_Man-webfont.eot?#iefix&#39;</span><span class="p">)</span> <span class="nf">format</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">embedded-opentype&#39;</span><span class="p">)</span><span class="o">,</span>
</span><span class='line'>           <span class="nf">asset-url</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">Action_Man-webfont.woff&#39;</span><span class="p">)</span> <span class="nf">format</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">woff&#39;</span><span class="p">)</span><span class="o">,</span>
</span><span class='line'>           <span class="nf">asset-url</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">Action_Man-webfont.ttf&#39;</span><span class="p">)</span> <span class="nf">format</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">truetype&#39;</span><span class="p">)</span><span class="o">,</span>
</span><span class='line'>           <span class="nf">asset-url</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">Action_Man-webfont.svg#action_manregular&#39;</span><span class="p">)</span> <span class="nf">format</span><span class="p">(</span><span class="s1">&#39;</span><span class="s2">svg&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="na">font-weight</span><span class="o">:</span> <span class="no">normal</span><span class="p">;</span>
</span><span class='line'>    <span class="na">font-style</span><span class="o">:</span> <span class="no">normal</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that the above declaration uses the <code>url()</code> methods by default to specify the font’s location. In order to make this work with the Rails Asset Pipeline, you’ll want to change those methods to <code>asset-url()</code>, or the fonts might not load.</p>

<p>Now all that&rsquo;s left is to declare our font inside whatever CSS file is appropriate using the <code>font-family</code> property, like so:</p>

<figure class='code'><figcaption><span>base.css.scss</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='scss'><span class='line'><span class="nt">p</span> <span class="p">{</span> <span class="na">font-family</span><span class="o">:</span> <span class="s1">&#39;</span><span class="s2">action_manregular&#39;</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note that my font name matches the font name inside the <code>@font-face</code> <code>font-family</code> declaration. If names don’t match exactly, it might not work.</p>

<h1>And That&rsquo;s a Wrap</h1>

<p>Believe it or not, that’s all there is to it! If you refresh your browser, you should be able to see the new fonts in action. If that’s not the case, double check to make sure you’re using the <code>font-url()</code> methods if you’re running a pre-compiler like SASS or LESS, and make sure your <code>font-family</code> declarations match your <code>@font-face</code> declarations to the tee, including little things like capitalization, hyphens, underscores, etc. If that doesn&rsquo;t do it then Google might be your best bet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using MapBox with Ruby on Rails]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2013/11/14/using-mapbox-with-ruby-on-rails/"/>
    <updated>2013-11-14T10:39:00-08:00</updated>
    <id>http://vladigleba.github.io/blog/2013/11/14/using-mapbox-with-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>Last week <a href="http://vladigleba.github.io/blog/2013/11/08/phindee-a-new-way-to-discover-happy-hours-in-downtown-portland/">I wrote about</a> <a href="http://phindee.com/">Phindee</a>, a Ruby on Rails app I made to make it easy to discover happy hours in downtown Portland. I quickly mentioned that Phindee’s mapping functionality is provided by the <a href="https://www.mapbox.com/mapbox.js/">MapBox JavaScript API</a>, but did not go into any more detail for brevity reasons. I still think it’s an important topic to talk about because I remember having a hard time finding tutorials about integrating MapBox with Ruby on Rails, specifically.</p>

<!-- more -->


<p>I hope this post fills a bit of that void.</p>

<h1>Why MapBox?</h1>

<p>It’s actually quite simple, really. You see, Google is an immense company swimming in cash and dominating virtually every product it has its hands in. Who has the world’s most popular video sharing site? Google. Search engine? Google. How about email service? Google. And mapping service? Google. Whose mobile operating system has the largest market share worldwide? Google’s. Heck, it’s not even a close race in most of these categories.</p>

<p>While this is great for the company, it&rsquo;s not so healthy for the rest of us. Whenever a company lacks competition, the pace of innovation slows, and arrogance towards customers tends to rise. Anytime a majority of our data is concentrated in the hands of a single company, feelings of unease should arise. That’s why whenever a small, promising startup takes on the giant, I will cheer for <a href="http://venturebeat.com/2013/10/16/mapbox-heads-into-battle-against-google-maps-with-a-10m-war-chest-from-foundry-group/">the underdog</a>. And <a href="http://www.pcmag.com/article2/0,2817,2401037,00.asp">I’m not the only one</a>.</p>

<p>Besides, MapBox is actually open source, and given a choice, I’ll go with open source over proprietary any day.</p>

<h1>Converting Addresses into Coordinates</h1>

<p>All right, enough of that. Let&rsquo;s start coding.</p>

<p>First thing we&rsquo;ll do is convert our addresses into coordinates, which MapBox needs in order to place our markers (pin-drops) on the map. We can do this manually by using the <a href="https://www.mapbox.com/developers/api/geocoding/">MapBox Geocoding API</a>, or we could automate it with the <a href="http://www.rubygeocoder.com/">Geocoder</a> gem. Because there is a <a href="http://railscasts.com/episodes/273-geocoder">Railscasts episode</a> covering the gem, I won’t go into any more detail here.</p>

<h1>Building a JSON object</h1>

<p>Once we have the coordinates, we’re ready to build a JSON object array that will tell MapBox how to display our markers. Our JSON objects will be in the <a href="https://en.wikipedia.org/wiki/GeoJSON">GeoJSON format</a>, which is just a format to describe geographic data in JSON. MapBox uses the GeoJSON format to capture the necessary data needed to generate all the markers on the map. Building a JSON object in Rails is easy. The code below shows how I did it for Phindee; it comes from my <code>HappyHourController</code>.</p>

<figure class='code'><figcaption><span>happy_hours_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vi">@happy_hours</span> <span class="o">=</span> <span class="no">HappyHour</span><span class="o">.</span><span class="n">all</span>
</span><span class='line'><span class="vi">@geojson</span> <span class="o">=</span> <span class="nb">Array</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="vi">@happy_hours</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">happy_hour</span><span class="o">|</span>
</span><span class='line'>  <span class="vi">@geojson</span> <span class="o">&lt;&lt;</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;Feature&#39;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">geometry</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="ss">type</span><span class="p">:</span> <span class="s1">&#39;Point&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">coordinates</span><span class="p">:</span> <span class="o">[</span><span class="n">happy_hour</span><span class="o">.</span><span class="n">longitude</span><span class="p">,</span> <span class="n">happy_hour</span><span class="o">.</span><span class="n">latitude</span><span class="o">]</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="ss">properties</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>      <span class="nb">name</span><span class="p">:</span> <span class="n">happy_hour</span><span class="o">.</span><span class="n">name</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">address</span><span class="p">:</span> <span class="n">happy_hour</span><span class="o">.</span><span class="n">street</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:&#39;marker-color&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;#00607d&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:&#39;marker-symbol&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;circle&#39;</span><span class="p">,</span>
</span><span class='line'>      <span class="ss">:&#39;marker-size&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;medium&#39;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above code simply loops through each happy hour, creates an object, then appends and returns the newly created object to the <code>@geojson</code> array with the help of the <code>&lt;&lt;</code> method. Note that each object in our JSON array must contain a <code>type</code> key, a <code>geometry</code> key, and a <code>property</code> key. In our example above, the <code>geometry</code> key says that we want our marker displayed as a point at that specific set of coordinates, while the <code>property</code> key says we want our marker to be a medium blue circle that displays the happy hour name and street address when clicked.</p>

<p>I placed the above code inside one of the methods in my happy_hours_controller.rb file, as that’s the controller that deals with happy hours. You’ll place your code inside whatever controller is appropriate for your specific situation.</p>

<h2>Telling Rails How to Respond</h2>

<p>Because we want Rails to be able to return a JSON object, we’ll need to explicitly tell it do so via a <code>respond_to</code> block, which we will place right after the code we wrote above.</p>

<figure class='code'><figcaption><span>happy_hours_controller.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">respond_to</span> <span class="k">do</span> <span class="o">|</span><span class="nb">format</span><span class="o">|</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">html</span>
</span><span class='line'>  <span class="nb">format</span><span class="o">.</span><span class="n">json</span> <span class="p">{</span> <span class="n">render</span> <span class="ss">json</span><span class="p">:</span> <span class="vi">@geojson</span> <span class="p">}</span>  <span class="c1"># respond with the created JSON object</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Depending on the type of request, only one of the two lines above will be executed. For example, when we will later make an AJAX request in the JSON format, Rails will know to respond with the JSON object we just created above; otherwise, it will respond with a regular HTML file.</p>

<h1>Working with the MapBox API</h1>

<p>Now that we have the building blocks in place, we’re ready to start working with the MapBox API itself. My code examples below will all be in CoffeeScript because that’s what I used for Phindee, but if you’re not familiar with CoffeeScript, you can copy the code examples into <a href="http://js2coffee.org/">js2coffee.org</a> to get the JavaScript equivalent.</p>

<h2>Adding the Library Code</h2>

<p>All right, first thing we’ll do is include the MapBox JavaScript API, along with the accompanying CSS code; this will go inside our main application layout file (be sure to place it <em>before</em> your <code>javascript_include_tag</code>).</p>

<figure class='code'><figcaption><span>application.html.erb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;script </span><span class="na">src=</span><span class="s">&quot;http://api.tiles.mapbox.com/mapbox.js/v1.0.2/mapbox.js&quot;</span><span class="nt">&gt;&lt;/script&gt;</span>
</span><span class='line'><span class="nt">&lt;link</span> <span class="na">href=</span><span class="s">&quot;http://api.tiles.mapbox.com/mapbox.js/v1.0.2/mapbox.css&quot;</span> <span class="na">rel=</span><span class="s">&quot;stylesheet&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>When I wrote this code, the latest version of the MapBox JavaScript API was 1.0.2, and my links above reflect that. See their <a href="https://www.mapbox.com/mapbox.js/overview/">documentation</a> for the current latest version and update your links accordingly.</p>

<h2>Initializing the Map</h2>

<p>Next, we’ll create a free MapBox account and make our own custom-colored map. Once we have the map ready, we’ll open the JavaScript file that corresponds to the controller which contains the two earlier code blocks (mine is called <code>happy_hours.js.coffee</code>), and we’ll add a line instantiating the map with the map ID of the custom-colored map we just created (make sure you add this and all subsequent CoffeeScript code inside a <code>$(document).ready -&gt;</code> method, or it won&rsquo;t load).</p>

<figure class='code'><figcaption><span>happy_hours.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># initialize the map on the &#39;map&#39; div</span>
</span><span class='line'><span class="c1"># with the given map ID, center, and zoom</span>
</span><span class='line'><span class="nv">map = </span><span class="nx">L</span><span class="p">.</span><span class="nx">mapbox</span><span class="p">.</span><span class="nx">map</span><span class="p">(</span><span class="s">&#39;map&#39;</span><span class="p">,</span> <span class="s">&#39;your-map-id&#39;</span><span class="p">).</span><span class="nx">setView</span><span class="p">([</span><span class="mf">45.52086</span><span class="p">,</span> <span class="o">-</span><span class="mf">122.679523</span><span class="p">],</span> <span class="mi">14</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The coordinates we’re passing on to the <code>setView()</code> method tell the API where to center the map, while the 14 represents the zoom level for the map. In reality, <code>setView()</code> actually comes from the <a href="http://leafletjs.com/reference.html#map-setview">Leaflet JavaScript library</a>; MapBox simply extends and simplifies it.</p>

<h2>Making the AJAX Call</h2>

<p>Okay, now we’re ready to use the JSON objects we created earlier. We’ll make an AJAX call in the JSON format, and Rails will return our JSON object.</p>

<figure class='code'><figcaption><span>happy_hours.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># get JSON object</span>
</span><span class='line'><span class="c1"># on success, parse it and</span>
</span><span class='line'><span class="c1"># hand it over to MapBox for mapping</span>
</span><span class='line'><span class="nx">$</span><span class="p">.</span><span class="nx">ajax</span>
</span><span class='line'>  <span class="nv">dataType: </span><span class="s">&#39;text&#39;</span>
</span><span class='line'>  <span class="nv">url: </span><span class="s">&#39;happy_hours/happening_now.json&#39;</span>
</span><span class='line'>  <span class="nv">success: </span><span class="nf">(data) -&gt;</span>
</span><span class='line'>    <span class="nv">geojson = </span><span class="nx">$</span><span class="p">.</span><span class="nx">parseJSON</span><span class="p">(</span><span class="nx">data</span><span class="p">)</span>
</span><span class='line'>    <span class="nx">map</span><span class="p">.</span><span class="nx">featureLayer</span><span class="p">.</span><span class="nx">setGeoJSON</span><span class="p">(</span><span class="nx">geojson</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The code above simply sends out an AJAX call to the URL that corresponds to the controller method into which we added the JSON object code from before. The <code>.json</code> extension alerts Rails to return a JSON response, instead of an HTML one. On a successful return, we then parse the JSON object and pass it on to the <code>setGeoJSON()</code> method for mapping. Kid stuff.</p>

<h2>Creating Custom Popups</h2>

<p>Now we’ll create our custom popups.</p>

<figure class='code'><figcaption><span>happy_hours.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># add custom popups to each marker</span>
</span><span class='line'><span class="nx">map</span><span class="p">.</span><span class="nx">featureLayer</span><span class="p">.</span><span class="nx">on</span> <span class="s">&#39;layeradd&#39;</span><span class="p">,</span> <span class="nf">(e) -&gt;</span>
</span><span class='line'>  <span class="nv">marker = </span><span class="nx">e</span><span class="p">.</span><span class="nx">layer</span>
</span><span class='line'>  <span class="nv">properties = </span><span class="nx">marker</span><span class="p">.</span><span class="nx">feature</span><span class="p">.</span><span class="nx">properties</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># create custom popup</span>
</span><span class='line'>  <span class="nv">popupContent = </span> <span class="s">&#39;&lt;div class=&quot;popup&quot;&gt;&#39;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s">&#39;&lt;h3&gt;&#39;</span> <span class="o">+</span> <span class="nx">properties</span><span class="p">.</span><span class="nx">name</span> <span class="o">+</span> <span class="s">&#39;&lt;/h3&gt;&#39;</span> <span class="o">+</span>
</span><span class='line'>                    <span class="s">&#39;&lt;p&gt;&#39;</span> <span class="o">+</span> <span class="nx">properties</span><span class="p">.</span><span class="nx">address</span> <span class="o">+</span> <span class="s">&#39;&lt;/p&gt;&#39;</span> <span class="o">+</span>
</span><span class='line'>                  <span class="s">&#39;&lt;/div&gt;&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># http://leafletjs.com/reference.html#popup</span>
</span><span class='line'>  <span class="nx">marker</span><span class="p">.</span><span class="nx">bindPopup</span> <span class="nx">popupContent</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">closeButton: </span><span class="kc">false</span>
</span><span class='line'>    <span class="nv">minWidth: </span><span class="mi">320</span>
</span></code></pre></td></tr></table></div></figure>


<p>To summarize the code above, we’re simply looping through each marker, creating a custom popup for it, and then binding it using the <code>bindPop()</code> method, which once again comes from the Leaflet library.</p>

<h2>Opening a Popup Programmatically</h2>

<p>If you look at <a href="http://phindee.com/">Phindee</a>, you’ll notice that when you open the sidebar and click on a happy hour, the popup on the corresponding marker on the map automatically opens up. Being able to open up a popup programmatically is useful, and below is how I did it.</p>

<figure class='code'><figcaption><span>happy_hours.js.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># handles a sidebar happy hour click</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="s">&#39;article li&#39;</span><span class="p">).</span><span class="nx">click</span> <span class="nf">(e) -&gt;</span>
</span><span class='line'>  <span class="nv">current = </span><span class="nx">$</span><span class="p">(</span><span class="k">this</span><span class="p">)</span>
</span><span class='line'>  <span class="nv">currentlyClickedName = </span><span class="nx">current</span><span class="p">.</span><span class="nx">find</span><span class="p">(</span><span class="s">&#39;h2&#39;</span><span class="p">).</span><span class="nx">text</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># opens/closes popup for currently clicked happy hour</span>
</span><span class='line'>  <span class="nx">map</span><span class="p">.</span><span class="nx">featureLayer</span><span class="p">.</span><span class="nx">eachLayer</span> <span class="nf">(marker) -&gt;</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">marker</span><span class="p">.</span><span class="nx">feature</span><span class="p">.</span><span class="nx">properties</span><span class="p">.</span><span class="nx">name</span> <span class="o">is</span> <span class="nx">currentlyClickedName</span>
</span><span class='line'>      <span class="nv">id = </span><span class="nx">layer</span><span class="p">.</span><span class="nx">_leaflet_id</span>
</span><span class='line'>      <span class="nx">map</span><span class="p">.</span><span class="nx">_layers</span><span class="p">[</span><span class="nx">id</span><span class="p">].</span><span class="nx">openPopup</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>We’re simply adding a <code>click</code> event on the sidebar happy hours, extracting the happy hour name, and looping through each marker to find the one with the matching name. Once we find a match, we extract the marker’s ID, and use that ID to open up the popup programmatically by calling Leaflet’s <code>openPopup()</code> method.</p>

<p>And that’s all there is to it! Our MapBox integration with Ruby on Rails is now complete, although we only scratched the surface of what&rsquo;s possible. Feel free to take a look at the <a href="https://www.mapbox.com/mapbox.js">MapBox</a> and <a href="http://leafletjs.com/reference.html">Leaflet</a> documentation to learn more.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Phindee: A New Way to Discover Happy Hours in Downtown Portland]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2013/11/08/phindee-a-new-way-to-discover-happy-hours-in-downtown-portland/"/>
    <updated>2013-11-08T12:59:00-08:00</updated>
    <id>http://vladigleba.github.io/blog/2013/11/08/phindee-a-new-way-to-discover-happy-hours-in-downtown-portland</id>
    <content type="html"><![CDATA[<p>I love Portland. It’s a fun, quirky city that makes me feel right at home. And the longer I live here, the deeper my affection grows. There are many reasons why this is so, but one that&rsquo;s high on the list is the food scene. Now I haven’t lived in any other major city, so I can’t compare, but others who have tend to agree. <!-- more --></p>

<p>I’m certainly satisfied.</p>

<h1>An Idea Is Born</h1>

<p>Of course, eating out all the time can get a bit expensive, and being a college student, I’m definitely not swimming in cash. I usually eat out just for lunch because I hate bringing cold lunch, but even this can quickly add up. So in an effort to save money (and to learn Ruby on Rails), I built a happy hour web application a couple months ago called <a href="http://phindee.com/">Phindee</a>.</p>

<p>Being a web developer, I always enjoy learning about other people&rsquo;s stacks, so I&rsquo;d like to return the favor and share how Phindee works.</p>

<h1>A Look at the Wiring</h1>

<p>When you visit Phindee, you’re presented with a map of the current happy hours in downtown Portland, along with information like the happy hour type and time, as well as the name, phone number, website, and address of its location. And of course, it doesn’t matter what device you use to visit Phindee because it’s based on a responsive design.</p>

<p>Behind the scenes, Phindee sits on top of a <a href="http://linode.com/">Linode</a> server powered by <a href="http://www.ubuntu.com/">Ubuntu</a> and served by <a href="http://nginx.org/">Nginx</a> and <a href="http://unicorn.bogomips.org/">Unicorn</a>. I originally had it setup with <a href="https://www.phusionpassenger.com/">Passenger</a>, but since I like to do multiple deploys a day, I got tired of Passenger restarts and site downtime. Unicorn solves this nicely.</p>

<h2>Deployment</h2>

<p>With regards to choosing Nginx, it was a matter of simplicity and speed. Phindee marked my first try at setting up a server from scratch, and from what I read online, Nginx was best suited for my situation. When it came to the actual setup, Ryan Bates’ <a href="http://railscasts.com/">Railscasts episodes</a> helped me out tremendously, especially his episode about <a href="http://railscasts.com/episodes/335-deploying-to-a-vps">VPS deployment</a>.</p>

<p>Up to that point, my previously deployment experience consisted of firing up <a href="http://fireftp.net/">FireFTP</a> and dragging and dropping the necessary files into the appropriate directories on my server. Funny, I know. As a result, it took me a couple of long nights to get everything working properly. Looking back, it was definitely worth it though.</p>

<h2>Storage</h2>

<p>With regards to storage, I went with <a href="http://www.sqlite.org/">SQLite</a> because it was already setup as the Rails default database. I know, kinda lame, but figuring out how to setup a more sophisticated database did not seem like a good use of time, especially since I already had my hands full with server setup. But now that I&rsquo;m done, I do plan on migrating to a <a href="http://www.postgresql.org/">PostgreSQL</a> and <a href="http://redis.io/">Redis</a> backend in the near future.</p>

<h2>Mapping</h2>

<p>The mapping functionality is provided by the excellent <a href="https://www.mapbox.com/mapbox.js/">MapBox JavaScript API</a>. I stumbled upon MapBox thanks to an A List Apart <a href="http://alistapart.com/article/hack-your-maps">article</a> I had read. I originally planned on using Google Maps, but the level of customization MapBox allows is incredible and their documentation is outstanding. On top of that, I feel like Google already has enough money, so why not support an open source service built by a cool new company? More diversity can&rsquo;t hurt, right?</p>

<h2>Icons</h2>

<p>The icons came from <a href="http://thenounproject.com/">The Noun Project</a>, an excellent collection of vector symbols. All the icons are free, but you are required to attribute the designer if you use them. If that’s not possible, you’re free to purchase a full license from the designer and use the icon without attribution; the fee is usually $1.99.</p>

<h2>Preprocessors</h2>

<p>Finally, I rely on <a href="http://slim-lang.com/">SLIM</a> to generate the HTML, <a href="http://sass-lang.com/">SASS</a> to generate the CSS, and <a href="http://coffeescript.org/">CoffeeScript</a> to generate the JavaScript. These pre-processors are easy to pick up, and they’ll save you more than a few keystrokes.</p>

<h1>The Power of the Web</h1>

<p>The world population is now approaching 7.1 billion and <a href="http://data.worldbank.org/indicator/IT.NET.USER.P2">2.5 billion of those</a> are able to access a web application I can build with nothing more than a laptop. I don’t know about you, but that’s mind boggling to me. There are few other professions that have the same reach with such a limited resource pool.</p>

<p>And beyond that, the internet is one of the few things still in existence that gives power and influence to anybody and everybody who has access to it. It transcends borders and gives people a voice. It’s a tremendous blessing that must never be taken away nor destroyed.</p>

<p>It’s an exciting time to be a web developer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Readify: A New Octopress Theme Focused on Readibility]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2013/10/31/introducing-readify-a-new-octopress-theme-focused-on-readibility/"/>
    <updated>2013-10-31T09:20:00-07:00</updated>
    <id>http://vladigleba.github.io/blog/2013/10/31/introducing-readify-a-new-octopress-theme-focused-on-readibility</id>
    <content type="html"><![CDATA[<p>Hackers using the <a href="http://octopress.org/">Octopress blogging framework</a> now have a new responsive theme available focused on readability called <a href="https://github.com/vladigleba/readify">Readify</a>.</p>

<!-- more -->


<h1>Background</h1>

<p>Readify was born out of a desire for a simple, minimalist theme that made the reading experience as pleasurable as possible. There are a couple of minimalist Octopress themes already out there, among them <a href="https://github.com/lucaslew/whitespace">Whitespace</a>, the inspiration behind Readify, but I could not find a theme focused on providing a nice reading experience. So I built Readify to fill in that gap.</p>

<h1>Designed Using a Modular Scale</h1>

<p>Before building Readify, I spent some time studying the designs and the underlying code of the various blogs I follow. I ended up learning <a href="http://vladigleba.github.io/blog/2013/10/22/ways-to-define-a-grid-system/">quite a bit</a>. I read many articles, but the one that resonated with me the most was A List Apart&rsquo;s <cite><a href="http://alistapart.com/articles/more-meaningful-typography/">More Meaningful Typography</a></cite> article; it explained how to use values from a modular scale to build meaningful compositions and achieve visual harmony. I definitely wanted to use this technique with Readify.</p>

<p>My modular scale was based on the <a href="http://en.wikipedia.org/wiki/Golden_ratio">golden ratio</a> (1:1.618) and the numbers 20 and 62. I picked the golden ratio because I had just read about it a week earlier when learning about grid systems and was impressed by its occurance in everything from music to architecture to nature. It is known to provide pleasing, visually harmonious proportions, and that&rsquo;s exactly what I wanted for Readify. With regards to picking the two other numbers, 20 was the font size in pixels at which my body text looked most readable, and 62 was the size at which the blog&rsquo;s title looked best. Not very scientific, but it worked.</p>

<p>I then plugged these two numbers, along with the golden ratio, into the calculator at <a href="http://modularscale.com/">modularscale.com</a>, and I had my modular scale. A majority of the font size, line lenght, margin, and padding values come directly from the numbers in the scale. When I needed more options than the scale offered, I ended up adding or subtracting the numbers from the scale for more flexibility.</p>

<h1>Defined Using <code>rem</code> Units</h1>

<p>If you look at the actual values though, you&rsquo;ll notice that they are specified in a unit called &lsquo;rem&rsquo;. It&rsquo;s similar to the <code>em</code> unit, but the difference is the <code>em</code> is calculated based on the value of the parent element, while the <code>rem</code> is based on the value of the top-level root element, which is usually the <code>html</code> element. This means that if the entire layout is <code>rem</code> based, changing the <code>html</code> element&rsquo;s font size means the layout will also proportionally readjust itself. So if one day you decide to increase your body text size by 5%, you will no longer need to manually readjust all the other font sizes, line heights, margins, and paddings to preserve the layout proportions; all you need to do is increase the <code>html</code> element&rsquo;s font size! Pretty nifty stuff.</p>

<p>But of course, there is one caveat. Older browsers do not support <code>rem</code> units, so it&rsquo;s best to include the pixel equivalents as well. This adds code bloat, of course, but if <code>rem</code> units are right for your project, then I think it&rsquo;s worth it.</p>

<h1>Expressed with Large, Legible Fonts</h1>

<p>I ended up using the same fonts as those used by the Whitespace theme. They contrast nicely with each other, and the <a href="https://www.google.com/fonts/specimen/PT+Serif">PT Serif</a> font looks stunning when used in body text. I don&rsquo;t have a scientific explanation for this, but I always prefer body text to be in a serif font compared with a sans serif one, as I find serif fonts easier to read. But it&rsquo;s easy to change if you prefer the other.</p>

<p>With regards to font size, small sizes on the web are a pet peeve of mine. I hate moving closer to the screen or increasing the font size just so the content is readable. That&rsquo;s why I made Readify&rsquo;s body font size a comfortable 20 pixels.</p>

<h1>Built with Sass</h1>

<p>I chose to use the Sass stylesheet language, instead of CSS, because I like using variables in my stylesheets. Instead of doing a document-wide find and replace, I can just change the variable once, and it all propagates everywhere else. I also like the nesting functionality, which saves me quite a bit of typing. And finally, Sass comes with built in <code>lighten()</code> and <code>darken()</code> functions. This means I can use a single color to derive multiple other colors, and that means less maintenance when it&rsquo;s time to change the color scheme.</p>

<p>And of course, Readify is built with media queries, so it looks stunning&mdash;and readable&mdash;on all devices.</p>

<p>If you think Readify is something you might enjoy, head on over to GitHub and <a href="http://github.com/">give it a try</a>! And feel free to offer feedback! This is my first open source project, so I&rsquo;d love to read your comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ways to Define a Grid System]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2013/10/22/ways-to-define-a-grid-system/"/>
    <updated>2013-10-22T17:32:00-07:00</updated>
    <id>http://vladigleba.github.io/blog/2013/10/22/ways-to-define-a-grid-system</id>
    <content type="html"><![CDATA[<p>I <a href="http://vladigleba.github.io/blog/2013/10/15/im-diving-in/">started blogging</a> last week. And ever since publishing that first post, I&rsquo;ve been trying to find a suitable design for my blog. I looked at many different blog designs for inspiration, and one of my favorites was Whitney Hess&#8217; <cite><a href="http://whitneyhess.com/blog/">Pleasure and Pain</a></cite> blog. I don&rsquo;t know why, but the design just resonates with me. It feels right.</p>

<!-- more -->


<p></p>

<p>My knowledge of grid systems is limited, but I figured the design was probably based on a grid. So I decided to spend the past couple of days learning about grid systems. And because I strongly believe the best way to learn is to teach someone else, I would like to summarize what I learned.</p>

<p>Disclosure: I don&rsquo;t have a background in design, but I&rsquo;m always eager to learn more, so if you&rsquo;re a designer, please feel free to contribute!</p>

<p>All right, on to grids.</p>

<blockquote><p>Spacing and the use of space is what holds a design together. Precise and effective space management can make the difference between an average design and an amazing one. &hellip; How big is the header compared to the navigation bar?  How wide is the photo compared to the sidebar? These ratios are what make or break the balance, emphasis and flow of a design. Additionally &hellip; we constantly are looking for order and understanding of the world around us. &hellip; Our mind is constantly seeking some reason, pattern or rational for what we are seeing. This is especially true of spacing, sizing and proportions. &hellip; If that unity doesn’t exist it will always feel unpolished. <footer>&mdash;<a href="http://3.7designs.co/blog/2010/10/how-to-design-using-the-fibonacci-sequence/">Ross Johnson</a></footer></p></blockquote>

<p>I&rsquo;ve learned about many different ways of defining grids that achieve this unity, but for reasons of brevity, I will talk about just three.</p>

<h1>Grids Based on the Fibonacci Sequence</h1>

<p>The Fibonacci Sequence looks like this:</p>

<pre><code>0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...
</code></pre>

<p>The first two numbers 0 and 1 are always given, and each number after that is the sum of the previous two. Now if you divide 144 by 89, you get 1.617, which is very close to the Golden Ratio (1:1.618). In fact, the higher the numbers in the sequence get, the closer they approach the <a href="http://en.wikipedia.org/wiki/Golden_ratio">Golden Ratio</a>, which is historically known to be aesthetically pleasing and is widely used in all kinds of domains.</p>

<p>Grids based on the Fibonacci sequence use its numbers to define virtually everything from font size and line-height to margins and column widths. The numbers can also be added, subtracted, multiplied, or divided together to offer more choices. I recommend reading Smashing Magazine&rsquo;s <cite><a href="http://www.smashingmagazine.com/2010/02/09/applying-mathematics-to-web-design/">Applying Mathematics to Web Design</a></cite> article to see how the sequence is used to build an actual layout.</p>

<h1>Grids Based on the Canvas</h1>

<p>These grids are built with ratios derived from the available canvas. For example, if your canvas is an A4-sized piece of paper, the ratio would equal the paper&rsquo;s length to width ratio. The canvas is then repeatedly divided according to the ratio and a grid is slowly built up. This creates a sense of connectedness and unity between your layout and the surrounding canvas. I won&rsquo;t go into any more detail, but you can read Mark Boulton&rsquo;s <cite><a href="http://markboulton.co.uk/journal/five-simple-steps-to-designing-grid-systems-part-1">Five Simple Steps</a></cite> series for an illustrative example of this technique.</p>

<h1>Grids Based on the Content</h1>

<blockquote><p>Content precedes design. Design in the absence of content is not design, it&rsquo;s decoration. <footer>&mdash;<a href="https://twitter.com/zeldman/statuses/804159148">Jeffrey Zeldman</a></footer></p></blockquote>

<p>I never really understood the reasoning behind this quote until I read A List Apart&rsquo;s <cite><a href="http://alistapart.com/article/more-meaningful-typography">More Meaningful Typography</a></cite> article. The article describes how to achieve visual harmony with the help of modular scales, which are based on numbers that are meaningful to your content. To summarize, you start with a ratio (like 1.618) and a number (say 10), then you multiply and divide, like so:</p>

<pre><code>10 * 1.618 = 16.180
16.180 * 1.618 = 26.179
26.179 * 1.618 = 42.358
...

10 / 1.618 = 6.180
6.180 / 1.618 = 42.358
42.358 / 1.618 = 2.360
...
</code></pre>

<p>These numbers are then used throughout the design for things like font size, line height, margins, column widths, and much more. I chose the number 10 for illustration purposes, but in reality, the number should be meaningful to your design, such as the font size at which body text looks best, or the width of an image used to frame the page. And of course, numbers can be combined if you need more options.</p>

<p>This method is in contrast to the canvas-based way of defining grids in which the canvas, not the content, is used to build the grid. Now there is no such thing as a defined canvas on the web because websites and web apps are viewed on everything from a small mobile screen to a large desktop monitor or even a TV, which is why I find the other two methods I discussed to be better suited for the web. But between the two, I will definitely use the content-based method in my future projects because I love the fact that the numbers are meaninful to, and are derived from, the content. It just feels more &ldquo;organic&rdquo; to me.</p>

<h1>Parting Words</h1>

<p>I&rsquo;d like to conclude with a quote by Mark Boulton that nicely sums everything up:</p>

<blockquote><p>Aesthetics can be measured and more importantly can be constructed. If you want something to be aesthetically pleasing there are steps you can take to make sure it is going in the right direction. &hellip; Well designed grid systems can make your designs not only more beautiful and legible, but more usable. <footer>&mdash;<a href="http://markboulton.co.uk/journal/five-simple-steps-to-designing-grid-systems-part-2">Mark Boulton</a></footer></p></blockquote>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[I'm Diving In]]></title>
    <summary><![CDATA[]]></summary>
    <link href="http://vladigleba.github.io/blog/2013/10/15/im-diving-in/"/>
    <updated>2013-10-15T11:20:00-07:00</updated>
    <id>http://vladigleba.github.io/blog/2013/10/15/im-diving-in</id>
    <content type="html"><![CDATA[<p>Starting a blog is something I wanted to do for a few years now, but I worried too much about not having enough time or things to write about, so I always put it off. But this weekend that all changed.</p>

<!-- more -->


<p>Having some free time on my hands, I found myself doing what I do best: gravitating towards the computer. Blogging had been on my mind during the past week, so I found myself going over to Google and typing &ldquo;blogging platforms&rdquo; into the search bar. It took just a few clicks to stumble onto <a href="http://octopress.org/">Octopress</a>, a blogging framework for hackers. Coming from a Ruby on Rails background, the framework just made sense to me. I realized this was my moment. I couldn&rsquo;t hold off any longer. So I took the plunge.</p>

<p>Now I&rsquo;m sitting typing up this first post. I am both excited and nervous at the same time, but starting a blog feels right to me. Writing is something I&rsquo;ve always enjoyed doing, so having an outlet to express myself through writing is definitely fulfilling.</p>

<p>I do want to mention that since this is my first time blogging, I want to apologize in advance if I make any rookie mistakes. Feel free to laugh and point it out. I will have a good laugh myself and hopefully learn from it.</p>

<p>My main goal with this blog is to share my web development knowledge. I plan on covering the side projects I work on and the technologies that power them. As an aspiring web developer, I heavily rely on other people&rsquo;s blogs to get stuff done, so I want to give back to the community and hopefully be of similar help to other aspiring web developers.</p>

<p>It&rsquo;s been a long time coming, but I now have a blog.</p>

<p>Stay hungry. Stay foolish.</p>
]]></content>
  </entry>
  
</feed>
