<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Topic: Projects | Vladi Gleba]]></title>
  <link href="http://vladigleba.github.io/blog/topics/projects/atom.xml" rel="self"/>
  <link href="http://vladigleba.github.io/"/>
  <updated>2014-10-12T15:59:10-07:00</updated>
  <id>http://vladigleba.github.io/</id>
  <author>
    <name><![CDATA[Vladi Gleba]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Phindee: A New Way to Discover Happy Hours in Downtown Portland]]></title>
    <link href="http://vladigleba.github.io/blog/2013/11/08/phindee-a-new-way-to-discover-happy-hours-in-downtown-portland/"/>
    <updated>2013-11-08T12:59:00-08:00</updated>
    <id>http://vladigleba.github.io/blog/2013/11/08/phindee-a-new-way-to-discover-happy-hours-in-downtown-portland</id>
    <content type="html"><![CDATA[<p>I love Portland. It’s a fun, quirky city that makes me feel right at home. And the longer I live here, the deeper my affection grows. There are many reasons why this is so, but one that&rsquo;s high on the list is the food scene. Now I haven’t lived in any other major city, so I can’t compare, but others who have tend to agree. <!-- more --></p>

<p>I’m certainly satisfied.</p>

<h1>An Idea Is Born</h1>

<p>Of course, eating out all the time can get a bit expensive, and being a college student, I’m definitely not swimming in cash. I usually eat out just for lunch because I hate bringing cold lunch, but even this can quickly add up. So in an effort to save money (and to learn Ruby on Rails), I built a happy hour web application a couple months ago called <a href="http://phindee.com/">Phindee</a>.</p>

<p>Being a web developer, I always enjoy learning about other people&rsquo;s stacks, so I&rsquo;d like to return the favor and share how Phindee works.</p>

<h1>A Look at the Wiring</h1>

<p>When you visit Phindee, you’re presented with a map of the current happy hours in downtown Portland, along with information like the happy hour type and time, as well as the name, phone number, website, and address of its location. And of course, it doesn’t matter what device you use to visit Phindee because it’s based on a responsive design.</p>

<p>Behind the scenes, Phindee sits on top of a <a href="http://linode.com/">Linode</a> server powered by <a href="http://www.ubuntu.com/">Ubuntu</a> and served by <a href="http://nginx.org/">Nginx</a> and <a href="http://unicorn.bogomips.org/">Unicorn</a>. I originally had it setup with <a href="https://www.phusionpassenger.com/">Passenger</a>, but since I like to do multiple deploys a day, I got tired of Passenger restarts and site downtime. Unicorn solves this nicely.</p>

<h2>Deployment</h2>

<p>With regards to choosing Nginx, it was a matter of simplicity and speed. Phindee marked my first try at setting up a server from scratch, and from what I read online, Nginx was best suited for my situation. When it came to the actual setup, Ryan Bates’ <a href="http://railscasts.com/">Railscasts episodes</a> helped me out tremendously, especially his episode about <a href="http://railscasts.com/episodes/335-deploying-to-a-vps">VPS deployment</a>.</p>

<p>Up to that point, my previously deployment experience consisted of firing up <a href="http://fireftp.net/">FireFTP</a> and dragging and dropping the necessary files into the appropriate directories on my server. Funny, I know. As a result, it took me a couple of long nights to get everything working properly. Looking back, it was definitely worth it though.</p>

<h2>Storage</h2>

<p>With regards to storage, I went with <a href="http://www.sqlite.org/">SQLite</a> because it was already setup as the Rails default database. I know, kinda lame, but figuring out how to setup a more sophisticated database did not seem like a good use of time, especially since I already had my hands full with server setup. But now that I&rsquo;m done, I do plan on migrating to a <a href="http://www.postgresql.org/">PostgreSQL</a> and <a href="http://redis.io/">Redis</a> backend in the near future.</p>

<h2>Mapping</h2>

<p>The mapping functionality is provided by the excellent <a href="https://www.mapbox.com/mapbox.js/">MapBox JavaScript API</a>. I stumbled upon MapBox thanks to an A List Apart <a href="http://alistapart.com/article/hack-your-maps">article</a> I had read. I originally planned on using Google Maps, but the level of customization MapBox allows is incredible and their documentation is outstanding. On top of that, I feel like Google already has enough money, so why not support an open source service built by a cool new company? More diversity can&rsquo;t hurt, right?</p>

<h2>Icons</h2>

<p>The icons came from <a href="http://thenounproject.com/">The Noun Project</a>, an excellent collection of vector symbols. All the icons are free, but you are required to attribute the designer if you use them. If that’s not possible, you’re free to purchase a full license from the designer and use the icon without attribution; the fee is usually $1.99.</p>

<h2>Preprocessors</h2>

<p>Finally, I rely on <a href="http://slim-lang.com/">SLIM</a> to generate the HTML, <a href="http://sass-lang.com/">SASS</a> to generate the CSS, and <a href="http://coffeescript.org/">CoffeeScript</a> to generate the JavaScript. These pre-processors are easy to pick up, and they’ll save you more than a few keystrokes.</p>

<h1>The Power of the Web</h1>

<p>The world population is now approaching 7.1 billion and <a href="http://data.worldbank.org/indicator/IT.NET.USER.P2">2.5 billion of those</a> are able to access a web application I can build with nothing more than a laptop. I don’t know about you, but that’s mind boggling to me. There are few other professions that have the same reach with such a limited resource pool.</p>

<p>And beyond that, the internet is one of the few things still in existence that gives power and influence to anybody and everybody who has access to it. It transcends borders and gives people a voice. It’s a tremendous blessing that must never be taken away nor destroyed.</p>

<p>It’s an exciting time to be a web developer.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Readify: A New Octopress Theme Focused on Readibility]]></title>
    <link href="http://vladigleba.github.io/blog/2013/10/31/introducing-readify-a-new-octopress-theme-focused-on-readibility/"/>
    <updated>2013-10-31T09:20:00-07:00</updated>
    <id>http://vladigleba.github.io/blog/2013/10/31/introducing-readify-a-new-octopress-theme-focused-on-readibility</id>
    <content type="html"><![CDATA[<p>Hackers using the <a href="http://octopress.org/">Octopress blogging framework</a> now have a new responsive theme available focused on readability called <a href="https://github.com/vladigleba/readify">Readify</a>.</p>

<!-- more -->


<h1>Background</h1>

<p>Readify was born out of a desire for a simple, minimalist theme that made the reading experience as pleasurable as possible. There are a couple of minimalist Octopress themes already out there, among them <a href="https://github.com/lucaslew/whitespace">Whitespace</a>, the inspiration behind Readify, but I could not find a theme focused on providing a nice reading experience. So I built Readify to fill in that gap.</p>

<h1>Designed Using a Modular Scale</h1>

<p>Before building Readify, I spent some time studying the designs and the underlying code of the various blogs I follow. I ended up learning <a href="/blog/2013/10/22/ways-to-define-a-grid-system/">quite a bit</a>. I read many articles, but the one that resonated with me the most was A List Apart&rsquo;s <cite><a href="http://alistapart.com/articles/more-meaningful-typography/">More Meaningful Typography</a></cite> article; it explained how to use values from a modular scale to build meaningful compositions and achieve visual harmony. I definitely wanted to use this technique with Readify.</p>

<p>My modular scale was based on the <a href="http://en.wikipedia.org/wiki/Golden_ratio">golden ratio</a> (1:1.618) and the numbers 20 and 62. I picked the golden ratio because I had just read about it a week earlier when learning about grid systems and was impressed by its occurance in everything from music to architecture to nature. It is known to provide pleasing, visually harmonious proportions, and that&rsquo;s exactly what I wanted for Readify. With regards to picking the two other numbers, 20 was the font size in pixels at which my body text looked most readable, and 62 was the size at which the blog&rsquo;s title looked best. Not very scientific, but it worked.</p>

<p>I then plugged these two numbers, along with the golden ratio, into the calculator at <a href="http://modularscale.com/">modularscale.com</a>, and I had my modular scale. A majority of the font size, line lenght, margin, and padding values come directly from the numbers in the scale. When I needed more options than the scale offered, I ended up adding or subtracting the numbers from the scale for more flexibility.</p>

<h1>Defined Using <code>rem</code> Units</h1>

<p>If you look at the actual values though, you&rsquo;ll notice that they are specified in a unit called &lsquo;rem&rsquo;. It&rsquo;s similar to the <code>em</code> unit, but the difference is the <code>em</code> is calculated based on the value of the parent element, while the <code>rem</code> is based on the value of the top-level root element, which is usually the <code>html</code> element. This means that if the entire layout is <code>rem</code> based, changing the <code>html</code> element&rsquo;s font size means the layout will also proportionally readjust itself. So if one day you decide to increase your body text size by 5%, you will no longer need to manually readjust all the other font sizes, line heights, margins, and paddings to preserve the layout proportions; all you need to do is increase the <code>html</code> element&rsquo;s font size! Pretty nifty stuff.</p>

<p>But of course, there is one caveat. Older browsers do not support <code>rem</code> units, so it&rsquo;s best to include the pixel equivalents as well. This adds code bloat, of course, but if <code>rem</code> units are right for your project, then I think it&rsquo;s worth it.</p>

<h1>Expressed with Large, Legible Fonts</h1>

<p>I ended up using the same fonts as those used by the Whitespace theme. They contrast nicely with each other, and the <a href="https://www.google.com/fonts/specimen/PT+Serif">PT Serif</a> font looks stunning when used in body text. I don&rsquo;t have a scientific explanation for this, but I always prefer body text to be in a serif font compared with a sans serif one, as I find serif fonts easier to read. But it&rsquo;s easy to change if you prefer the other.</p>

<p>With regards to font size, small sizes on the web are a pet peeve of mine. I hate moving closer to the screen or increasing the font size just so the content is readable. That&rsquo;s why I made Readify&rsquo;s body font size a comfortable 20 pixels.</p>

<h1>Built with Sass</h1>

<p>I chose to use the Sass stylesheet language, instead of CSS, because I like using variables in my stylesheets. Instead of doing a document-wide find and replace, I can just change the variable once, and it all propagates everywhere else. I also like the nesting functionality, which saves me quite a bit of typing. And finally, Sass comes with built in <code>lighten()</code> and <code>darken()</code> functions. This means I can use a single color to derive multiple other colors, and that means less maintenance when it&rsquo;s time to change the color scheme.</p>

<p>And of course, Readify is built with media queries, so it looks stunning&mdash;and readable&mdash;on all devices.</p>

<p>If you think Readify is something you might enjoy, head on over to GitHub and <a href="http://github.com/">give it a try</a>! And feel free to offer feedback! This is my first open source project, so I&rsquo;d love to read your comments.</p>
]]></content>
  </entry>
  
</feed>
