<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Topic: Design | Vladi Gleba]]></title>
  <link href="http://vladigleba.github.io/blog/topics/design/atom.xml" rel="self"/>
  <link href="http://vladigleba.github.io/"/>
  <updated>2014-10-12T15:59:10-07:00</updated>
  <id>http://vladigleba.github.io/</id>
  <author>
    <name><![CDATA[Vladi Gleba]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Using @font-face with Ruby on Rails]]></title>
    <link href="http://vladigleba.github.io/blog/2013/11/29/using-at-font-face-with-ruby-on-rails/"/>
    <updated>2013-11-29T11:35:00-08:00</updated>
    <id>http://vladigleba.github.io/blog/2013/11/29/using-at-font-face-with-ruby-on-rails</id>
    <content type="html"><![CDATA[<p>When I was working on <a href="http://phindee.com/">Phindee</a>, I struggled with adding custom fonts; the asset pipeline had just been released, and it changed how one worked with assets. Perhaps there are others out there struggling with the same thing, which is why I’d like to share what I did and hopefully save some time for a few.</p>

<!-- more -->


<p>I&rsquo;ll be using <a href="http://www.fontsquirrel.com/">Font Squirrel</a> to generate the necessary font files, but there are other alternatives out there like <a href="https://www.google.com/fonts/">Google Fonts</a> and <a href="http://typekit.com/">Typekit</a>, which are easier to set up because they host the fonts for you on their own servers. The down side is if their servers go down so do your fonts. With Font Squirrel this is not the case because the fonts live directly on your own servers. This makes the setup a bit more involved, but hey, it&rsquo;s a learning opportunity, and the pay off is well worth it.</p>

<p>All right, let&rsquo;s get to work.</p>

<h1>Setup</h1>

<p>First thing we’ll do is add a new directory called “fonts” to the <code>app/assets</code> directory; this is where we’ll place all our font files. I usually use Font Squirrel to generate these files, as they have hundreds of open source fonts to choose from; if you find a font you like, you can get access to the font files by downloading the font’s Webfont Kit, which includes all four major font formats (TTF, EOT, WOFF, and SVG). This means your fonts will be cross-browser compatible, as each major browser now supports at least one of the four formats.</p>

<p>Once we have our font files downloaded, we’ll add them to <code>app/assets/fonts</code>.</p>

<h1>Declaring Your Fonts</h1>

<p>All right, we’re now ready to declare our fonts. In order to keep our code organized, we’ll add a new <code>fonts.css.scss</code> file to <code>app/assets/stylesheets</code>, and we’ll make our <code>@font-face</code> declarations right inside it. (Note that I use the SASS pre-compiler; hence, the additional <code>.scss</code> extension.)</p>

<p>Since I downloaded my fonts from Font Squirrel, I already have my font declarations pre-written for me. All I need to do is open the Webfont Kit I downloaded earlier, find the <code>stylesheet.css</code> file, and copy and paste the code into the <code>font.css.scss</code> file I just created above. If you didn’t use Font Squirrel, you’ll need to write the declarations yourself. You can follow the examples at <a href="https://www.fontspring.com/blog/the-new-bulletproof-font-face-syntax">fontspring.com</a> for guidance.</p>

<p>I downloaded Font Squirrel’s &ldquo;Action Man&rdquo; font as an example, and below is the <code>@font-face</code> declaration that came with it.</p>

<p>``` scss fonts.css.scss
@font-face {</p>

<pre><code>font-family: 'action_manregular';
src: asset-url('Action_Man-webfont.eot');
src: asset-url('Action_Man-webfont.eot?#iefix') format('embedded-opentype'),
       asset-url('Action_Man-webfont.woff') format('woff'),
       asset-url('Action_Man-webfont.ttf') format('truetype'),
       asset-url('Action_Man-webfont.svg#action_manregular') format('svg');
font-weight: normal;
font-style: normal;
</code></pre>

<p>}
```</p>

<p>Note that the above declaration uses the <code>url()</code> methods by default to specify the font’s location. In order to make this work with the Rails Asset Pipeline, you’ll want to change those methods to <code>asset-url()</code>, or the fonts might not load.</p>

<p>Now all that&rsquo;s left is to declare our font inside whatever CSS file is appropriate using the <code>font-family</code> property, like so:</p>

<p><code>scss base.css.scss
p { font-family: 'action_manregular'; }
</code></p>

<p>Note that my font name matches the font name inside the <code>@font-face</code> <code>font-family</code> declaration. If names don’t match exactly, it might not work.</p>

<h1>And That&rsquo;s a Wrap</h1>

<p>Believe it or not, that’s all there is to it! If you refresh your browser, you should be able to see the new fonts in action. If that’s not the case, double check to make sure you’re using the <code>font-url()</code> methods if you’re running a pre-compiler like SASS or LESS, and make sure your <code>font-family</code> declarations match your <code>@font-face</code> declarations to the tee, including little things like capitalization, hyphens, underscores, etc. If that doesn&rsquo;t do it then Google might be your best bet.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Introducing Readify: A New Octopress Theme Focused on Readibility]]></title>
    <link href="http://vladigleba.github.io/blog/2013/10/31/introducing-readify-a-new-octopress-theme-focused-on-readibility/"/>
    <updated>2013-10-31T09:20:00-07:00</updated>
    <id>http://vladigleba.github.io/blog/2013/10/31/introducing-readify-a-new-octopress-theme-focused-on-readibility</id>
    <content type="html"><![CDATA[<p>Hackers using the <a href="http://octopress.org/">Octopress blogging framework</a> now have a new responsive theme available focused on readability called <a href="https://github.com/vladigleba/readify">Readify</a>.</p>

<!-- more -->


<h1>Background</h1>

<p>Readify was born out of a desire for a simple, minimalist theme that made the reading experience as pleasurable as possible. There are a couple of minimalist Octopress themes already out there, among them <a href="https://github.com/lucaslew/whitespace">Whitespace</a>, the inspiration behind Readify, but I could not find a theme focused on providing a nice reading experience. So I built Readify to fill in that gap.</p>

<h1>Designed Using a Modular Scale</h1>

<p>Before building Readify, I spent some time studying the designs and the underlying code of the various blogs I follow. I ended up learning <a href="/blog/2013/10/22/ways-to-define-a-grid-system/">quite a bit</a>. I read many articles, but the one that resonated with me the most was A List Apart&rsquo;s <cite><a href="http://alistapart.com/articles/more-meaningful-typography/">More Meaningful Typography</a></cite> article; it explained how to use values from a modular scale to build meaningful compositions and achieve visual harmony. I definitely wanted to use this technique with Readify.</p>

<p>My modular scale was based on the <a href="http://en.wikipedia.org/wiki/Golden_ratio">golden ratio</a> (1:1.618) and the numbers 20 and 62. I picked the golden ratio because I had just read about it a week earlier when learning about grid systems and was impressed by its occurance in everything from music to architecture to nature. It is known to provide pleasing, visually harmonious proportions, and that&rsquo;s exactly what I wanted for Readify. With regards to picking the two other numbers, 20 was the font size in pixels at which my body text looked most readable, and 62 was the size at which the blog&rsquo;s title looked best. Not very scientific, but it worked.</p>

<p>I then plugged these two numbers, along with the golden ratio, into the calculator at <a href="http://modularscale.com/">modularscale.com</a>, and I had my modular scale. A majority of the font size, line lenght, margin, and padding values come directly from the numbers in the scale. When I needed more options than the scale offered, I ended up adding or subtracting the numbers from the scale for more flexibility.</p>

<h1>Defined Using <code>rem</code> Units</h1>

<p>If you look at the actual values though, you&rsquo;ll notice that they are specified in a unit called &lsquo;rem&rsquo;. It&rsquo;s similar to the <code>em</code> unit, but the difference is the <code>em</code> is calculated based on the value of the parent element, while the <code>rem</code> is based on the value of the top-level root element, which is usually the <code>html</code> element. This means that if the entire layout is <code>rem</code> based, changing the <code>html</code> element&rsquo;s font size means the layout will also proportionally readjust itself. So if one day you decide to increase your body text size by 5%, you will no longer need to manually readjust all the other font sizes, line heights, margins, and paddings to preserve the layout proportions; all you need to do is increase the <code>html</code> element&rsquo;s font size! Pretty nifty stuff.</p>

<p>But of course, there is one caveat. Older browsers do not support <code>rem</code> units, so it&rsquo;s best to include the pixel equivalents as well. This adds code bloat, of course, but if <code>rem</code> units are right for your project, then I think it&rsquo;s worth it.</p>

<h1>Expressed with Large, Legible Fonts</h1>

<p>I ended up using the same fonts as those used by the Whitespace theme. They contrast nicely with each other, and the <a href="https://www.google.com/fonts/specimen/PT+Serif">PT Serif</a> font looks stunning when used in body text. I don&rsquo;t have a scientific explanation for this, but I always prefer body text to be in a serif font compared with a sans serif one, as I find serif fonts easier to read. But it&rsquo;s easy to change if you prefer the other.</p>

<p>With regards to font size, small sizes on the web are a pet peeve of mine. I hate moving closer to the screen or increasing the font size just so the content is readable. That&rsquo;s why I made Readify&rsquo;s body font size a comfortable 20 pixels.</p>

<h1>Built with Sass</h1>

<p>I chose to use the Sass stylesheet language, instead of CSS, because I like using variables in my stylesheets. Instead of doing a document-wide find and replace, I can just change the variable once, and it all propagates everywhere else. I also like the nesting functionality, which saves me quite a bit of typing. And finally, Sass comes with built in <code>lighten()</code> and <code>darken()</code> functions. This means I can use a single color to derive multiple other colors, and that means less maintenance when it&rsquo;s time to change the color scheme.</p>

<p>And of course, Readify is built with media queries, so it looks stunning&mdash;and readable&mdash;on all devices.</p>

<p>If you think Readify is something you might enjoy, head on over to GitHub and <a href="http://github.com/">give it a try</a>! And feel free to offer feedback! This is my first open source project, so I&rsquo;d love to read your comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ways to Define a Grid System]]></title>
    <link href="http://vladigleba.github.io/blog/2013/10/22/ways-to-define-a-grid-system/"/>
    <updated>2013-10-22T17:32:00-07:00</updated>
    <id>http://vladigleba.github.io/blog/2013/10/22/ways-to-define-a-grid-system</id>
    <content type="html"><![CDATA[<p>I <a href="/blog/2013/10/15/im-diving-in/">started blogging</a> last week. And ever since publishing that first post, I&rsquo;ve been trying to find a suitable design for my blog. I looked at many different blog designs for inspiration, and one of my favorites was Whitney Hess' <cite><a href="http://whitneyhess.com/blog/">Pleasure and Pain</a></cite> blog. I don&rsquo;t know why, but the design just resonates with me. It feels right.</p>

<!-- more -->


<p></p>

<p>My knowledge of grid systems is limited, but I figured the design was probably based on a grid. So I decided to spend the past couple of days learning about grid systems. And because I strongly believe the best way to learn is to teach someone else, I would like to summarize what I learned.</p>

<p>Disclosure: I don&rsquo;t have a background in design, but I&rsquo;m always eager to learn more, so if you&rsquo;re a designer, please feel free to contribute!</p>

<p>All right, on to grids.</p>

<blockquote><p>Spacing and the use of space is what holds a design together. Precise and effective space management can make the difference between an average design and an amazing one. &hellip; How big is the header compared to the navigation bar?  How wide is the photo compared to the sidebar? These ratios are what make or break the balance, emphasis and flow of a design. Additionally &hellip; we constantly are looking for order and understanding of the world around us. &hellip; Our mind is constantly seeking some reason, pattern or rational for what we are seeing. This is especially true of spacing, sizing and proportions. &hellip; If that unity doesn’t exist it will always feel unpolished. <footer>&mdash;<a href="http://3.7designs.co/blog/2010/10/how-to-design-using-the-fibonacci-sequence/">Ross Johnson</a></footer></p></blockquote>

<p>I&rsquo;ve learned about many different ways of defining grids that achieve this unity, but for reasons of brevity, I will talk about just three.</p>

<h1>Grids Based on the Fibonacci Sequence</h1>

<p>The Fibonacci Sequence looks like this:</p>

<pre><code>0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...
</code></pre>

<p>The first two numbers 0 and 1 are always given, and each number after that is the sum of the previous two. Now if you divide 144 by 89, you get 1.617, which is very close to the Golden Ratio (1:1.618). In fact, the higher the numbers in the sequence get, the closer they approach the <a href="http://en.wikipedia.org/wiki/Golden_ratio">Golden Ratio</a>, which is historically known to be aesthetically pleasing and is widely used in all kinds of domains.</p>

<p>Grids based on the Fibonacci sequence use its numbers to define virtually everything from font size and line-height to margins and column widths. The numbers can also be added, subtracted, multiplied, or divided together to offer more choices. I recommend reading Smashing Magazine&rsquo;s <cite><a href="http://www.smashingmagazine.com/2010/02/09/applying-mathematics-to-web-design/">Applying Mathematics to Web Design</a></cite> article to see how the sequence is used to build an actual layout.</p>

<h1>Grids Based on the Canvas</h1>

<p>These grids are built with ratios derived from the available canvas. For example, if your canvas is an A4-sized piece of paper, the ratio would equal the paper&rsquo;s length to width ratio. The canvas is then repeatedly divided according to the ratio and a grid is slowly built up. This creates a sense of connectedness and unity between your layout and the surrounding canvas. I won&rsquo;t go into any more detail, but you can read Mark Boulton&rsquo;s <cite><a href="http://markboulton.co.uk/journal/five-simple-steps-to-designing-grid-systems-part-1">Five Simple Steps</a></cite> series for an illustrative example of this technique.</p>

<h1>Grids Based on the Content</h1>

<blockquote><p>Content precedes design. Design in the absence of content is not design, it&rsquo;s decoration. <footer>&mdash;<a href="https://twitter.com/zeldman/statuses/804159148">Jeffrey Zeldman</a></footer></p></blockquote>

<p>I never really understood the reasoning behind this quote until I read A List Apart&rsquo;s <cite><a href="http://alistapart.com/article/more-meaningful-typography">More Meaningful Typography</a></cite> article. The article describes how to achieve visual harmony with the help of modular scales, which are based on numbers that are meaningful to your content. To summarize, you start with a ratio (like 1.618) and a number (say 10), then you multiply and divide, like so:</p>

<pre><code>10 * 1.618 = 16.180
16.180 * 1.618 = 26.179
26.179 * 1.618 = 42.358
...

10 / 1.618 = 6.180
6.180 / 1.618 = 42.358
42.358 / 1.618 = 2.360
...
</code></pre>

<p>These numbers are then used throughout the design for things like font size, line height, margins, column widths, and much more. I chose the number 10 for illustration purposes, but in reality, the number should be meaningful to your design, such as the font size at which body text looks best, or the width of an image used to frame the page. And of course, numbers can be combined if you need more options.</p>

<p>This method is in contrast to the canvas-based way of defining grids in which the canvas, not the content, is used to build the grid. Now there is no such thing as a defined canvas on the web because websites and web apps are viewed on everything from a small mobile screen to a large desktop monitor or even a TV, which is why I find the other two methods I discussed to be better suited for the web. But between the two, I will definitely use the content-based method in my future projects because I love the fact that the numbers are meaninful to, and are derived from, the content. It just feels more &ldquo;organic&rdquo; to me.</p>

<h1>Parting Words</h1>

<p>I&rsquo;d like to conclude with a quote by Mark Boulton that nicely sums everything up:</p>

<blockquote><p>Aesthetics can be measured and more importantly can be constructed. If you want something to be aesthetically pleasing there are steps you can take to make sure it is going in the right direction. &hellip; Well designed grid systems can make your designs not only more beautiful and legible, but more usable. <footer>&mdash;<a href="http://markboulton.co.uk/journal/five-simple-steps-to-designing-grid-systems-part-2">Mark Boulton</a></footer></p></blockquote>
]]></content>
  </entry>
  
</feed>
